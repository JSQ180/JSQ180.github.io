<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JSQのBlog</title>
  
  <subtitle>知识小站</subtitle>
  <link href="https://jsq180.github.io/atom.xml" rel="self"/>
  
  <link href="https://jsq180.github.io/"/>
  <updated>2022-09-28T23:44:27.000Z</updated>
  <id>https://jsq180.github.io/</id>
  
  <author>
    <name>JSQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React路由的基本使用</title>
    <link href="https://jsq180.github.io/posts/a3c44df5.html"/>
    <id>https://jsq180.github.io/posts/a3c44df5.html</id>
    <published>2022-09-27T23:47:08.000Z</published>
    <updated>2022-09-28T23:44:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h1><ul><li>一个路由就是一个映射关系(key:value) 。</li><li>一个针对 React 而设计的路由解决方案、可以友好的帮你解决 React components 到 URl 之间的同步映射关系。key 为路径, value 可能是 function 或 component</li><li><strong>本篇章使用 V5 版本的路由</strong></li></ul><p>V6 篇章请看：<a href="/posts/7eac1738.html" title="React Router 6 快速上手">React Router 6 快速上手</a></p><h1 id="路由安装"><a href="#路由安装" class="headerlink" title="路由安装"></a>路由安装</h1><p>官方链接：<a href="https://reacttraining.com/react-router/web/guides/quick-start">https://reacttraining.com/react-router/web/guides/quick-start</a></p><p>本篇章讲解 V5 版本，但是默认安装 V6，所以指定版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install react-router-dom@5<br></code></pre></td></tr></table></figure><h1 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h1><h2 id="路由方法导入"><a href="#路由方法导入" class="headerlink" title="路由方法导入"></a>路由方法导入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h2><p>每个路由要有与其映射的组件。<br>新建 pages 文件夹，用于存放视图组件。创建 Home、Community、MyCenter 组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/Community&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/MyCenter&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 使用 HashRouter，路由会出现 #</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基本写法：</span><br><span class="hljs-comment">     &lt;HashRoute&gt;</span><br><span class="hljs-comment">        &lt;Route path=&quot;/path1&quot; component=&#123;Path1&#125;&gt;路由一&lt;/Route&gt;</span><br><span class="hljs-comment">        &lt;Route path=&quot;/path2&quot; component=&#123;Path2&#125;&gt;路由二&lt;/Route&gt;</span><br><span class="hljs-comment">     &lt;/HashRoute&gt;</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span class='p red'>path定义路径，一定不能忘记写 /</span><p>此时我们可以通过 /home 路由来访问 Home 组件。<br>但是 如果是一个很大的项目，一级路由一级多级路由就会很多，全部存储在 App.js 中略显臃肿，所以我们通常把路由的部分抽离出来：<br>创建 route 文件夹，在里边创建 index.js。<br>把 App.js 中的路由代码转移到 /route/index.js 中，此时两部分的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// /route/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Community&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/MyCenter&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexRoute</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/wantWatch&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Redirect 的 from 是模糊匹配，以上方代码为例。当路由为 &quot;/myCenter&quot; 时，刷新会再次重定向到 &quot;/home&quot;。</span><br><span class="hljs-comment">原因如下：</span><br><span class="hljs-comment">Route 从上到下匹配，当匹配到 /community 时，原本应该加载 Community 组件，但是接着往下走，再次匹配到了 &quot;/&quot;，所以又再次重定向到 &quot;/home&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这时，就会造成一个问题：不管从哪个页面刷新，都会匹配到 /，就会重定向到指定页面，这是一个严重的 bug，此时需要用到 Switch</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IndexRoute</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./route&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;textAlign:</span>&quot;<span class="hljs-attr">center</span>&quot;&#125;&#125;&gt;</span>App组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">IndexRoute</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">IndexRoute</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h1><p>例如：<code>path=&quot;/film/filmlist&quot;</code> <code>path=&quot;film/filmlist/detail&quot;</code><br>并不只有一级路由，这些就是多级路由</p><h1 id="路由重定向以及精确匹配"><a href="#路由重定向以及精确匹配" class="headerlink" title="路由重定向以及精确匹配"></a>路由重定向以及精确匹配</h1><p>重定向精确匹配：<code>&lt;Redirect from=&#39;&#39; to=&#39;&#39; exact&gt;&lt;/Redirect&gt;</code>，路由精确匹配：<code>&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; exact /&gt;</code><br>from to，就是表面意思：从 … 到 …<br>exact：该匹配为精确匹配，加上这个参数，只有 from 完全匹配的情况下，才重定向。不加 exact，是模糊匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">HashRouter</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">    &#123;/* 模糊匹配，当路由中含有 / 的时候，就可以匹配上 */&#125;</span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">exact</span> /&gt;</span> */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">    &#123;/* 精确匹配 exact */&#125;</span><br><span class="language-xml">    &#123;/* 只有当路由为 / 的时候，才重定向，其余时候接着往下走 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">    &#123;/*前面几个都不匹配，加载 404 页面*/&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">HashRouter</span>&gt;<br></code></pre></td></tr></table></figure><span class='p red'>1、 exact 精确匹配 (Redirect 即使使用了exact</span><span class='p red'>2、 Warning: Hash history cannot PUSH the same path; a new entry will not be added to the history stack</span><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>什么是嵌套路由？<br>以下方图片为例：<br><img src="https://s1.xptou.com/2022/09/22/632c73c2b9cd3.png" alt="嵌套路由举例"><br>导航的切换并不是组件的显示与隐藏，而是路由的变化引起的组件切换。但这些组件又有公共的 Home 组件的信息，是属于 Home 组件的下级。<br>是 嵌套在 Home 组件内部的子组件，这就是路由嵌套。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该组件为 Home 组件 ，把公共部分写在 Home 组件中，再在 Home 组件内部写 子路由</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Redirect</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watching</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/Watching&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watched</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/Watched&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">WantWatch</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/WantWatch&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">height:</span> &quot;<span class="hljs-attr">50px</span>&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        Home页轮播图</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcoral</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          已看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          在看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          想看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;/* 路由配置  嵌套路由 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 内部子路由重定向，也需要加 Switch，不然 从上到下都可以匹配到 /home ，最终一定会匹配到重定向 */&#125;</span><br><span class="language-xml">        &#123;/* 写 Switch ，让他匹配到就停止，不再继续匹配 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watched&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/watching&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watching&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/wantwatch&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;WantWatch&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的效果图：<br><img src="https://s1.xptou.com/2022/09/22/632c84899fdb9.png" alt="嵌套路由效果图"><br><div class="tip warning"><p>注意：当一个路由内部需要嵌套子路由的话，该路由一定不能是精确匹配 ，一定不能写 exact ！！！ </p></div></p><h1 id="路由跳转方式"><a href="#路由跳转方式" class="headerlink" title="路由跳转方式"></a>路由跳转方式</h1><p>在次之前，我们的路由映射的组件都是通过导航栏输入对应路由才显示的，正常使用中，则是点击某一项就会跳转显示对应的组件，此时就需要导航。</p><p>原生跳转页面的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明式跳转</span><br>&lt;a href=<span class="hljs-string">&quot;/index.html&quot;</span>&gt;&lt;<span class="hljs-regexp">/a&gt;; /</span><span class="hljs-regexp">/已经提前写好的链接就叫声明式</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 编程式跳转</span><br><span class="hljs-regexp">location.href = &quot;/i</span>ndex.<span class="hljs-property">html</span><span class="hljs-string">&quot;; // 通过 js 实现跳转</span><br></code></pre></td></tr></table></figure><p>了解原生写法之后，就可以在 React 中尝试使用：<br>定义一个 Tabbae 组件，点击 首页，路由为”/home”，跳转 Home 组件。动漫区 “/community” Community 组件。个人中心 “/myCenter” MyCenter 组件。</p><p>这是利用原生 a 链接跳转，功能也可以实现，唯一需要注意的是 要加 #</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">position:</span> &quot;<span class="hljs-attr">fixed</span>&quot;, <span class="hljs-attr">bottom:</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p>原生的写法固然可以实现，但我们怎么在点击之后让他高亮呢？<br>原生 js 写法：window.onhashchange 监听路由的改变—&gt;location.href 拿到当前路由，再去匹配，符合之后该选项高亮<br>而 React 已经提供好了一个声明式导航跳转：<strong>NavLink</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用之后发现控制台报错：<br><img src="https://s1.xptou.com/2022/09/25/632ff776b4f31.png" alt="NavLink单独使用报错"><br>此时检查代码可以看到：<br>Tabbar.js<br><img src="https://s1.xptou.com/2022/09/25/632ff7f0ed9ca.png" alt="Tabbar组件"><br>App.js<br><img src="https://s1.xptou.com/2022/09/25/632ff85cd2ca3.png" alt="App组件"><br>App 组件中使用了 Tabbar 组件，但外部并没有 Route，所以报错。此时我们改进一下：<br><strong>方法一：利用插槽</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br>&lt;<span class="hljs-title class_">IndexRoute</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">IndexRoute</span>&gt;<br><br><br><span class="hljs-comment">// route.js  即 IndexRoute组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">  &#123;props.children&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>既然 Tabbar 需要一个 Router，而 IndexRouter 中有 HashRouter，那么我们大可以把 Tabbar 组件利用插槽放入 IndexRouter 组件内部。此时 Tabbar 外部就是 Router 了，完全满足需求。</p><h3 id="点击字体高亮"><a href="#点击字体高亮" class="headerlink" title="点击字体高亮"></a>点击字体高亮</h3><p>其实 React 已经贴心的把高亮的情况给监听到了，我们只需要写 css 样式即可。<br><img src="https://s1.xptou.com/2022/09/25/632ffbc050362.png" alt="点击NavLink链接"><br>既然如此，我们只需要设置 css 样式： <code>.active&#123; color:red &#125;</code> 即可。</p><span class='p red'>如果你不喜欢 active class类名，也可以自定义高亮类名。写法：<NavLink to=/home activeClassName=customActive>首页</NavLink>。必须使用 activeClassName， 是固定的</span><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>写法：<code>this.props.history.push( &quot;/detail/&quot; + id )</code></p><p>React 的编程式导航，其实就是在原生 js 的基础上进行了一次封装。<br>我们可以看一下 组件 身上的 props 究竟有什么：<br><img src="https://s1.xptou.com/2022/09/25/63300341083bf.png" alt="组件props的属性"><br>组件的 props 身上 自带 history、location、match 三个属性。我们的编程式路由跳转就是依赖于 history。</p><p>为什么之前的代码中 props 都为 {} 呢？</p><p>因为 现在的组件是写在 Route 里面的：<code>&lt;Route path=&#39;/home/watched&#39; component=&#123;Watched&#125; /&gt;</code>，看似只是传递了组件，实际上 Route 再一次将一些属性传递到了 组件身上。此时的组件的父组件其实是 Route。<strong>莫名其妙得到的 props 其实就是 Route 父组件将一些属性传递给了子组件。</strong><br><strong>列表页跳转详情页，编程式导航写法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setList</span>(res.<span class="hljs-property">data</span>);<br>  &#125;);<br>&#125;, [list]);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">jumpDetail</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 原生 js 编程式跳转</span><br>  <span class="hljs-comment">// window.location.href=`#/detail/$&#123;id&#125;`</span><br><br>  <span class="hljs-comment">// React 编程式跳转</span><br>  <span class="hljs-comment">/*this.*/</span> props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>&#125;;<br><br>&#123;<br>  list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        jumpDetail(item.id);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      &#123;item.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><p>我们也可以写成声明式导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">detail</span>/$&#123;<span class="hljs-attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hooks-中的另一种编程式写法：useHistory"><a href="#hooks-中的另一种编程式写法：useHistory" class="headerlink" title="hooks 中的另一种编程式写法：useHistory"></a>hooks 中的另一种编程式写法：useHistory</h3><p>useHistory 的引用相当于 props.history</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入 useHistory</span><br><span class="hljs-keyword">import</span> &#123; useHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-comment">// useHistory 引用</span><br><span class="hljs-keyword">const</span> history = <span class="hljs-title function_">useHistory</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">click</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 普通 React 编程式写法</span><br>  <span class="hljs-comment">// props.history.push(`/detail/$&#123;id&#125;`)</span><br><br>  <span class="hljs-comment">// useHistory</span><br>  history.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="动态路由以及获取路由参数"><a href="#动态路由以及获取路由参数" class="headerlink" title="动态路由以及获取路由参数"></a>动态路由以及获取路由参数</h2><h3 id="动态路由-params-传参"><a href="#动态路由-params-传参" class="headerlink" title="动态路由 params 传参"></a>动态路由 params 传参</h3><p><code>&lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125; /&gt;</code></p><p>通常我们获取传递过来的参数是使用 props 中的 match.params<br><img src="https://s1.xptou.com/2022/09/25/633015048b9e6.png" alt="match属性"><br>什么情况下 params 才能接收到值呢？<br>在定义该路由的时候，在 路径后面加上 /:id，即将其改写成<strong>动态路由</strong>。<br>此时的路径则为 /detail/1111 /detail/2222 等等<br>此时的 params:{id:5789} ，可以通过 <strong>props.match.params</strong> 拿到参数</p><h3 id="query-传参和-state-传参"><a href="#query-传参和-state-传参" class="headerlink" title="query 传参和 state 传参"></a>query 传参和 state 传参</h3><p>这两种写法是编程式写法，在这两种写法下:/id 这种格式就不用写了，直接通过 history.push({})的格式传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一：query 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5739</span> &#125; &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span>.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br><br><span class="hljs-comment">// 方法二：state 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5783</span> &#125; &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span>.<span class="hljs-property">state</span>.<span class="hljs-property">id</span>;<br></code></pre></td></tr></table></figure><h3 id="query-传参的缺点："><a href="#query-传参的缺点：" class="headerlink" title="query 传参的缺点："></a>query 传参的缺点：</h3><p>query 传递的参数，<strong>只有首次进入页面的时候可以获取到</strong>。<br><strong>当页面刷新的时候，location 中也不存在 query 这个属性了，数据已经完全丢失。</strong><br>而使用 state 传参就不会造成页面刷新，参数丢失的问题了。</p><h2 id="三种传参方式的不同："><a href="#三种传参方式的不同：" class="headerlink" title="三种传参方式的不同："></a>三种传参方式的不同：</h2><p><strong>动态路由 params 传参：</strong><br>写法：<code>&lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125; /&gt;</code><br>跳转的页面获取参数：<code>props.match.params</code><br>特点：参数直接作为路由路径在 url 上显现：/detail/1111，页面刷新参数依旧存在。</p><p><strong>query 传参：</strong><br>写法：<code>props.history.push(&#123; pathname: &quot;/detail&quot;, query: &#123; id: 5739 &#125; &#125;);</code><br>跳转的页面获取参数：<code>props.location.query</code><br>特点：参数不会在 url 显示，页面刷新参数就会失效。</p><p><strong>state 传参：</strong><br>写法：<code>props.history.push(&#123; pathname: &quot;/detail&quot;, state: &#123; id: 5739 &#125; &#125;);</code><br>跳转的页面获取参数：<code>props.location.state</code><br>特点：参数不会在 url 显示，页面刷新参数依旧存在。</p><h2 id="补充：location-search"><a href="#补充：location-search" class="headerlink" title="补充：location.search"></a>补充：location.search</h2><p>location.search 是用来获取 url ?后面的参数，且这些参数是以字符串的格式拼接而成的。</p><h4 id="search-获取多个参数"><a href="#search-获取多个参数" class="headerlink" title="search 获取多个参数"></a>search 获取多个参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面跳转</span><br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>?name=张三&amp;age=12`</span>);<br><br><span class="hljs-comment">// 跳转页面接收</span><br>props.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>;<br></code></pre></td></tr></table></figure><p>此时我们可以看到：<br><img src="https://s1.xptou.com/2022/09/25/633023cc19996.png" alt="获取search值"><br><strong>问题:</strong> 路由跳转时, 页面接收的参数打印了两次，发出了两次一模一样的网络请求, 但是当前页刷新时, 仅发出一次请求.</p><p><strong>问题条件说明:</strong> 在跳转路由上带参数, 且参数中包含中文</p><p><strong>问题分析:</strong> 浏览器对中文参数进行转码导致组件加载两次</p><p><strong>解决方案:</strong>在传递参数时, 对参数用 encodeURI 进行转码, 接收参数时用 decodeURI 解码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取props.location.search中的参数值</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getQuery</span> = (<span class="hljs-params">search</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">if</span> (search) &#123;<br>    <span class="hljs-keyword">let</span> params = search.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; params.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> param = params[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>      obj[param[<span class="hljs-number">0</span>]] = <span class="hljs-built_in">decodeURI</span>(param[<span class="hljs-number">1</span>]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;;<br><br><span class="hljs-comment">// 把参数对象转换为search字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getSearch</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    str = <span class="hljs-string">&quot;?&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (obj[i]) &#123;<br>        str = str + i + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURI</span>(obj[i]) + <span class="hljs-string">&quot;&amp;&quot;</span>;<br>      &#125;<br>    &#125;<br>    str = str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, str.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> str;<br>&#125;;<br></code></pre></td></tr></table></figure><p>getSearch 应用场景：可以把 ? 拼接的参数当做一个对象，通过 getSearch 转换成 ?name=a&amp;age=10 的这种格式。当然如果参数不多，直接写成这种格式也没有问题。不过 getSearch 最大的好处是：<strong>提前将参数的中文转义，在跳转的页面上，就只会有一次请求！</strong></p><h4 id="search-传递的参数中文转义"><a href="#search-传递的参数中文转义" class="headerlink" title="search 传递的参数中文转义"></a>search 传递的参数中文转义</h4><p>上一小节我们可以知道，传递的参数有中文会被转义，此时 getQuery 函数就派上用场了。进行转义，并把 search 字符串参数转化为对象格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面跳转</span><br><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;;<br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span> + <span class="hljs-title function_">getSearch</span>(data));<br><br><span class="hljs-comment">// 跳转页面接收</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props, <span class="hljs-title function_">getQuery</span>(props.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>));<br></code></pre></td></tr></table></figure><p>此时的页面打印：<br><img src="https://s1.xptou.com/2022/09/25/63302843f2fdf.png" alt="search参数转为对象"></p><p><strong>使用场景：</strong><br><div class="note info simple"><p>a. 当需要使用 ? 进行参数拼接的情况下，接收页面可以使用 getQuery 函数对参数进行处理，整合成一个对象，便于使用。<br>b. 当使用 ? 拼接的参数中有中文时，可以使用 getSearch 函数提前将中文转义，再使用 getQuery 方法整合成对象的同时，在把转义的中文恢复原样。</p></div></p><h1 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h1><p>这种常用于登录和未登录的状态，登录了可以显示个人信息以及浏览内容，未登录则跳转登录页面，不能浏览网站信息。</p><h2 id="认识路由拦截的基本写法"><a href="#认识路由拦截的基本写法" class="headerlink" title="认识路由拦截的基本写法"></a>认识路由拦截的基本写法</h2><p>我们普通情况下路由是这样写的：<code>&lt;Route path=&quot;/myCenter&quot; component=&#123;MyCenter&#125; /&gt;</code><br>另一种写法：<code>&lt;Route path=&quot;/myCenter&quot; render = ()=&gt; &lt;MyCenter /&gt; /&gt;</code>。这两种写法是等价关系，实现的效果是一样的。<strong>这种写法常用于路由拦截</strong></p><p>我们可以在 render 中编写部分逻辑来显示不同的组件。</p><p>实现极简版登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 是否登录？登录进入个人中心，否则，重定向到登录页面，显示 Login 组件</span><br>&lt;<span class="hljs-title class_">Route</span><br>  path=<span class="hljs-string">&quot;/myCenter&quot;</span><br>  render=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> isLogin ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> /&gt;</span></span>;<br>  &#125;&#125;<br>/&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Login&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h1><h2 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h2><p><BrowserRouter/> ：h5 路由(不带 #)</p><p><HashRouter>：hash 路由(带 #)</p><h2 id="路由重命名"><a href="#路由重命名" class="headerlink" title="路由重命名"></a>路由重命名</h2><p>{HashRouter as Router}<br>使用时，原本的<code>&lt;HashRouter&gt;&lt;/HashRouter&gt;</code> 或者<code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code> 就可以写成 <code>&lt;Router&gt;&lt;/Router&gt;</code></p><p><strong>注意：</strong><br>BrowserRouter 没有 # 路径，但在请求页面的时候，如果向后端页面请求失败，会直接 404，</p><h1 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h1><p>在之前的代码中，我们在个人中心 MyCenter 组件中添加两个点击标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// MyCenter</span><br>&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>MyCenter 个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      props.history.push(&quot;/shopping&quot;);</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    会员购</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>客服<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// route.js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/myCenter&#x27;</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span>&#123;return true? <span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span> /&gt;</span>&#125;&#125; /&gt;</span><br></code></pre></td></tr></table></figure><p>按照以上代码的写法，正常情况下，点击 会员购 可以跳转到 shopping 页面，就算没有创建 Shopping 组件，也应该显示 404 页面。<br>但实际情况是报错 。<br><img src="https://s1.xptou.com/2022/09/26/6331c41b5e9c2.png" alt="跳转的错误打印"><br>图中可以看到，props 的打印变成了 {}，为什么？MyCenter 组件明明在 Route 中，正常来说，Route 会把 history 等属性传递给 MyCenter，这是怎么回事呢？</p><span class='p red'>原因：MyCenter 的这种写法，是将组件实例化了，而 一般的写法 component={Home}，这种才是通过 component ，把 Home 组件传给 Route。将组件当做 Route 的子组件了，所以 MyCenter 接收不到 Route 的属性。</span><p>解决方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// react 既然支持 render 写法，那就肯定有提供 history、params、location 这些属性，</span><br><span class="hljs-comment">// 这些属性可以通过回调函数接收，并解构赋值主动传递给 MyCenter 组件，此时就可以在 MyCenter 组件中通过 props 访问到</span><br>&lt;<span class="hljs-title class_">Route</span><br>  path=<span class="hljs-string">&quot;/myCenter&quot;</span><br>  render=&#123;<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> /&gt;</span></span>;<br>  &#125;&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><p>这种类似于依赖父组件的 route 属性，通过 props 传值，那么如果子组件内部又嵌套了多层子组件呢？这样传 route 属性是非常麻烦的。</p><p><strong>使用 withRouter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MySonComponent</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onCLick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;props.history.push(&#x27;/detail/&#x27; + item.id)&#125;&#125;&gt;MySonComponent<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WithMySonComponent</span> = <span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">MySonComponent</span>)<br><span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">MySonComponent</span>);<br><span class="hljs-title function_">withRouter</span>(<span class="hljs-title function_">connect</span>(...)(<span class="hljs-title class_">MyComponent</span>))<br></code></pre></td></tr></table></figure><p>如果在组件路由跳转时，通过父子组件传递 route 属性比较麻烦，可以使用 withRouter 将组件进行包裹，组件就可以得到 route 属性。<strong>withRouter 的作用就是给组件给予 route 属性</strong>。</p><h1 id="项目注意"><a href="#项目注意" class="headerlink" title="项目注意"></a>项目注意</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>通常在开发情况下，为了保证安全，后端通常不会让开放接口让前端访问，而前端项目例如在 <a href="http://localhost:3000/">http://localhost:3000/</a> 下运行，只能请求 <a href="http://localhost:3000/">http://localhost:3000/</a> 下的资源及数据，请求其它端口会发生跨域问题。此时我们就需要反向代理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>这是一条很正常的网络请求，但此时控制台报错。<br><img src="https://s1.xptou.com/2022/09/27/6332a8034a0f1.png" alt="react跨域错误"><br>大致意思就是被 CORS 同源策略阻止了。页面在 3000 服务器上，数据在饿了么服务器上。这是浏览器不允许的，有跨域限制。</p><p><strong>在造成跨域情况下，就需要反向代理</strong></p><p>文档参考地址：<a href="https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development">https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development</a></p><p>安装代理插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install http-proxy-middleware --save<br><span class="hljs-meta prompt_">#</span><span class="language-bash">or</span><br>yarn add http-proxy-middleware<br></code></pre></td></tr></table></figure><p>安装完成后，在 src 目录下新建一个 setupProxy.js。<strong>名字一定是 setupProxy</strong></p><p><strong>写法一：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><br><span class="hljs-comment">/* 饿了么接口举例</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/bgs/poi/reverse_geo_coding</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/shopping/v2/foods_page/sift_factors</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/restapii&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me&quot;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 一般设置为 true，这样服务器接收到的就是 https://h5.ele.me 开头的请求，设为 false，服务器收到的请求头就是 http://localhost:3000/ 等本地 host 地址</span><br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 请求.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// 这种写法下，当我们的请求地址中出现 /restapii 时，会在 /restapii 前方拼接上 target 中的地址</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios(&#x27;/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;) 等价于</span><br><span class="hljs-comment">  axios(&#x27;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>此时我们通过反向代理就可以拿到数据了<br><img src="https://s1.xptou.com/2022/09/27/6332b1c0a87cc.png" alt="反向代理成功请求数据"></p><p><strong>写法二：使用 pathWrite 重定向</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me/restapi&quot;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&quot;^/api&quot;</span>: <span class="hljs-string">&quot;&quot;</span> &#125;, <span class="hljs-comment">// 替换为 target 时的替换内容</span><br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 请求.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// 这种写法下，当我们的请求地址中出现 /api 时，将 /api 本身被重写为 &quot;&quot;， 再拼接上 target 地址 https://h5.ele.me/restapi，而</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios(&#x27;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;) 等价于</span><br><span class="hljs-comment">  axios(&#x27;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果上方对 pathRewrite: { “^/api”: “” } 的使用有问题，请看下面这个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me&quot;</span>, <span class="hljs-comment">// 配置转发目标地址（能返回数据的服务器地址）</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 控制服务器接收到的请求头中host字段的值</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&quot;^/api&quot;</span>: <span class="hljs-string">&quot;/restapi&quot;</span> &#125;,<br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 页面.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios 请求的地址为：/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">  此时代理经历的过程为：</span><br><span class="hljs-comment">  1、遇到 /api 就重写成 /restapi ，此时为：/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">  2、在 /api 前边拼接上 target 地址，而此时 /api 已被重写，那么此时为：https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong>写 pathRewrite 的时候，可以自定义 开头 例如：/api /post /get /a 等等。使用 pathRewrite 时命名自由度更高。<br>但是如果不写 pathRewrite 时，请求的地址就必须要有一个统一的 开头，例如例子中的 /restapi。</p><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><p>因为 React 是单页面应用，所以在引入 css 样式的时候，如果有同名的 css 类名，后者会把前者覆盖掉，造成<strong>样式污染</strong></p><p>如果该 css 的样式只想在某个组件内部生效，需要将 css 命名为 <strong>xxx.module.css</strong>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./css/Films.module.css&quot;</span>;<br><span class="hljs-comment">// 输出的是一个对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;style&quot;</span>, style); <span class="hljs-comment">//style &#123;active: &#x27;use_active__TAu6v&#x27;&#125;</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/films/nowplaying&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&#123;style.active&#125;</span>&gt;</span></span><br><span class="language-xml">      正在热映</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/films/comingsoon&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&#123;style.active&#125;</span>&gt;</span></span><br><span class="language-xml">      即将上映</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这样每个 css 就是自己组件独有的样式。</p><p>如果想使用全局样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 全局作用 */</span><br>:<span class="hljs-title function_">golbal</span>(<span class="hljs-params">.box</span>) &#123;<br>    <span class="hljs-attr">background</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>尽量少使用标签选择器。<br>因为标签选择器不会添加后缀<br>如 ul{}, div{}<br>最好是 .box ul{} .cont div{} 这样的。</p>]]></content>
    
    
    <summary type="html">认识React路由，以及安装、基本使用、重定向等功能。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>10-React Router 6 快速上手</title>
    <link href="https://jsq180.github.io/posts/7eac1738.html"/>
    <id>https://jsq180.github.io/posts/7eac1738.html</id>
    <published>2022-09-27T21:28:06.000Z</published>
    <updated>2022-09-28T23:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p><ul><li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li><li><strong style="color:#dd4d40">react-router-dom:&lt;/strong &gt; <strong style="color:#dd4d40">包含 react-router 所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li><li>react-router-native: 包括 react-router 所有内容，并添加一些专门用于 ReactNative 的 API，例如:<code>&lt;NativeRouter&gt;</code>等。</li></ul></li><li><p>与 React Router 5.x 版本相比，改变了什么？</p><ul><li>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</li><li>语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。</li><li>新增多个 hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code> 等。</li><li><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong><br>….</li></ul></li></ol><h1 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h1><p><strong>1、使用 <code>HashRouter</code>或<code>BrowserRouter</code>将 App 根组件包裹起来。</strong><br>目的就是使用这两个路由模式将整个大组件包裹起来就 OK。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// **注：App.js 是所有组件的根组件；；index.js 是注册 根组件的地方**</span><br><br><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Tabbar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">//  ###or</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-comment">/* ReactDOM.render(</span><br><span class="hljs-comment">  &lt;HashRouter&gt;</span><br><span class="hljs-comment">    &lt;App /&gt;</span><br><span class="hljs-comment">  &lt;/HashRouter&gt;,</span><br><span class="hljs-comment">  document.getElementById(&quot;root&quot;) */</span><br></code></pre></td></tr></table></figure><p><strong>2、编写页面组件</strong><br><strong>3、创建 路由 tabbar 导航链接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Tabbar.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Tabbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">position:</span> &quot;<span class="hljs-attr">fixed</span>&quot;, <span class="hljs-attr">bottom:</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时点击路由就可以发生变化，但是由于未注册路由组件，所以没有内容。</p><p><strong>4、注册路由组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// V6 写法  Route 必须和 Routes 搭配使用，缺一不可</span><br><span class="hljs-comment">// /route/index.js</span><br>&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Community</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MyCenter</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br><br><span class="hljs-comment">// V5 写法 Route 外部可以不写 Switch，那样路由会向下匹配到最后一个模糊路由</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/myCenter&#x27;</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span>&#123;return true? <span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span> /&gt;</span>&#125;&#125; /&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Login&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/detail&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Detail&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><span class='p red'>V6版本的写法上，由全新的属性 Routes 代替 Switch 来包裹 Route。且在V5中，只写 Route 不写 Switch 是可以的，只不过路由会向下继续匹配，但V6中，Route 必须要和 Routes 一起使用，不然会直接报错</span><p><strong>了解：</strong>V6 中的 Route，新增了一个 caseSensitive 属性，是否区分大小写，不写该属性默认是 false，不区分大小写。<code>&lt;Route caseSensitive=&#123;true&#125; path=&quot;/MyCenter&quot; element=&#123;&lt;MyCenter /&gt;&#125; /&gt;</code>，如果设置为 true，以该例子来说：之前用 /mycenter 能访问到的，现在访问不到，必须使用 /MyCenter。</p><p><strong>5、引入路由组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Tabbar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IndexRoute</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./route&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">IndexRoute</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">IndexRoute</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的效果图如下：<br><img src="https://s1.xptou.com/2022/09/27/63330e3fb8c35.png" alt="v6路由基本效果图"></p><span class='p red'>Routes 的作用和 Switch 基本一致，只不过 Routes 必须搭配 Route 使用，和用 Switch 一样，当匹配到一个之后，就 break 不往下匹配了。</span><h1 id="路由重定向-Navigate"><a href="#路由重定向-Navigate" class="headerlink" title="路由重定向 Navigate"></a>路由重定向 Navigate</h1><p>在 之前的代码中，虽然我们定义好了路由，但是控制台有一个警告。<br><img src="https://s1.xptou.com/2022/09/27/63331293796ba.png" alt="/没有匹配规则"><br>意思就是：path 名为 / 的路由没有匹配到。<br>在 V5 版本中我们通过 Redirect 重定向，将 / 重定向到 /home 路由上。<br><strong>在 V6 中，React 废弃掉了 Redirect，使用了 Navigate 来进行重定向</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// V5 写法</span><br>&lt;<span class="hljs-title class_">Redirect</span> <span class="hljs-keyword">from</span>=<span class="hljs-string">&quot;/&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span> exact /&gt;;<br><br><span class="hljs-comment">// V6 写法</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Routes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span>&#125; /&gt;</span>;<br></code></pre></td></tr></table></figure><p>小案例：<br>当 sum 变为 2 的时候，跳转 mycenter 页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>Home 首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><br>  &#123;count === <span class="hljs-number">2</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>初始值：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>&#125;<br>  &lt;button<br>    onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>    &#125;&#125;<br>  &gt;<br>    点击+<span class="hljs-number">1</span><br>  &lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>综上可以看出，Navigate 就是用来跳转的，其中的 to 就是跳转的路由。<br><code>&lt;Route path=&quot;/&quot; element=&#123;&lt;Navigate to=&quot;/home&quot; /&gt;&#125; /&gt;</code> 的意思就是：当路由为 / 时，渲染 Navigate，而 Navigate 组件就是用来跳转到某个路由的。</p><p><strong>注意：</strong> Navigate 中有两个属性：to 和 replace。to 即为跳转的页面，replace 则是跳转的模式，replace = {true/false}。默认是 false，即 push。<br><code>&lt;Navigate to=&quot;/home&quot; replace=&#123;true&#125; /&gt;</code>，设置为 true 时，不会在浏览器留下痕迹。</p><h1 id="路由点击高亮显示"><a href="#路由点击高亮显示" class="headerlink" title="路由点击高亮显示"></a>路由点击高亮显示</h1><p>在 V5 版本中，NavLink 会自动给 点击的路由标签加上 .active 类名，如果想自定义类名，在 NavLink 内部加上 activeClassName=’customActivexxxx’ 类似。</p><p>在 V6 版本中，<strong>activeClassName 已经不能使用了。改为了 <code>className=&#123;(state)=&gt;&#123; retuen state.isActive: &#39;customActive&#39; : &#39;&#39; &#125;&#125;</code>的格式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// className 内部的回调函数可以默认接收一个参数</span><br>&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(a)</span> =&gt;</span> &#123;</span><br><span class="language-xml">      console.log(666, a);</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>我们可以看一下默认接收的参数是什么？<br><img src="https://s1.xptou.com/2022/09/28/633444ee1ddbf.png" alt="className回调函数的默认参数"><br>React 17 版本中，是只有一个 <strong>isActive</strong> 参数的，在 18 中，才新加了 <strong>isPending</strong> 参数。<br>而我们需要 return 数据，才能设置自定义类名<br><strong>具体使用方法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">      return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br><br><span class="hljs-comment">// 每个 路由标签 都需要加上这个，点击切换时才能实现颜色切换效果，我们可以对他稍微封装一下</span><br>setClassActiveName (isActive) =&gt;&#123;<br>  <span class="hljs-keyword">return</span> isActive ? <span class="hljs-string">&quot;customActive&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 此时的内部就可以这样写：</span><br>&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123; setClassActiveName(state.isActive) &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>函数内部的写法很简单，根据三目运算，判断当前的 isActive 是否为 true，(true 就是点击项)，点击是将 自定义类名返回，设置 css 样式就行了。<br><img src="https://s1.xptou.com/2022/09/28/633446cd1df40.png" alt="高亮效果图"><br><span class='p red'>NavLink 的作用和 Link 基本一致，但是 Link 不会动态添加高亮标签</span></p><h1 id="useRoutes-路由表"><a href="#useRoutes-路由表" class="headerlink" title="useRoutes 路由表"></a>useRoutes 路由表</h1><p>相当于把路由整和成一个数组，react 提供的这个 hooks 直接就可以把路由渲染出来<br>在之前，我们注册路由是这样子的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Community</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MyCenter</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><p>每个 Route 的相似度比较高，那么我们能不能抽离成一个数组呢？此时可以使用 useRoutes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 引入 useRoutes</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/Community&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/myCenter&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexRoute</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// useRoute 内部是一个 [&#123;&#125;,&#123;&#125;......]</span><br>  <span class="hljs-comment">// 每个对象有两个属性：&#123;path:&#x27;/home&#x27;,element:&lt;Home /&gt;&#125;</span><br>  <span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>([<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span></span> &#125;,<br>  ]);<br><br>  <span class="hljs-comment">// 定义好的 路由数组，直接使用就可以了</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;element&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useRoutes 就是把路由变成一个数组，交给 useRoutes 来渲染路由，不用再每一个路由都定义了</strong><br>这种写法和 vue 中的定义路由基本一样了，相互借鉴（bushi）。</p><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>V6 版本的 嵌套路由和 V5 区别还是不算小的。<br>V5 版本嵌套路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是 最外层的路由 和 路由标签</span><br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">flex</span>&#x27;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;, <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br><br><br><span class="hljs-comment">// 这是 Home 组件内部的嵌套路由 和路由标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">lightcoral</span>&#x27; &#125;&#125;&gt;</span>已看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span>在看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span>&quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span>想看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&#123;<span class="hljs-comment">/* 路由配置  嵌套路由 */</span>&#125;<br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br>    &#123;<span class="hljs-comment">/* 内部子路由重定向，也需要加 Switch，不然 从上到下都可以匹配到 /home ，最终一定会匹配到重定向 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* 写 Switch ，让他匹配到就停止，不再继续匹配 */</span>&#125;<br>    &lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&#x27;/home/watched&#x27;</span> component=&#123;<span class="hljs-title class_">Watched</span>&#125; /&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/watching&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watching&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/wantwatch&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;WantWatch&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home/watched&#x27;</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><p>V6 版本嵌套路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// routes.js  定义路由的数组集合</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/watching&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watching</span> /&gt;</span></span> &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/watched&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watched</span> /&gt;</span></span> &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/wantwatch&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WantWatch</span> /&gt;</span></span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watching&quot;</span> /&gt;</span></span> &#125;,<br>];<br><br><span class="hljs-comment">// 注册路由组件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;/routes.js&quot;</span>;<br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>(routes);<br><br><span class="hljs-comment">// 渲染路由根组件</span><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;element&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-comment">// 根组件的 路由标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      首页</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      动漫区</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      个人中心</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br><br><span class="hljs-comment">// --------------注册 Home 组件下的子组件---------------</span><br><span class="hljs-comment">// Home.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span>, <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>Home 首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">lightcoral</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;watched&#x27;</span>&gt;</span>已看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;watching&#x27;</span>&gt;</span>在看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;wantwatch&#x27;</span>&gt;</span>想看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 指定路由组件呈现的位置 */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>当 /home 对象下，有 <strong>children</strong> 属性时，说明 /home 路由下有子路由，即嵌套路由。<br><strong>在 Home 组件中注册使用嵌套路由</strong></p><ol><li><strong>引入一个名为 Outlet 的属性</strong><code>import &#123; Outlet &#125; from &#39;react-router-dom&#39;</code>。</li><li><strong>在合适的位置插入<code>&lt;Outlet/&gt;</code>即可</strong>，相当于一个插槽，把路由对应的组件放入这个位置</li><li>V6 版本的嵌套路由<strong>甚至可以不带该路由的 父级路径，但是不写父级路径时一定不能写 /，不然就是直接以 / 作为根路径开始进行匹配路由</strong></li></ol><p>Outlet 就是一个 function 函数。<br><img src="https://s1.xptou.com/2022/09/28/633456bb8de7b.png" alt="Outlet打印"><br><strong>了解：</strong>嵌套路由显示时，它对应的父级路由自然也会高亮，如果不想让父级高亮，可以在他的父级 NavLink 标签上加上 end 属性即可。</p><h1 id="路由-params-传参"><a href="#路由-params-传参" class="headerlink" title="路由 params 传参"></a>路由 params 传参</h1><p>如图所示：<br>我们想点击左侧链接的时候，右侧显示 detail 详情页面，即三级路由。<br><img src="https://s1.xptou.com/2022/09/28/633462445802e.png" alt="实现三级路由并携带参数"><br>代码实现方式和 实现 二级路由基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// route.js</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;watching&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watching</span> /&gt;</span></span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;watched&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watched</span> /&gt;</span></span>,<br>        <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;detail/:id&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> /&gt;</span></span> &#125;], <span class="hljs-comment">// params传参，同样接收一个动态参数</span><br>      &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;wantwatch&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WantWatch</span> /&gt;</span></span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NotFound</span> /&gt;</span></span> &#125;,<br>]);<br><br><span class="hljs-comment">// watched 组件页面：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">borderTop:</span> &quot;<span class="hljs-attr">2px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">000</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> &quot;<span class="hljs-attr">1</span>&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightyellow</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    &#123;watched.map((item) =&gt; (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;/*动态路由参数*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">detail</span>/$&#123;<span class="hljs-attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> &quot;<span class="hljs-attr">1</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>此时可以显示 detail 页面了，但是 props 为空，按照 V5 的写法，我们可以使用 withRouter 包裹，给组件 location、params 等属性。<br>但是现在使用的是 路由表，无法使用 withRouter 了，就需要使用一个新的东西来获取 params 参数 <strong>useParams</strong></p><h1 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h1><p>useParams 就是用来接收 params 参数用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br><span class="hljs-comment">// params 是一个对象 &#123;id: &#x27;e553b56278076626007905060928f8bc&#x27;&#125;</span><br><span class="hljs-comment">// 如果传多个参数 &#123;a:..,b:...c:....&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细讲解一下react-router-dom@6版本的路由模式、用法以及与 @5 的区别</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>useCallback和useMemo的使用指南</title>
    <link href="https://jsq180.github.io/posts/cf797f35.html"/>
    <id>https://jsq180.github.io/posts/cf797f35.html</id>
    <published>2022-09-17T23:15:56.000Z</published>
    <updated>2022-09-25T18:19:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上个章节：认识 Hooks 中，useCallback 和 useMemo 的相似度很高，例子使用较为模糊，故单设一个章节，来记录 useCallback 和 useMemo 的使用和区别。</p><p>文章参考链接:<a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/">https://www.joshwcomeau.com/react/usememo-and-usecallback/</a></p><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p>本篇文章也是详细区分 useCallback 和 useMemo，区分的过程不一定必须了解，所以将最后的总结部分提到了文章开篇。<br><div class="note info simple"><ul><li>useMemo 缓存的结果是回调函数中 return 回来的值，主要用于缓存计算结果的值，应用场景如需要计算的状态</li><li>useCallback 缓存的结果是函数，主要用于缓存函数，应用场景如需要缓存的函数，因为函数式组件每次任何一个 state 发生变化，会触发整个组件更新，一些函数是没有必要更新的，此时就应该缓存起来，提高性能，减少对资源的浪费。</li><li>另外还需要注意的是，<strong>useCallback 应该和 React.memo 配套使用，缺了一个都可能导致性能不升反而下降</strong>。</li></ul></div></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在介绍一下这两个 hooks 的作用之前，我们先来回顾一下 react 中的性能优化。在 hooks 诞生之前，如果组件包含内部 state，我们都是基于 class 的形式来创建组件。当时我们也知道，react 中，性能的优化点在于：<br>1、调用 setState，就会触发组件的重新渲染，无论前后的 state 是否不同<br>2、父组件更新，子组件也会自动的更新</p><p>基于上面的两点，我们通常的解决方案是：<br>1、使用 immutable 进行比较，在不相等的时候调用 setState；（immutable.js 不作为讲解点）<br>2、在 shouldComponentUpdate 中判断前后的 props 和 state，如果没有变化，则返回 false 来阻止更新。</p><p>在 hooks 出来之后，我们能够使用 function 的形式来创建包含内部 state 的组件。<br>但是，使用 function 的形式，失去了上面的 shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。<br>而且，在函数组件中，react 不再区分 mount 和 update 两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此 <strong>useMemo</strong> 和 <strong>useCallback</strong> 就是解决性能问题的杀手锏。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>根据 React 官网示例代码：<br>useMemo：<code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code> 返回一个 memoized 值。<br>useCallback：<code>const memoizedCallback = useCallback(() =&gt; &#123; doSomething(a, b); &#125;, [a, b],);</code> 返回一个 memoized 回调函数。</p><p>useCallback 和 useMemo 的参数跟 useEffect 一致，他们之间最大的区别有是 useEffect 会用于处理副作用，而前两个 hooks 不能。<br>useMemo 和 useCallback 都会在组件第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行；<br>并且这两个 hooks 都返回缓存的值，useMemo 返回<strong>缓存的变量</strong>，useCallback 返回<strong>缓存的函数</strong>。</p><h1 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h1><p>在使用之前，先看一个案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setNumber(e.target.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例比较简单，实现一个计时器，每秒钟都更改 time，实现一个受控的输入框，ok 了！<br>此时的界面结果如图所示：<br><img src="https://s1.xptou.com/2022/09/24/632f053cb9ba4.png" alt="moreWork函数执行结果"><br><span class='p cyan'>由图可以看出：虽然 number 没有变化，但是 moreWork 函数却在每一秒都在打印，同时返回一个恒定不变的值，这就引申出性能问题了。</span><br><span class='p red'>明明 number 没有变化，为什么每次更新 time 还要再把 number 也重新执行一遍？如果类似的函数很多逻辑很复杂，每次 time 更改都会执行这些计算逻辑，会变得很卡，此时性能优化就需要登场了。</span></p><h2 id="useMemo-和-memo-使用"><a href="#useMemo-和-memo-使用" class="headerlink" title="useMemo 和 memo 使用"></a>useMemo 和 memo 使用</h2><p>useMemo 需要接收两个参数：</p><ul><li>a. 第一个参数是函数，函数内部是通常情况下都是进行大量的逻辑计算，并 return 这个计算结果。</li><li>b. 第二个参数就是依赖项。</li><li>c. <code>const result = useMemo(()=&gt;&#123; ...大量的逻辑计算 &#125;,[])</code></li></ul><p>了解 useMemo 的基本使用之后，就可以对 原来的代码进行性能优化了。<br><strong>解决方法一：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-keyword">const</span> moreWork = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;, [number]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setNumber(e.target.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时性能优化后的打印：<br><img src="https://s1.xptou.com/2022/09/24/632f0875ddadd.png" alt="使用useMemo后的结果"><br>这种情况下，只有当我们改变输入框的值，即 number 的时候，才会再执行一次 moreWork 函数。</p><p><strong>useMemo 本质上就像一个 缓存，依赖项是缓存失效策略。</strong><br>在这种情况下，我们本质上是在说：“仅在 number 发生变化时重新计算并执行函数”。当组件由于其他原因（例如 time 状态变量更改）重新渲染时，useMemo 忽略该函数并传递缓存的值。</p><p><strong>解决方法二：</strong><br>把 time 抽离出来，将其分为 time 组件和 input 组件，这样就不会影响到 input 组件。<strong>这种策略叫做状态下沉</strong></p><p>如果抽离出来的组件，不得不进行状态提升，此时我们遇到最初的情况，time 的数据每次更改都会使子组件重新渲染，内部函数也重新执行。这时使用第三种方法。<br><strong>解决方法三：</strong><br>使用 memo 将一个组件转变成 缓存函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>); <span class="hljs-comment">// 也可以在 Foo 组件导出的时候直接 export default React.memo(Foo)，这样就不用在别的组件中使用时 memo 了。</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-comment">// const moreWork = useMemo(() =&gt; &#123;</span><br>  <span class="hljs-comment">//     console.log(&#x27;正在执行大量工作&#x27;);</span><br>  <span class="hljs-comment">//     return number</span><br>  <span class="hljs-comment">// &#125;, [number])</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>React.memo 会告诉父组件，Foo 是纯组件函数，当输入和输出相同时，就不要再改变 Foo，使用之前缓存的就好。</p><p><strong>方法一和方法三的区别：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一</span><br><span class="hljs-keyword">const</span> moreWork = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>  <span class="hljs-keyword">return</span> number;<br>&#125;, [number]);<br><br><span class="hljs-comment">// 方法三</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br></code></pre></td></tr></table></figure><p>区别：方法一缓存的是<strong>一个计算函数</strong>，方法三<strong>缓存整个组件</strong><br>memo 是对整个组件的优化，useMemo 是对某个函数甚至某一行代码的优化，两者并无好坏之分，取决于使用场景</p><h2 id="useMemo-保留的引用"><a href="#useMemo-保留的引用" class="headerlink" title="useMemo 保留的引用"></a>useMemo 保留的引用</h2><p>子组件使用引用类型的数据造成 useMemo 失效</p><p>先来看改进的 js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  <span class="hljs-keyword">const</span> [newData, setNewData] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> arr = [newData];<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arr&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码，在<strong>解决方案三</strong>的基础上添加了 newData 参数—&gt;创建 arr 数组，数组内部为 newData—&gt;将 arr 传给 Foo 组件。<br>此时，原本已经优化解决过的代码，又一次出现了最初的问题：<br><img src="https://s1.xptou.com/2022/09/24/632f1455838ab.png" alt="引用下的问题"><br>优化不管用了？为什么？<br><p class='p red'>arr 是引用数据类型，time 每更新一次，触发一次组件的重新加载，此时，虽然 arr 和原来的值没有变化，但其实引用地址已经改变</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNumbers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">const</span> firstResult = <span class="hljs-title function_">getNumbers</span>();<br><span class="hljs-keyword">const</span> secondResult = <span class="hljs-title function_">getNumbers</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstResult === secondResult); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>这种情况下该怎么解决呢？<br>很简单，既然每次更新都会重新创建一个新的 arr，那不让你重新创建不就好了？用 useMemo 把 arr 也缓存下来就 OK 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> [newData];<br>&#125;, [newData]);<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arr&#125;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这样优化就又可以使用了。</p><h1 id="useMemo-总结"><a href="#useMemo-总结" class="headerlink" title="useMemo 总结"></a>useMemo 总结</h1><p>解决了两个问题：</p><ul><li>减少了大量的运算，当依赖的数据不发生变化的时候，就使用缓存的数据，而不去重新进行无意义的大量运算。</li><li>解决引用类型的地址发生变化的问题。</li></ul><h1 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h1><p>简单来说，useCallback 和 useMemo 是完全一样的。<br>区别在于：useMemo 是保持一个 值/数组/对象.. 的不变，而 useCallback 是保持一个 function 函数 的不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  <span class="hljs-keyword">const</span> [newData, setNewData] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> arrResult = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> [newData];<br>  &#125;, [newData]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">badFunc</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我每次加载的地址都不一样&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arrResult&#125;</span> <span class="hljs-attr">badFunc</span>=<span class="hljs-string">&#123;badFunc&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">&#123; arr, badFunc &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，之前的优化叒一次作废了。Foo 组件还是会每秒渲染一次，原因是 badFunc 在每次重新加载的时候生成的 function 函数地址发生了变化，导致 Foo 组件每次都重新渲染。性质和 useMemo 引用基本一样。<br>之前的缓存用的是 useMemo，而 useMemo 缓存的是值，函数怎么缓存呢？此时就需要用到 <strong>useCallback</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 和 useMemo 不一样，useCallback 不需要 return</span><br><span class="hljs-keyword">const</span> badFunc = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我每次加载的地址都不一样&quot;</span>);<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>用 useCallback 将函数包住，例子中没有依赖项，传 []</p><h1 id="什么时候使用这两个-hooks"><a href="#什么时候使用这两个-hooks" class="headerlink" title="什么时候使用这两个 hooks"></a>什么时候使用这两个 hooks</h1><p>我们已经看到了 useMemo useCallback 允许我们跨多个渲染线程化引用，重用复杂的计算或避免破坏纯组件。<strong>问题是：我们应该多久使用一次？</strong></p><p>在我个人看来，将每个对象/数组/函数包装在这些钩子中是浪费时间。<br>在大多数情况下，这些好处可以忽略不计；React 是高度优化的，并且重新渲染通常并不像我们通常认为的那样缓慢或昂贵！</p><p>使用这些钩子的最佳方式是响应问题。<br><strong>如果你发现你的应用程序变得有点迟钝，你可以使用 React Profiler 来寻找缓慢的渲染。在某些情况下，您可以通过重构应用程序来提高性能。在其他情况下，useMemo 和 useCallback 帮助加快速度。</strong></p><h1 id="context-上下文中的-缓存"><a href="#context-上下文中的-缓存" class="headerlink" title="context 上下文中的 缓存"></a>context 上下文中的 缓存</h1><p>当我们通过上下文在应用程序中共享数据时，通常会传递一个大对象作为 value 属性。<br>缓存这个对象通常是个好主意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">AuthContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">AuthProvider</span>(<span class="hljs-params">&#123; user, status, forgotPwLink, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      user,<br>      status,<br>      forgotPwLink,<br>    &#125;;<br>  &#125;, [user, status, forgotPwLink]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AuthContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;memoizedValue&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">AuthContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法，即使父组件发生更改，只要子组件的 useMemo 中依赖不变，子组件就不会重新渲染</p><h1 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h1><ol><li>useMemo 存 memoized 数据， useCallback 存 memoized function definition.</li><li>这两个 hooks 都需要在末尾添加 dependencies, react 用以判断存的数据/function def 是否需要重新计算/定义</li><li>useMemo 甚至可以替代 useCallback, useMemo(() =&gt; fn, [dep]) 等价于 useCallback(fn, [dep])</li><li>PureFoo = react.memo(Foo) 包裹后导出得 PureFoo 是纯组件, 如果纯组件没有 props 输入，则父组件更新不会引起该纯 ​ 子组件 PureFoo 更新，如果纯组件有 props 输入, 且 props 中不仅限于 基本数据类型值。则 props 更新依然会更新 PureFoo( totally make sense, 因为纯函数的输入变化必然引起输出变化), 如果对 输入的 props 在父组件包裹一层 useMemo, 则 props 的 deps 没有变化的情况下，该父组件其它 state 变化 不会引起 PureFoo 的重新渲染</li><li>useMemo 和 useCallback 一定要关注 Eslint 的报错，如果 deps 没有补全 大概率会产生 bug。​</li></ol>]]></content>
    
    
    <summary type="html">针对 useCallback 和 useMemo 的使用进行进一步详解和区分。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-认识React Hooks</title>
    <link href="https://jsq180.github.io/posts/e3a9606a.html"/>
    <id>https://jsq180.github.io/posts/e3a9606a.html</id>
    <published>2022-09-16T21:53:45.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么使用 Hooks？<br>1、高阶组件为了复用性，导致代码层级复杂。<br>2、生命周期的复杂。<br>3、写成 function 组件，无状态组件，因为又需要状态，又改成 class 成本较高。</p><h1 id="useState-保存组件状态"><a href="#useState-保存组件状态" class="headerlink" title="useState(保存组件状态)"></a>useState(保存组件状态)</h1><p>useState 相当于 在 state 中定义变量 和 this.setState({修改当前变量}) 的集合<br><strong><code>const [state, setstate] = useState(initialState)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用方法</span><br>  <span class="hljs-comment">// name 相当于 state 中的变量，setName 相当于 this.setState(&#123;name:...&#125;)</span><br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值1&quot;</span>);<br><br>  <span class="hljs-comment">//可以查看 obj 究竟是什么</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值2&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-comment">//  [&#x27;初始值2&#x27;, ƒ]</span><br><br>  <span class="hljs-keyword">const</span> [age, setAge] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">18</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 通过 setName 改变 name 的值；通过 setAge 改变 age 的值 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;改变值1&quot;);</span><br><span class="language-xml">          setAge(16);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        点击</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> &#123;name&#125;-&#123;age&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useState 是什么？</strong><br><img src="https://s1.imagehub.cc/images/2022/09/16/Snipaste_2022-09-16_22-22-38.png" alt="useState打印结果"><br><div class="note info simple"><p>由上图可知：<br>useState 的打印结果是一个数组，第 0 项是设置的初始值，第一项是 function 函数。<br>所以 <code>[name,setname] = useName(&#39;初始值&#39;)</code>，相当于数组的解构赋值：<code>const name = &quot;初始值&quot;，const setName = function 函数</code></p></div></p><h1 id="useEffect-处理副作用"><a href="#useEffect-处理副作用" class="headerlink" title="useEffect(处理副作用)"></a>useEffect(处理副作用)</h1><p>useEffect(回调函数，依赖的状态)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//effect</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//cleanup</span><br>    &#125;;<br>&#125;, [依赖的状态;空数组,表示不依赖])<br></code></pre></td></tr></table></figure><p>不要对 Dependencies 撒谎, 如果你明明使用了某个变量，却没有申明在依赖中，你等于向 React 撒了谎。<br>后果就是，当依赖的变量改变时，useEffect 也不会再次执行, eslint 会报警告</p><p><strong>useEffect 没有依赖的情况下，可以传空数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-comment">// 不能直接在 function 中进行 axios 请求，会一直请求，造成死循环</span><br><br>  <span class="hljs-comment">// 使用 useEffect，执行一次</span><br>  <span class="hljs-comment">// useEffect 传递两个参数，第一个参数必须是 回调函数，</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/text.json&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-title function_">setList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []); <span class="hljs-comment">// 如果传空数组，该回调函数就仅仅会执行一次</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map((item) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useEffect 内部有依赖的变量，但没有在第二个参数中传入该依赖的变量：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;APPLE&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 大写转小写</span><br>    <span class="hljs-keyword">let</span> a = name.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-title function_">setName</span>(a);<br>  &#125;, [name]); <span class="hljs-comment">// 第一次执行一次，之后依赖的参数更新，useEffect也会再次执行</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      name-&#123;name&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;BANANER&quot;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/17/63257b7e6faf6.png" alt="useEffect使用变量操作但不依赖"><br>vscode 语法也会进行提示：<br><img src="https://s1.xptou.com/2022/09/17/63257c5aa2caa.png" alt="vscode警告提示"><br>以上警告翻译过来就是：React Hook useEffect 缺少一个依赖项:’name’。包括它或删除依赖数组</p><p><strong>适用场景举例如下：</strong><br>页面的数据，由按钮组件点击下一页，从 id=1 切换到 id=2，id 改变，执行参数 id 相关依赖的 useEffect 获取最新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> id = props.<span class="hljs-property">myid</span>;<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/articles/<span class="hljs-subst">$&#123;id&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">settitle</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>    <span class="hljs-title function_">setcontent</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">content</span>);<br>    <span class="hljs-title function_">setcategory</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">category</span>);<br>  &#125;);<br>&#125;, [id]);<br></code></pre></td></tr></table></figure><p><strong>Hooks 没有生命周期，那么当组件销毁时，内部的计时器，监听器等如何移除？</strong><br>怎么在 useEffect 中销毁 监听和计时器<br>写法：在 useEffect 内部进行 return function(){}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              isCreated: !this.state.isCreated,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          销毁Child组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Child 子组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 注册 resize 监听</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-comment">// 注册 计时器</span><br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件销毁&quot;</span>);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-comment">// 这个 useEffect 如果内部写成 rentun 的格式，则在加载阶段，log不会打印，销毁阶段打印</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// return ()=&gt;&#123;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个useEffect&quot;</span>);<br>    <span class="hljs-comment">// &#125;</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>useEffect 中销毁组件解除监听：<br><img src="https://s1.xptou.com/2022/09/17/632586b2404ca.png" alt="useEffect中销毁组件解除监听"><br>为什么写成 return function 的格式<br><img src="https://s1.xptou.com/2022/09/17/632589392b470.png" alt="useEffect内部写成回调函数原理"></p><div class="note info modern"><p>综上所述：<br>useEffect 可以模拟 Class 组件的 加载、更新和销毁阶段</p></div><div class="note warning modern"><p>警告：<br>在 useEffect 作为销毁阶段时，依赖项<strong>必须为空数组</strong></p></div><h1 id="useLayoutEffect-同步执行处理副作用-与-useEffect-的区别"><a href="#useLayoutEffect-同步执行处理副作用-与-useEffect-的区别" class="headerlink" title="useLayoutEffect(同步执行处理副作用)与 useEffect 的区别"></a>useLayoutEffect(同步执行处理副作用)与 useEffect 的区别</h1><p><strong>官方建议使用 useEffect</strong><br>两者的执行时机不同：</p><ul><li>useEffect 是会在整个页面渲染完才会调用的代码。</li><li>useLayoutEffect 和原来 componentDidMount &amp; componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。<br>官方建议优先使用 useEffect<br><img src="https://s1.xptou.com/2022/09/17/632596f70dfa9.png" alt="执行时机不同"><div class="note info modern"><p>在实际使用时如果想避免页面抖动（在 useEffect 里修改 DOM 很有可能出现）的话，可以把需要操作 DOM 的代码放在 useLayoutEffect 里。<br>在这里做点 dom 操作，这些 dom 修改会和 react 做出的更改一起被一次性渲染到屏幕上，只有一次回流、重绘的代价。<br>即若要在渲染阶段操作 DOM，建议使用 useLayoutEffect</p></div></li></ul><h1 id="useCallback-记忆函数"><a href="#useCallback-记忆函数" class="headerlink" title="useCallback(记忆函数)"></a>useCallback(记忆函数)</h1><p>在讲什么是 记忆函数之前，先实现一个功能：计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">//   useState 本身就属于记忆函数，记住状态</span><br>  <span class="hljs-keyword">var</span> mycount = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(count + 1); //状态改变，整个函数重新执行</span><br><span class="language-xml">          mycount++;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;--&#123;mycount&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，点击 add，count+1，count 会一直点一直加，但 mycount 一直都是 0，因为 每点击一次，useState 就会把 count 的数值进行记忆保存，下次执行就会+1 之后的数据。所以才称 useState 也是属于记忆函数。<br>而 mycount 没有任何保存的方式，每点击一次，App 函数会从上至下执行一遍。此时，虽然点击之后让 mycount+1，但是由于 App 函数重新执行，同时 mycount 变量无法被保存状态，导致 mycount 又一次被重置为 0，所以 mycount 一直为 0。<br><p class='p red'>如果 App 内部有很多 点击事件，在 点击某个按钮，更改状态之后，App 组件重新从上至下执行，这些 点击事件会再次被注册，在性能方面不好。但是我们又无法阻止，因为 App 组件的状态更改，就是要重新渲染，而由此出现的解决方案，就是 useCallback 函数</p></p><div class="note danger simple"><p>而 useCallback 就是防止因为组件重新渲染，导致方法被重新创建 ，起到缓存作用; 只有第二个参数（依赖项） 变化了，才重新声明一次</p></div><p><strong>那么怎么将 mycount 记忆状态呢？</strong><br>基本写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;, [name]);<br><span class="hljs-comment">//只有name改变后， 这个函数才会重新声明一次，</span><br><span class="hljs-comment">//如果传入空数组， 那么就是第一次创建后就被缓存， 如果name后期改变了,拿到的还是老的name。</span><br><span class="hljs-comment">//如果不传第二个参数，每次都会重新声明一次，拿到的就是最新的name.</span><br></code></pre></td></tr></table></figure><p>useCallback 使用注意事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 原本的正常写法</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-comment">// 进行 useCallback 包裹，后续重新渲染不会被重新注册</span><br>  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 1、如果不写依赖，定义为空数组，那么无论点击多少次，count永远为 10，因为缓存的初始状态就是 0, 0 + 10 一直都是 10</span><br>      <span class="hljs-comment">// 2、如果写了依赖，那么缓存的就是上一次的 count 值</span><br>      <span class="hljs-comment">// 3、如果不想麻烦，就不要写 第二个参数，空数组都不要写，这样 useCallback 自动缓存的就是上一次的最新状态</span><br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>    &#125;,<br>    [count] <span class="hljs-comment">// 如果内部使用了状态，要么写依赖项，要么直接不写第二个参数</span><br>    <span class="hljs-comment">/* 如果函数内部使用了 状态 或者其它的数据而没有进行依赖，传了一个空数组</span><br><span class="hljs-comment">      那么 useCallback 缓存的永远是 初始状态，因为没人告诉它需要缓存的 状态 是什么</span><br><span class="hljs-comment">      跟 useEffect 的第二个参数的作用 基本一样</span><br><span class="hljs-comment">      */</span><br><br>    <span class="hljs-comment">// 这样不写的第二个参数，拿到的依然是最新状态，跟写了 依赖项 的作用是一毛一样的</span><br>    <span class="hljs-comment">/* () =&gt; &#123;</span><br><span class="hljs-comment">      setCount(count + 10);</span><br><span class="hljs-comment">    &#125;, */</span><br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleChange&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useMemo-记忆组件"><a href="#useMemo-记忆组件" class="headerlink" title="useMemo 记忆组件"></a>useMemo 记忆组件</h1><p>useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的（类似于 Vue 中的 computed）<br><code>useCallback(fn,inputs) is equivalent to useMemo(()=&gt;fn,inputs)</code></p><p>写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// useCallback 写法</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>&#125;, [count]);<br><br><span class="hljs-comment">// useMemo</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useMemo</span>(<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>  &#125;,<br>  [count]<br>);<br><br><span class="hljs-comment">// 以上两个 虽然写法不同，但属于 等于 关系</span><br></code></pre></td></tr></table></figure><div class="note success simple"><p>唯一的区别是：<br>useCallback 不会执行第一个参数函数，而是将它返回给你，<br>而 useMemo 会执行第一个函数并且将函数执行结果返回给你。<br>所以在前面的例子中，可以返回 handleChange 来达到存储函数的目的。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// const [searchVal, setsearchVal] = useState(&#x27;&#x27;)</span><br>  <span class="hljs-keyword">const</span> [videoList, setvideoList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [searchVal, setsearchVal] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [searchList, setsearchList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res.data.watching);</span><br>      <span class="hljs-title function_">setvideoList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>      <span class="hljs-title function_">setsearchList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">searchIpt</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setsearchVal</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-comment">// searchTitle(e.target.value)</span><br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 正常思路：</span><br><span class="hljs-comment">   * 1、定义一个搜索结果变量 searchList，搜索时，拷贝一份完整的 videoList</span><br><span class="hljs-comment">   * 2、根据搜索内容 searchVal ，检索出符合条件的数据:[.....]</span><br><span class="hljs-comment">   * 3、将数据赋值给 搜索结果数组 searchList，并且，在页面渲染时，就需要将 searchList 赋值：res.data.watching，map循环的也是 searchList</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 普通思路写法：</span><br>  <span class="hljs-comment">/*   const searchTitle = (searchVal) =&gt; &#123;</span><br><span class="hljs-comment">    // 搜索结果</span><br><span class="hljs-comment">    let searchList = videoList.filter((item) =&gt; &#123;</span><br><span class="hljs-comment">      return item.title.includes(searchVal.toUpperCase()) || item.title.includes(searchVal.toLowerCase())</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">    // 赋值</span><br><span class="hljs-comment">    setsearchList(searchList)</span><br><span class="hljs-comment">    console.log(searchList);</span><br><span class="hljs-comment">  &#125; */</span><br><br>  <span class="hljs-comment">// 返回的就是一个数组，当搜索内容（依赖）变化的时候，直接执行该 函数</span><br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;searchIpt&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入搜索关键词&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>动漫列表<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;searchTitle /* searchList */</span><br><span class="language-xml">        .map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useCallback-和-useMemo-的使用区别"><a href="#useCallback-和-useMemo-的使用区别" class="headerlink" title="useCallback 和 useMemo 的使用区别"></a>useCallback 和 useMemo 的使用区别</h1><p>单独开一篇文章：<a href="/posts/cf797f35.html" title="useCallback和useMemo的使用指南">useCallback和useMemo的使用指南</a></p><h1 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h1><p>useRef 和 React.createRef() 几乎是没什么区别的，连创建的对象都是一样的。唯一的区别就是 定义时的写法不同.<br>useRef：<code>const myRef = useRef(initialValue); 默认为null</code>；createRef：<code>const myRef = React.createRef();</code><br>同时 useRef 也和 useState 一样，具有保存变量的功能，即记忆函数。<br>例如：<code>let count = useRef(0)</code><br>案例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useRef, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [count, setcount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> myRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>  <span class="hljs-comment">// 和 useState 相似效果，不过访问方式稍微不同</span><br>  <span class="hljs-keyword">let</span> mycount = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此时可以打印出一个 ref 对象，可以通过 myRef.current 拿到 DOM元素输入框</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myRef); <span class="hljs-comment">// &#123;current: input&#125;</span><br>    <span class="hljs-comment">// 通过 mycount.current 可以访问到设置的值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mycount); <span class="hljs-comment">// &#123;current: 0&#125;</span><br>  &#125;, []);<br><br>  <span class="hljs-comment">// 添加按钮</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> addVal = myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">let</span> newList = [...list];<br>    newList.<span class="hljs-title function_">push</span>(addVal);<br>    <span class="hljs-comment">// 输入框的值给list列表进行渲染</span><br>    <span class="hljs-title function_">setList</span>(newList);<br>    <span class="hljs-comment">// 重置输入框的值</span><br>    myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;<br>  &#125;;<br><br>  <span class="hljs-comment">// 删除按钮</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDel</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>    <span class="hljs-comment">// console.log(index);</span><br>    <span class="hljs-keyword">let</span> newList = [...list];<br>    <span class="hljs-comment">// 删除点击项</span><br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">setList</span>(newList);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;myRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span>添加数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setcount(count + 1);</span><br><span class="language-xml">          // 这里不能单独使用 mycount.current++ ，因为只有搭配 useState 等数据更改时，ref才能执行，内有状态更改，React监听不到，不会更新</span><br><span class="language-xml">          // 搭配 secount 使用的主要目的是：为了证明 useRef 也可以保存变量值，不会和普通的定义变量一样，重新渲染就被重置，useRef 也相当于一个记忆函数，可以保存数据</span><br><span class="language-xml">          mycount.current++;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        +1</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;count&#125;---&#123;mycount.current&#125;</span><br><span class="language-xml">      &#123;list.map((item, index) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;item&#125;---</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              handleDel(index);</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            删除数据</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h1><p>在 说明使用 useContext 之前，请先熟悉 context 状态树传参 的写法，这会使你在了解使用这个 hooks 时更加通俗易懂：<a href="/posts/1515f762.html" title="React进阶篇-组件通信">React进阶篇-组件通信</a><br><code>const context = useContext(GlobalContext)</code>打印，其中 GlobalContext 为 React.createContext()<br><img src="https://s1.xptou.com/2022/09/19/6328705163adb.png" alt="useContext(GlobalContext)的值"><br>由上图可知：context 的打印结果，就是 供应商 Provider 中的 value 值，这使得我们可以直接使用这些数据，而不必再使用 Consumer 那种复杂的写法。<br>案例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 第一步，定义一个 全局对象：GlobalContext</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [des, setDes] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 第二步，GlobalContext.Provider ，将父组件改写成 供应商</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">call:</span> &quot;<span class="hljs-attr">打电话</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">sms:</span> &quot;<span class="hljs-attr">发短信</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">des:</span> <span class="hljs-attr">des</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">changeDes:</span> (<span class="hljs-attr">des</span>) =&gt;</span> &#123;</span><br><span class="language-xml">          // 第五步：接收 Child1 传递过来的内容详情，转化为自身的数据，并将该数据广播</span><br><span class="language-xml">          console.log(des);</span><br><span class="language-xml">          setDes(des);</span><br><span class="language-xml">        &#125;,</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 第三步，在子组件中使用 useContext 定义</span><br>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">const</span> [list, setlist] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-comment">// 初始化请求列表数据</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res);</span><br>      <span class="hljs-title function_">setlist</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">50</span>%&quot; &#125;&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                // 第四步，向父组件传当前点击项的值</span><br><span class="language-xml">                context.changeDes(item.des);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              查看详情</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      动漫详情：&#123;context.des&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info simple"><p>让子组件使用 useContext 而不使用 <code>&lt;GlobalContext.Consumer&gt;&lt;/GlobalContext.Consumer&gt;</code> 的原因是：</p><ul><li>GlobalContext.Consumer 的写法复杂，不美观，写法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Consumer</span>&gt;<br>  &#123;<span class="hljs-function">(<span class="hljs-params">context</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;&#125;<br>&lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Consumer</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>而使用 useContext，写法非常简便，写法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>两者的写法复杂度相差很大，但效果都一样，所以在 hooks 中更偏向使用 useContext</p></div><h1 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h1><p>在了解 useReducer 之前，可以先看两张图：<br><img src="https://s1.xptou.com/2022/09/19/63287a861ba23.png" alt="普通的数据传输"><br>普通的数据传输方式，不管是 中间人模式，context 状态树，还是父子通信的方式，都不可避免的需要父组件担负起数据传输的责任，而父组件中既需要处理自身内部的 state 和 方法，也要负责 子组件传递的数据等，会造成父组件的代码过于臃肿，不易于维护。<br><img src="https://s1.xptou.com/2022/09/19/63287c9452594.png" alt="状态管理"><br>使用状态管理，将原本在父组件中处理的数据抽离出来，单独作为一个状态管理模块，是结构更加清晰，父组件也可以专心于自身内部的数据。<br>以上就是使用 useReducer 的目的，也是该 hooks 的作用。</p><p>useReducer 写法：<code>const [state, dispatch] = useReducer(reducer, initialArg, init);</code></p><ul><li>第一个参数：reducer 函数。</li><li>第二个参数：初始化的 state。返回值为最新的 state 和 dispatch 函数（用来触发 reducer 函数，计算对应的 state）。</li></ul><h5 id="基础写法认识："><a href="#基础写法认识：" class="headerlink" title="基础写法认识："></a>基础写法认识：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">// list:[] ......</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;, [data]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>老规矩，先来看看 useReducer 的打印结果：<br><img src="https://s1.xptou.com/2022/09/20/6329be7f74bfd.png" alt="useReducer的打印结果"><br>由此可见，useReducer 也是一个数组，第一个值就是 useReducer 的第二个参数 initialState，用来定义变量的地方。第二个是 function 函数。</p><h5 id="dispatch-使用："><a href="#dispatch-使用：" class="headerlink" title="dispatch 使用："></a>dispatch 使用：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 减 按钮</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 使用 dispatch，内部</span><br>  <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用 dispatch，<strong>内部的 type 是必填项</strong><br>当点击 减号按钮时，会触发 reducer，此时控制台会有打印 “reducer”</p><h5 id="reducer-函数内部参数："><a href="#reducer-函数内部参数：" class="headerlink" title="reducer 函数内部参数："></a>reducer 函数内部参数：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br>&#125;;<br><br><span class="hljs-comment">// 减 按钮</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 使用 dispatch</span><br>  <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>reducer 函数内部是可以接收两个参数的。第一个参数 prevState：老的状态，action：dispatch 传递过来的 对象。<br>点击 减号按钮，执行 dispatch，调用 reducer 函数，其参数打印结果如下：<br><img src="https://s1.xptou.com/2022/09/20/6329c2d20398c.png" alt="reducer执行并接收的两个参数结果"></p><h5 id="使用-reducer-函数的参数：prevState-和-action"><a href="#使用-reducer-函数的参数：prevState-和-action" class="headerlink" title="使用 reducer 函数的参数：prevState 和 action"></a>使用 reducer 函数的参数：prevState 和 action</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// prevState：老的状态   action：dispatch 内部传递的 对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br><br>  <span class="hljs-comment">// 先对 老状态 进行复制，switch匹配操作完毕后，返回新状态</span><br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br><br>  <span class="hljs-comment">// action.type 就是 dispatch 传递的对象的 type，</span><br>  <span class="hljs-comment">// 可根据 type 不同，执行不同的状态修改</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countMinus&quot;</span>:<br>      newState.<span class="hljs-property">count</span>--;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countAdd&quot;</span>:<br>      newState.<span class="hljs-property">count</span>++;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>: <span class="hljs-comment">// 当以上 type 都不匹配，即写错的情况下，返回老状态</span><br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>既然 action 为点击项传递的 对象，根据 action.type，通过 switch/if 等方式匹配（推荐使用 switch），可以知道当前点击的是什么，需要执行什么样的操作。就可以在 case 中改写状态，并把 最新状态 return。</p><h5 id="完整使用代码"><a href="#完整使用代码" class="headerlink" title="完整使用代码"></a>完整使用代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// prevState：老的状态   action：dispatch 内部传递的 对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br><br>  <span class="hljs-comment">// 先对 老状态进行复制，switch匹配操作完毕后，返回新状态</span><br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br><br>  <span class="hljs-comment">// action.type 就是 dispatch 传递的对象的 type，</span><br>  <span class="hljs-comment">// 可根据 type 不同，执行不同的状态修改</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countMinus&quot;</span>:<br>      newState.<span class="hljs-property">count</span>--;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countAdd&quot;</span>:<br>      newState.<span class="hljs-property">count</span>++;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>: <span class="hljs-comment">// 当以上 type 都不匹配，即写错的情况下，返回老状态</span><br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-comment">// list:[] ......</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br><br>  <span class="hljs-comment">// 减</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 使用 dispatch</span><br>    <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>    &#125;);<br>  &#125;;<br>  <span class="hljs-comment">// 加</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchAdd</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countAdd&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;dispatchMinus&#125;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;state.count&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;dispatchAdd&#125;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>纵观完整代码，可以发现：App 组件没有自己的状态，只有外部状态影响 App</p><h5 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> initalState = &#123;<br>  <span class="hljs-attr">A</span>: <span class="hljs-string">&quot;初始化的A&quot;</span>,<br>  <span class="hljs-attr">B</span>: <span class="hljs-string">&quot;初始化的B&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changeA&quot;</span>:<br>      newState.<span class="hljs-property">A</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changeB&quot;</span>:<br>      newState.<span class="hljs-property">B</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Child 组件要使用 dispatch，但是不需要每个 Child 组件都定义一个 useReducer，因为 useReducer 每次返回的都是一个全新的对象，组件之间互不影响</span><br>  <span class="hljs-comment">// useReducer 不能在外部调用，只能在 hooks函数中使用</span><br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initalState);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 使用 useReducer 的话，就不用在父组件中传递各组件的方法和状态，只需要传递一个  state 和 dispatch，供 每个 Child 组件使用</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">state</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">dispatch</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child3</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// useContext(GlobalContext) 得到的就是 provider 的 value，解构出来</span><br>  <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">changA</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changeA&quot;</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;dispatch改变的A&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeB</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changeB&quot;</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;dispatch改变的B&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changA&#125;</span>&gt;</span>改变A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changeB&#125;</span>&gt;</span>改变B<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcoral</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      state.A：&#123;state.A&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      state.B：&#123;state.B&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例中，我们可见：不管是 App 组件，还是 Child 组件，他们的组件内部都没有所谓的 state，就是把 状态单独抽离出来，进行操作。这使得视图逻辑更加简洁明了（高耦合，低内聚）</p><h5 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h5><p>左侧组件为动漫名称列表展示，点击详情，可在右侧组件内部显示点击项的介绍详情。</p><p>对比可参考 <strong>useContext</strong> 示例代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useReducer, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">des</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">watchList</span>: [],<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;initList&quot;</span>:<br>      newState.<span class="hljs-property">watchList</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;setDes&quot;</span>:<br>      newState.<span class="hljs-property">des</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">state</span>, <span class="hljs-attr">dispatch</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; state, dispatch &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-comment">// 初始化请求列表数据</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;initList&quot;</span>,<br>        <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">watchDes</span> = (<span class="hljs-params">des</span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setDes&quot;</span>,<br>      <span class="hljs-attr">value</span>: des,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;state.watchList.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">50</span>%&quot; &#125;&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                watchDes(item.des);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              查看详情</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      动漫详情：&#123;state.des&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义-hooks"><a href="#自定义-hooks" class="headerlink" title="自定义 hooks"></a>自定义 hooks</h1><p><strong>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中</strong><br>必须以“use”开头吗？<br>必须如此。这个约定非常重要。不遵循的话，由于无法判断某个函数是否包含对其内部 Hook 的调用，React 将无法自动检查你的 Hook 是否违反了 Hook 的规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 这是正常定义在 hooks 内部的方法</span><br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br><br>  <span class="hljs-comment">// 渲染部分</span><br>  &#123;<br>    searchTitle.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    ));<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/********如果该方法在很多地方使用，可能不是一个组件，此时可以将这个方法抽离出来，自定义hooks**********/</span><br><span class="hljs-comment">// 改写成 hooks 格式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useFilter</span>(<span class="hljs-params">videoList, searchVal</span>) &#123;<br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br>  <span class="hljs-keyword">return</span> searchTitle;<br>&#125;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用 自定义 hooks</span><br>  <span class="hljs-keyword">let</span> searchTitle = <span class="hljs-title function_">useFilter</span>(videoList, searchVal);<br><br>  <span class="hljs-comment">// 渲染部分</span><br>  &#123;<br>    searchTitle.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    ));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义 hooks 可以理解为函数封装的进阶版。使用起来也大致差不多。更多的意义是多组件使用，且在函数外部定义，将逻辑抽离出来，视图层面的代码更加简洁。</p><h1 id="useContext-useReducer-和-Context-状态树"><a href="#useContext-useReducer-和-Context-状态树" class="headerlink" title="useContext useReducer 和 Context 状态树"></a>useContext useReducer 和 Context 状态树</h1><p>useContext useReducer 为 hooks 中使用的 ，而 Context 状态树是 class 组件中使用的。<br>因为三者的功能大致差不多，所以做一个总结，来看看使用区别和哪个使用更方便。<br><strong>Context 状态树</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a. 先定义全局context对象</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">GlobalContext</span><br><br><br><span class="hljs-comment">// b. 根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br><span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br>&lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span> value=&#123;&#123;<br>    <span class="hljs-attr">call</span>: <span class="hljs-string">&quot;打电话&quot;</span>,<br>    <span class="hljs-attr">sms</span>: <span class="hljs-string">&quot;发短信&quot;</span>,<br>    <span class="hljs-attr">des</span>: des,  <span class="hljs-comment">// des 为 父组件 将子组件的值转化为自身的，在派发给其它子组件</span><br>    <span class="hljs-attr">changeDes</span>: <span class="hljs-function">(<span class="hljs-params">des</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setDes</span>(des); <span class="hljs-comment">// 子组件通过 子传父，将值传递给父组件</span><br>    &#125;,<br>  &#125;&#125;<br>&gt;<br>&lt;之前的根组件&gt;&lt;/之前的根组件&gt;<br>&lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span>&gt;<br><br><br><span class="hljs-comment">// c. 任意组件引入GlobalContext并调用context，使用GlobalContext.Consumer（消费者）</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">&#123; context =&gt; &#123;</span><br><span class="language-xml">  this.myshow = context.show; //可以在当前组件任意函数触发</span><br><span class="language-xml">  this.myhide = context.hide;//可以在当前组件任意函数触发</span><br><span class="language-xml">  return (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;context.call&#125;-&#123;context.sms&#125;-&#123;context.des&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Consumer</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>useContext</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// a. 先定义全局context对象</span><br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">GlobalContext</span><br><br><br><br>  <span class="hljs-comment">// b. 根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br>  <span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br>  &lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span> value=&#123;&#123;<br>      <span class="hljs-attr">call</span>: <span class="hljs-string">&quot;打电话&quot;</span>,<br>      <span class="hljs-attr">sms</span>: <span class="hljs-string">&quot;发短信&quot;</span>,<br>      <span class="hljs-attr">des</span>: des,  <span class="hljs-comment">// des 为 父组件 将子组件的值转化为自身的，在派发给其它子组件</span><br>      <span class="hljs-attr">changeDes</span>: <span class="hljs-function">(<span class="hljs-params">des</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">setDes</span>(des); <span class="hljs-comment">// 子组件通过 子传父，将值传递给父组件</span><br>      &#125;,<br>    &#125;&#125;<br>  &gt;<br>  &lt;之前的根组件&gt;&lt;/之前的根组件&gt;<br>  &lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span>&gt;<br><span class="hljs-comment">/*********在这之前，useContext 和 Context 状态数没有一点区别，优势是：子组件接收参数更加方便**************/</span><br><br><br><br><span class="hljs-comment">// c. 任意组件使用 useContext（消费者）</span><br><span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.call&#125;-&#123;context.sms&#125;-&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>)<br><br></code></pre></td></tr></table></figure><p><strong>useReducer</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a. 先定义全局context对象,初始化数据：initalState，reducer函数</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// 注意此时的reduecer 返回值是一个对象 &#123;isShow:false,list:[]&#125;</span><br><br><span class="hljs-keyword">const</span> initalState = &#123;<br>  <span class="hljs-attr">initdata</span>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#x27;</span>:<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// b.根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br><span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">state</span>,  // <span class="hljs-attr">只需派发</span> <span class="hljs-attr">state</span> <span class="hljs-attr">和</span> <span class="hljs-attr">dispatch</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">dispatch</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">之前的根组件</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">之前的根组件</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span>;<br><br><span class="hljs-comment">// c. 任意组件使用 useContext（消费者）</span><br><span class="hljs-keyword">const</span> &#123;state,dispatch&#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;click&quot;&#125;)&#125;&#125;&gt;&#123;state.initdata&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>)<br></code></pre></td></tr></table></figure><p>Context 状态树的写法过于复杂，自然不必多说。<br>useContext 和 useReducer 之间的区别：</p><ul><li>useContext 在写法上，还是利用了 子传父，父在向下级派发，这使得 需要子传父的自定义事件和派发的数据都需要父组件定义，如果数据传输过多，就会导致父组件臃肿不堪，不仅要处理各个组件之间的数据传输，还要处理自身的数据，这对于视图来说，是不美观的。</li><li>useReducer 将状态提升至外部进行统一管理，这使得 不管是父组件还是子组件，内部除了自身自身必须的数据，其它数据都交由状态管理来维护，视图层面的代码会变得很简洁。</li></ul><span class='p red'>useReducer 通常情况下都是搭配 useContext 使用的</span>]]></content>
    
    
    <summary type="html">对React Hooks即函数组件进行基础的认识和使用。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期简括及简单性能优化</title>
    <link href="https://jsq180.github.io/posts/f56cbe58.html"/>
    <id>https://jsq180.github.io/posts/f56cbe58.html</id>
    <published>2022-09-15T22:16:19.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>结合之前文章的生命周期，将父子组件挂载即更新时，生命周期的执行顺序进行了简单的罗列，并简述 React 中基础的性能优化</p><h1 id="一、生命周期概括"><a href="#一、生命周期概括" class="headerlink" title="一、生命周期概括"></a>一、生命周期概括</h1><h2 id="1、老生命周期"><a href="#1、老生命周期" class="headerlink" title="1、老生命周期"></a>1、老生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextProps</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillReceiveProps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233a7a2254b.png" alt="父子组件老生命周期打印顺序"></p><h2 id="2、新生命周期"><a href="#2、新生命周期" class="headerlink" title="2、新生命周期"></a>2、新生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-comment">// getSnapshotBeforeUpdate 必须 return</span><br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233cfe7a86e.png" alt="父子组件新生命周期打印顺序"></p><div class="note warning simple"><ul><li>componentWillReceiveProps 不能和 static getDerivedStateFormPorps 一起使用</li><li>getSnapshotBeforeUpdate 不能和 shouldComponentUpdate 一起使用</li></ul></div><h1 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h1><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><div class="note info simple"><p>控制组件自身或者子组件是否需要更新，尤其在子组件非常多的情况下， 需要进行优化。</p></div><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><div class="note info simple"><p>PureComponent 会帮你 比较新 props 跟 旧的 props， 新的 state 和老的 state（值相等,或者对象含有相同的属性、且属性值相等 ），决定 shouldcomponentUpdate 返回 true 或者 false， 从而决定要不要呼叫 render function。</p></div><p>注意：<br><div class="note warning modern"><p>如果你的 state 或 props 『永远都会变』，那 PureComponent 并不会比较快，因为 shallowEqual 也需要花时间。</p></div></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">/*   shouldComponentUpdate(nextprops, nextState) &#123;</span><br><span class="hljs-comment">    // JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br><span class="hljs-comment">    //   老状态!==新状态，更新</span><br><span class="hljs-comment">    if (this.state.myname !== nextState.myname) return true;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    if (this.state.myname === nextState.myname) return false;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    // 应该更新/阻止更新</span><br><span class="hljs-comment">  &#125; */</span><br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span>data：&#123;this.state.data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对之前生命周期进行一个简要的概括，并列举React的简单性能优化。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期</title>
    <link href="https://jsq180.github.io/posts/1431380e.html"/>
    <id>https://jsq180.github.io/posts/1431380e.html</id>
    <published>2022-09-12T17:15:24.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期，顾名思义，和人从出生到死亡的过程是相似的。即作为一个页面，从页面加载到执行操作再到销毁的过程。</p><h1 id="老生命周期"><a href="#老生命周期" class="headerlink" title="老生命周期"></a>老生命周期</h1><h2 id="一、初始化阶段"><a href="#一、初始化阶段" class="headerlink" title="一、初始化阶段"></a>一、初始化阶段</h2><ul><li>componentWillMount：主要用于数据初始化，（已移除，不推荐使用）<ul><li>是 render 之前最后一次修改状态的机会</li></ul></li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出</li></ul></li><li>componentDidMount：成功 render 并渲染完成真实 DOM 后触发。<ul><li>多用于数据请求 axios。</li><li>函数的调用</li><li>基于创建完成的 DOM 进行初始化（比如设置 span 标签的 color）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;初始的佩奇&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">//   初始化数据的作用</span><br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillMount，DOM即将挂载，初始化数据，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;修改的野猪&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">//   数据请求、订阅发布函数的调用、setInterval、基于创建完DOM进行初始化</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// axios(&#123;.....&#125;)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidMount，DOM已经渲染完毕，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render，正在挂载渲染...&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面初始化过程打印如下：<br><img src="https://s1.xptou.com/2022/09/12/631f04bd85560.png" alt="页面初始化阶段加载过程"><br><div class="note danger modern"><p>此时控制台有警告，大致意思就是 使用 componentWillMount 可能会产生一些问题，推荐使用 componentDidMount 或者在 constructor 中执行这些逻辑。<br>原因是 ：<br>componentWillMount 是 React16（准确是 16.2） 版本之前的，而目前已是 React17（本人用的 17，此时 18 已在 22 年 3 月 29 日正式发布）。<br>在 16.2 版本之后，推出了新的生命周期，React 在 Diff 算法上出现了一定程度的更改，更加优化性能，提出了 Fiber 技术。<br>技术原因：</p><ul><li>传统的 React 在创建状态、创建新的 VDOM 时，会进行对比旧的 VDOM，这个过程是同步的，数据量小没有影响，数据量过于庞大，就会一直在进行 VDOM 对比，可能会使浏览器进入假死状态，而 React 的 Fiber 技术就是来优化这种情况下的 Diff 算法。</li><li>Fiber 把组件创建 DOM、组件渲染拆分成无数个小的 分片 任务执行，这时，如果有优先级较高的任务，就先执行优先级较高的任务。如果正在执行优先级较低的任务时，优先级较高的任务插入，就打断优先级较低的任务，执行优先级较高的任务。</li><li>在高优先级任务执行时，打断低优先级任务。 如在 WillMount 中，正去找哪些节点将要去挂载到页面中，此时 高优先级任务 ，如 render、DidMount 等，就会打断 WillMount 的寻找过程。打断之后不会保存，只会在高优先级任务执行完毕之后再重新寻找。这样就可能造成<strong>诸如 WillMount 此类的生命周期多次触发</strong>。</li><li>在以上出现的问题基础上，16.2 之后采用异步渲染，推出了新的生命周期。<br>解决方法：根据警告提示，将已过时的生命周期加上 UNSAFE_ 。如 UNSAFE_componentWillMount。</li></ul></div></p><h2 id="二、运行中阶段（更新阶段）"><a href="#二、运行中阶段（更新阶段）" class="headerlink" title="二、运行中阶段（更新阶段）"></a>二、运行中阶段（更新阶段）</h2><ul><li>componentWillReceiveProps：父组件修改属性触发。（已移除，不推荐使用）<ul><li>父组件中的属性作为 props 传递给子组件，此时修改 props 中的某个属性，会触发 子组件中的该生命周期</li></ul></li><li>shouldComponentUpdate：返回 false 会阻止 render 调用，阻止更新。</li><li>compoentWillUpdate：数据将要更新还未更新时。（已移除，不推荐使用）</li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出。</li></ul></li><li>componentDidUpdate：可以修改 DOM。</li></ul><h3 id="1、componentWillUpdate、render、componentDidMount"><a href="#1、componentWillUpdate、render、componentDidMount" class="headerlink" title="1、componentWillUpdate、render、componentDidMount"></a>1、componentWillUpdate、render、componentDidMount</h3><p><strong>componentWillUpdate：</strong></p><ul><li>在此生命周期内部访问到的属性和 DOM 元素都是旧的，因为此时处于将要更新，还未更新的状态，一切数据都是旧的。</li><li>componentWillUpdate(nextProps,nextState)，该生命周期可以接收两个参数。nextProps：即将更新的 props，nextState：即将更新的 state。<br><strong>componentDidUpdate：</strong></li><li>此时的数据和 DOM 都已更新完毕，推荐在此生命周期内获取/操作 DOM。</li><li>componentDidUpdate(prevProps,prevState)，该生命周期可以接收两个参数。prevProps：更新前的旧 props，prevState：更新钱的旧 state。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>    <span class="hljs-attr">filmList</span>: [],<br>  &#125;;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 加载获取数据</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">filmList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 在 DidMount 中，filmList 由 [] 变成有数据，所以在初始化阶段就会触发 WillUpdate、DidUpdate</span><br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      nextProps,<br>      nextState<br>    );<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      prevProps,<br>      prevState<br>    );<br><br>    <span class="hljs-comment">// 在内部可以做一些判断，比如：</span><br>    <span class="hljs-keyword">if</span> (prevState.<span class="hljs-property">filmList</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 创建 DOM，否则的话旧不需要再次创建，因为该 DOM 已经存在</span><br>    &#125;<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.filmList.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如图所示<br><img src="https://s1.xptou.com/2022/09/13/632089629d744.png" alt="WillUpdate和DidUpdate执行"><br><div class="tip error"><p>切忌在 WillUpdate 或 DidUpdate 等更新阶段的生命周期内部更改数据，会造成死循环，更新阶段触发更新就会再次执行该生命周期</p></div></p><h3 id="2、shouldComponentUpdate"><a href="#2、shouldComponentUpdate" class="headerlink" title="2、shouldComponentUpdate"></a>2、shouldComponentUpdate</h3><p>该生命周期是判断 是否触发更新阶段，返回 false 不更新，返回 true 更新。<br>shouldComponentUpdate(nextProps, nextState)，接收两个参数，和 WillUpdate 类似。nextProps：即将更新的 props，nextState：即将更新的 state。<br>在 shouldComponentUpdate 内部访问的数据依旧是原来的，因为该阶段是更新阶段首个触发的，用于判断是否进行后续的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// scu</span><br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br>    <span class="hljs-comment">//   老状态!==新状态，更新</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> !== nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> === nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 应该更新/阻止更新</span><br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//   会执行多次，解决办法：加判断</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevprops, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正常情况下，每次点击都会触发更新，因为 React 会把 状态做成新的 VDOM，和旧 VDOM 对比，并走完整个更新阶段。</span><br><span class="hljs-comment">     * 但这种情况下，如果数据没有发生改变，就会浪费这一流程，才有了 shouldComponentUpdate</span><br><span class="hljs-comment">     * shouldComponentUpdate 最主要的作用就是 对性能上的部分优化，适当阻止一些无意义的更新</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.myname&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、componentWillReceiveProps"><a href="#3、componentWillReceiveProps" class="headerlink" title="3、componentWillReceiveProps"></a>3、componentWillReceiveProps</h3><p>componentWillReceiveProps(nextProps)，接收一个参数，nextProps：即将更新的 props 状态，可以通过 props 传递过来的参数用于：网络请求，数据操作等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>  &#125;;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;上杉绘梨衣&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        父组件：&#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextprops</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillReceiveProps&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, nextprops);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">title</span>: nextprops.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦啦&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、销毁阶段"><a href="#三、销毁阶段" class="headerlink" title="三、销毁阶段"></a>三、销毁阶段</h2><p>componentWillUnmount：在删除组件之前进行清理操作，比如清空定时器和事件监听器，大多用于性能优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br><br>  handleComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isCreated</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isCreated</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleComponent&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUnmount&quot;</span>, <span class="hljs-string">&quot;组件即将移除&quot;</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果组件销毁但不进行清空操作：<br><img src="https://s1.xptou.com/2022/09/13/632098876eac0.png" alt="组件移除不进行清除操作"><br>组件销毁，清空定时器和其它监听事件：<br><img src="https://s1.xptou.com/2022/09/13/632097cde2109.png" alt="组件移除进行清除"></p><p class='p red'>老生命周期的问题：</p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>(1) componentWillMount ,在 ssr 中 这个方法将会被多次调用， 所以会重复触发多遍，同时在这里如果绑定事件，将无法解绑，导致内存泄漏 ，变得不够安全高效逐步废弃。<br>(2) componentWillReceiveProps 外部组件多次频繁更新传入多次不同的 props，会导致不必要的异步请求<br>(3) componetWillUpdate, 更新前记录 DOM 状态, 可能会做一些处理，与 componentDidUpdate 相隔时间如果过长， 会导致 状态不太信</p></div><h1 id="新生命周期"><a href="#新生命周期" class="headerlink" title="新生命周期"></a>新生命周期</h1><h2 id="1、getDerivedStateFromProps"><a href="#1、getDerivedStateFromProps" class="headerlink" title="1、getDerivedStateFromProps"></a>1、getDerivedStateFromProps</h2><p>机翻：得到衍生的 state 来自 props。<br>特点：<br>第一次的初始化组件以及后续的更新过程中(包括自身状态更新以及父传子) ，返回一个对象作为新的 state，返回 null 则说明不需要在这里更新 state</p><p>getDerivedStateFromProps 注意事项：<br><img src="https://s1.xptou.com/2022/09/14/6321ef5966995.png" alt="1、getDerivedStateFromProps注意事项"><br>getDerivedStateFromProps(nextProps,nextState)，该生命周期接收两个参数，nextProps：即将更新的 props 属性，nextState：即将更新的 state 状态。<br><p class='p red'>getDerivedStateFromProps 替代了 componentWillMount 、componentWillreceiveProps</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;父组件更改前&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">text</span>: nextState.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦&quot;</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; text: &quot;父组件更新后&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          click</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-comment">// componentWillReceiveProps(nextprops) &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillReceiveProps&quot;, this.props, nextprops);</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     title: nextprops.text + &quot;啦啦啦啦&quot;,</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-comment">// 在这里可以接收到父组件传递过来的 props，但不能在这里做任何异步请求</span><br>    <span class="hljs-comment">// 因为 return 会立即执行，不会等待任何异步操作</span><br>    <span class="hljs-comment">// 所以该生命周期最大的作用是进行一个数据中转，把 props 的属性值 转换为自身的 state，再在 DidUpdate中记性一些 axios 请求等</span><br>    <span class="hljs-comment">// 解决 componentWillReceiveProps 频繁多次请求的问题</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">title</span>: nextProps.<span class="hljs-property">text</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-comment">// *********************注意****************************</span><br>    <span class="hljs-comment">//不能直接在 DidUpdate 中发起 网络请求，因为发起之后，请求成功，更新数据，就会造成再次执行更新阶段，死循环，</span><br>    <span class="hljs-comment">// 不能直接请求，需进行一个判断，</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">title</span> === prevProps.<span class="hljs-property">text</span>) &#123;<br>      <span class="hljs-comment">// 判断 更新后的 值和 之前老的 props 值是否一样，一样的话 return，不再进行后续操作</span><br>      <span class="hljs-comment">// 同时，例如点击向子组件传值，子组件根据值发请求这种例子，可以使重复点击不生效</span><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;子组件在DidUpdate中更新的myname&quot;</span>,<br>    &#125;);<br><br>    <span class="hljs-comment">/* axios(&#123;</span><br><span class="hljs-comment">      url:&#x27;https://.....&#x27;,</span><br><span class="hljs-comment">      method:&#x27;GET&#x27;,</span><br><span class="hljs-comment">      data:&#123;</span><br><span class="hljs-comment">        query:this.state.title</span><br><span class="hljs-comment">        ........</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;).then((res)=&gt;&#123;</span><br><span class="hljs-comment">      this.setState(&#123;</span><br><span class="hljs-comment">        title:res</span><br><span class="hljs-comment">      &#125;)</span><br><span class="hljs-comment">    &#125;) */</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件更新在 DidUpdate 中直接进行网络请求或数据更改，死循环：<br><img src="https://s1.xptou.com/2022/09/15/63232c62dc0a9.png" alt="子组件更新不加if判断"><br>加 if 判断，进行请求或数据更改：<br><img src="https://s1.xptou.com/2022/09/15/63232dc460106.png" alt="加if判断"></p><h2 id="2、getSnapshotBeforeUpdate"><a href="#2、getSnapshotBeforeUpdate" class="headerlink" title="2、getSnapshotBeforeUpdate"></a>2、getSnapshotBeforeUpdate</h2><p>getSnapshotBeforeUpdate 取代了 componetWillUpdate ,触发时间为 update 发生的时候，在 render 之后，dom 渲染之前返回一个值，作为 componentDidUpdate 的第三个参数。<br>应用场景：如聊天滚动时记录滚动位置等处理（此用法并不常见）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">mytext</span>: <span class="hljs-string">&quot;1111&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// componentWillUpdate() &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillUpdate&quot;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">nextProps, nextState, value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>, nextProps, nextState, value);<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; mytext: &quot;2222&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          onClick</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.mytext&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/632332d776a4f.png" alt="更新的打印过程"></p>]]></content>
    
    
    <summary type="html">主要了解React的生命周期，包括旧生命周期和新生命周期以及用法。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-组件通信的方式</title>
    <link href="https://jsq180.github.io/posts/1515f762.html"/>
    <id>https://jsq180.github.io/posts/1515f762.html</id>
    <published>2022-09-10T22:56:16.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般常用的组件通信方式基本就是 子传父 和 父传子，但除此之外还有其他的数据传递方式，在此说明。<br>并且该篇章中有不熟悉的知识点，发布订阅和上下文，诸如此类，所以单拎出来写了一个篇章。</p><h1 id="一、父子组件通信"><a href="#一、父子组件通信" class="headerlink" title="一、父子组件通信"></a>一、父子组件通信</h1><h2 id="1、父传子"><a href="#1、父传子" class="headerlink" title="1、父传子"></a>1、父传子</h2><p>所谓父向子传值，个人理解就是把父亲的东西（state/方法等）给儿子，可以供儿子使用，儿子可以使用父亲给他的数据，但儿子决不能损坏这些数据（React 遵循单项数据流原则），因为会挨骂（!!!∑(ﾟ Д ﾟノ)ノ）。</p><h3 id="1-父组件向子组件传递基础数据"><a href="#1-父组件向子组件传递基础数据" class="headerlink" title="1.父组件向子组件传递基础数据"></a>1.父组件向子组件传递基础数据</h3><p>父组件通过在子组件内部写 key=value 的形式向子组件传递数据，子组件通过 props 调用<br>本质上就是调用子组件的 props，因为父组件传递的所有数据，都存储在 props 对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件的name为：&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.text&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>渲染的视图以及打印数据如图所示：<br><img src="https://s1.xptou.com/2022/09/10/631cac6e14c40.png" alt="视图及子组件props"></p><h3 id="2-父组件向子组件传递方法"><a href="#2-父组件向子组件传递方法" class="headerlink" title="2.父组件向子组件传递方法"></a>2.父组件向子组件传递方法</h3><p>通常情况下，都是需要子组件做出行为，来影响父组件中的数据，但子组件不能直接更改父组件的数据，此时就需要父组件给子组件更改数据的权限，即：父组件先定义好一个更改数据的方法，传递给子组件，子组件接受收到这个方法，在触发某种行为时调用即可。<br>（烂白话就是：父亲一般不会让儿子拿抽屉里的盒子（数据），但特殊情况时，父亲会给儿子一把开锁的钥匙（更改数据的方法），儿子就可以取走抽屉里的盒子（更改父组件数据），就是这么回事。当然儿子也可以把锁撬开，即强行拿盒子（强行更改父组件数据），结果可想而知(〃’▽’〃)）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">fn</span>();<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">this.props.bg</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span>点击更改父组件的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">childColor</span>: <span class="hljs-string">&quot;lightblue&quot;</span>,<br>  &#125;;<br><br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;张三&quot;</span> ? <span class="hljs-string">&quot;李四&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      name,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的名字：&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">bg</span>=<span class="hljs-string">&#123;this.state.childColor&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fn</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/10/631cb0e7be01c.png" alt="子组件调用父组件方法"><br>props 中有父组件传给子组件的 fn 函数，子组件调用，就相当于直接调用了父组件中修改 state 的方法，对于子组件来说是间接修改了父组件的 state。<br>（人话总结：儿子拿到了钥匙（props 中的 fn），并取出盒子（更改了父组件的 state），但这个盒子不属于他且不知道盒子是干啥的（子组件无权访问 父组件的 state），因为儿子只是遵守父亲的指令，在适当时候把盒子拿出来）</p><h2 id="2、子传父"><a href="#2、子传父" class="headerlink" title="2、子传父"></a>2、子传父</h2><p>子传父的方式和 父向子传方法 比较类似，区别就是子组件不是单纯的调用父组件的方法，而是需要向父组件传递自己内部的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;childName&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击改变自己的name</span><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;changeName&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击向父组件传递数据</span><br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getChildName</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> &quot;<span class="hljs-attr">10px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          子组件自己的name:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>点击改变自己的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span></span><br><span class="language-xml">          点击向父组件传递自己的name</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">childName</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br><br>  getChildName = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件传递过来的值&quot;</span>, value);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">childName</span>: value,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件的名字：&#123;this.state.childName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">getChildName</span>=<span class="hljs-string">&#123;this.getChildName&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>初始加载页面：<br><img src="https://s1.xptou.com/2022/09/11/631cb8d038fad.png" alt="加载页面"><br>点击更改子组件 name：此时并未向父组件传值，所以父组件的渲染处依旧为空<br><img src="https://s1.xptou.com/2022/09/11/631cb968ad1f2.png" alt="子组件更改name"><br>此时点击向父组件传值：<br><img src="https://s1.xptou.com/2022/09/11/631cb9f3ec123.png" alt="向父组件传值"></p><p>子向传父传值，子组件将数据作为回调交给父组件的方法，父组件可以接收到这个值，并将子组件的这个值，赋值给自己的 state ，作为自己内部的数据进行渲染，如果后续子组件的数据发生变化，只要调用向父组件传值的方法，就可以更改视图。如果子组件一直不调用，那么，父组件就无法得到子组件的数据。<br>人话总结：这是一位和蔼可亲的父亲，给儿子一张成绩统计表（向子组件传递方法并接收参数），儿子可以凭自己的意愿，决定要不要填写这个成绩表，并把它交给父亲（子组件自主调用该方法，并将部分数据传给父组件）</p><h1 id="二、非父子组件通信"><a href="#二、非父子组件通信" class="headerlink" title="二、非父子组件通信"></a>二、非父子组件通信</h1><h2 id="1、状态提升（中间人模式）"><a href="#1、状态提升（中间人模式）" class="headerlink" title="1、状态提升（中间人模式）"></a>1、状态提升（中间人模式）</h2><p>React 中的状态提升概括来说,就是将多个组件需要共享的状态提升到它们最近的父组件上.在父组件上改变这个状态然后通过 props 分发给子组件.（即兄弟组件通信）<br>流程如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631d9b1053d26.png" alt="中间人模式数据传输流程"><br>兄弟组件传值：子传父—&gt;父再传另一个子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [],<br>  &#125;;<br>  getList = <span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件接收到Child1的值&quot;</span>, list);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      list,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">getList</span>=<span class="hljs-string">&#123;this.getList&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&#123;this.state.list&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-comment">// 向父组件传值</span><br>  sendList = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child1向父组件传值&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getList</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.sendList&#125;</span>&gt;</span>点击向Child2发送数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2 render：list数据&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">list</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员列表：</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;/*接收父组件传过来的值并渲染*/&#125;</span><br><span class="language-xml">          &#123;this.props.list.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;item.name&#125;-&#123;item.age&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初次渲染，Child2 没有值，所以 ul 列表的 li 不渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da081db55f.png" alt="初次加载阶段"><br>点击按钮，Child1 把 list 传递给父组件，父组件 list 改变，Child2 的 props 也相应改变，render 再次渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da0e062623.png" alt="子传父，父传给另一个子"></p><h2 id="2、发布订阅模式（简易版）"><a href="#2、发布订阅模式（简易版）" class="headerlink" title="2、发布订阅模式（简易版）"></a>2、发布订阅模式（简易版）</h2><p>发布订阅模式不是 React 独有的，通过 JavaScript 即可实现发布订阅模式，是原生的设计模式。<br>发布订阅模式流程图如下(以微信公众号为例子)：<br><img src="https://s1.xptou.com/2022/09/11/631da5a8efbe4.png" alt="发布订阅流程图"></p><div class="note info modern"><p>第一步：定义 bus 对象，在内部定义方法：subscibe()(订阅)、publish()（发布），并在 bus 外部创建订阅者</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 微信公众平台</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者</span><br><span class="hljs-comment">// 点击按钮订阅公众号</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>console 结果如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631da7eec9e8e.png" alt="callback结果"><br>此时的 log 打印即为 subscribe 执行的结果，因为有人订阅了（调用了 subscribe），所以有了打印，subscribe 接收的是一个回调函数，而后续需要在 publish 方法中使用这个 callback，但 publish 访问不到 subscribe 中的 callback ，此时进行第二步</p><div class="note info modern"><p>第二步：定义 list 数组，用来存储所有订阅者传递的回调函数 callback</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631dab011fea8.png" alt="多个订阅者执行subscribe"><br>此时多个订阅者已经订阅了这一个公众号，那么接下来，就轮到 发布者 发布了，调用 publish</p><div class="note info modern"><p>第三步：发布者发布文章，调用 publish 方法，publish 将所有订阅者的 callback 函数进行遍历执行</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">// 遍历所有的 list ，将回调函数执行</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback, index</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：张三`</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：李四`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;HTML&quot;</span>);<br>&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631db7a18cef7.png" alt="发布者调用publish"><br>结果就是订阅者的回调函数，在发布者发布的情况下依次执行，派发给每一个订阅者。</p><div class="tip info"><p>Redux 的原理实际上就是基于的发布订阅去实现的</p></div><h2 id="3、发布订阅结合-React（简单案例）"><a href="#3、发布订阅结合-React（简单案例）" class="headerlink" title="3、发布订阅结合 React（简单案例）"></a>3、发布订阅结合 React（简单案例）</h2><div class="note info modern"><p>第一步：创建一个发布订阅模式<br>第二步：Child2 组件先进行订阅 bus.subscribe((value) =&gt; {})<br>第三步：Child1 组件进行发布，pubLishDetail = (item) =&gt;{bus.publish(item.content)}，在点击按钮的时候获取到当前项，并把当前项的 content 发布<br>第四部：Child2 组件能够得到 Child1 发布的 content，此时仅需渲染即可，在内部 this.setState({content:value})，即可进行视图的渲染</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-attr">list</span>: [],<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">publish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">//   遍历所有的列表list，将回调函数执行</span><br>    <span class="hljs-comment">// console.log(this.list);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br><br>  <span class="hljs-comment">// 组件1 进行发布</span><br>  pubLishDetail = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    bus.<span class="hljs-title function_">publish</span>(item.<span class="hljs-property">content</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.list.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                this.pubLishDetail(item);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              点击发布该名字的人物介绍</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 组件2DOM元素加载完毕，进行订阅</span><br>    bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2订阅得到发布者的发布内容：&quot;</span>, value);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">content</span>: value,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员介绍：&#123;this.state.content&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始加载状态：<br><img src="https://s1.xptou.com/2022/09/11/631dbe66be3ef.png" alt="加载完毕的状态"><br>点击每一项按钮依次派发内容：<br><img src="https://s1.xptou.com/2022/09/11/631dbeb136265.png" alt="点击按钮Child2组件接收不同内容"></p><h2 id="4、context-状态树传参"><a href="#4、context-状态树传参" class="headerlink" title="4、context 状态树传参"></a>4、context 状态树传参</h2><p>React 官方提供了 Context 来进行组件通信，其原理就是 生产者-消费者 模式。<br>生产者-消费者模式流程介绍图：<br><img src="https://s1.xptou.com/2022/09/11/631dfc38ebe66.png" alt="生产者消费者模式"><br>虽然这些组件也是必须在一个父组件当中，但和兄弟组件传值相比，Context 最大的优势，是可以进行组件嵌套时的数据通信，只要在一个父组件下，所有的子组件都可以是消费者，不管该组件外部嵌套了多少父组件，只要成为消费者，生产商就可以把数据传递给这些组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 第一步，先创建 Context 对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GLobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第二步：使用 GLobalContext 将根节点进行包裹，实际是使用 GLobalContext 对象身上的 Provider 属性，使根组件成为 供应商</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 第四步：尝试传递一些参数</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">call:</span> &quot;<span class="hljs-attr">打电话</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">sms:</span> &quot;<span class="hljs-attr">发短信</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">content:</span> <span class="hljs-attr">this.state.content</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">changeContent:</span> (<span class="hljs-attr">content</span>) =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(content);</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              content,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Provider</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第三步：使组件1 成为消费者</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 步骤1：先使用 GLobalContext.Consumer 将根节点进行包裹</span><br><span class="hljs-comment">     * 步骤2：在内部写一个 JavaScript 写法的回调函数 ()=&gt;&#123;&#125;  因为 React render 中不支持这样写，还需要加一个&#123;&#125;让 React 识别，</span><br><span class="hljs-comment">     * 最终写法：&#123;</span><br><span class="hljs-comment">                  ()=&gt;&#123;</span><br><span class="hljs-comment">                      return &lt;div&gt;根节点&lt;/div&gt;</span><br><span class="hljs-comment">                  &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-comment">// 问：为什么携程回调函数的形式？</span><br>    <span class="hljs-comment">// 答：为了接收参数，即 供应商 提供给消费者的各种服务（数据）</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child1组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              &#123;this.state.list.map((item) =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">                    &#123;item.name&#125;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                        // value.content = item.content // 这种改法 React 监听不到，视图不会重新渲染，所以需要供应商提供一个改状态的方法</span><br><span class="language-xml">                        // 在点击的时候 把当前点击项的 content 传递给父组件，父组件进行修改并广播</span><br><span class="language-xml">                        value.changeContent(item.content);</span><br><span class="language-xml">                      &#125;&#125;</span><br><span class="language-xml">                    &gt;</span><br><span class="language-xml">                      点击显示该名字的人物介绍</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child2组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">              人员介绍：&#123;value.content&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Context 写法下的结果，和发布订阅模式下的结果一致：<br><img src="https://s1.xptou.com/2022/09/11/631dfc5a05427.png" alt="Context写法"><br>以上代码需求大致为：此时需要将 Child1 点击对应项，让 Child2 显示 content，即将 Child1 的数据传递给 Child2<br>实现流程：<br><div class="note info simple"><p>1、使 App 组件成为 生产者，使 Child1、Child2 组件成为消费者，<br>2、App 生产者，需提供 一个在 state 定义好，用来接收 Child1 传递过来的数据，派发给每一个消费者，这样才能使消费者中使用这个数据的视图更新<br>3、App 生产者，需提供一个 更改 state 的方法，在点击 Child1 的某项数据时，把数据传递给 App 生产者，并更改 state 中的数据<br>4、点击测试即可</p></div><br>PS：小声 bb，这种写法真是无力吐槽，对于简单的通信，父子通信即可解决，而且开发中很少使用这种方式，大都使用 Redux 进行跨组件通信。</p><div class="tip warning"><p>注意：GlobalContext.Consumer 内必须是回调函数，通过 context 方法改变根组件状态</p></div><div class="note info modern"><p>context 优缺点：<br>优点：跨组件访问数据<br>缺点：react 组件树中某个上级组件 shouldComponetUpdate 返回 false,当 context 更新时，不会引起下级组件更新</p></div><h2 id="三、插槽"><a href="#三、插槽" class="headerlink" title="三、插槽"></a>三、插槽</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        App父组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1111111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3333333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、爲了复用</span><br><span class="hljs-comment">2、一定程度减少父子通信</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>); <span class="hljs-comment">// 插槽的内容以数组的形式呈现</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        Child组件</span><br><span class="language-xml">        &#123;/* 类似vue的插槽 */&#125;</span><br><span class="language-xml">        &#123;this.props.children[0]&#125;</span><br><span class="language-xml">        &#123;this.props.children[1]&#125;</span><br><span class="language-xml">        &#123;this.props.children[2]&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图渲染即打印结果：插槽的内容以数组的形式呈现<br><img src="https://s1.xptou.com/2022/09/11/631e025cc8899.png" alt="插槽的使用结果"></p>]]></content>
    
    
    <summary type="html">主要讲述React的组件通信的多种方式。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-state和props以及受控组件</title>
    <link href="https://jsq180.github.io/posts/38c9fb2f.html"/>
    <id>https://jsq180.github.io/posts/38c9fb2f.html</id>
    <published>2022-09-01T21:00:02.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、组件的数据挂载方式"><a href="#一、组件的数据挂载方式" class="headerlink" title="一、组件的数据挂载方式"></a>一、组件的数据挂载方式</h1><h2 id="1-状态（state）"><a href="#1-状态（state）" class="headerlink" title="1.状态（state）"></a>1.状态（state）</h2><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)。</p><ul><li>写法一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.name = &quot;Vue&quot;</span><br>  &#125;;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  isLiked 存放在实例的 state 对象当中，组件的 render 函数内，会根据组件的 state 的中的</span><br><span class="hljs-comment">  isLiked 不同显示“取消”或“收藏”内容。下面给 button 加上了点击的事件监听</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span> 点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：在 React 中修改状态，不能直接 this.state.isLiked 修改，原因如下</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>this.state 是纯 js 对象,在 vue 中，data 属性是利用 Object.defineProperty 处理过的，更改 data 的数据的时候会触发数据的 getter 和 setter ，但是 React 中没有做这样的处理。<br>如果直接更改的话，react 是无法得知的，所以，需要使用特殊的更改状态的方法 <strong>setState</strong> 。</p></div></p><ul><li>写法二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;<br><br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 将 name 属性从 React 设置为 Vue</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span>点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用 constructor 构造器继承 Component 组件的属性，则必须在内部添加 super()</p><ul><li>constructor 简单介绍：</li></ul><ul><li>constructor 方法是类的默认方法，通过 new 命令生成对象实例，自动调用该方法。</li><li>一个类必须有 constructor 方法，如果没有显示定义，一个空的 constructor 方法会被默认添加。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义了一个空的类Point，</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-comment">// JavaScript引擎会自动为它添加一个空的constructor方法</span><br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 constructor 详细内容，后续补充。</p><h2 id="2-渲染数据"><a href="#2-渲染数据" class="headerlink" title="2.渲染数据"></a>2.渲染数据</h2><h3 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h3><p>一般会通过三目运算的方式，对不同状态的数据进行不同内容的渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changeLike = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.isLiked = !this.state.isLiked</span><br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>/</span><br><span class="language-xml">        &#123;/* 当 isLiked 的状态为 true ，渲染 &quot;❤收藏&quot; ，否则渲染  &quot;🖤取消&quot; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeLike&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.isLiked ? &quot;🖤取消&quot; : &quot;❤收藏&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-列表渲染"><a href="#2-列表渲染" class="headerlink" title="2.列表渲染"></a>2.列表渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">people</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.people.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 内部渲染还可以这样写：原因是 return 的只能是一个根节点，即一个结果，所以 return 和 &#123;&#125; 可以省略不写</span><br><span class="hljs-comment">/* this.state.people.map((item) =&gt; &#123;</span><br><span class="hljs-comment">  return (</span><br><span class="hljs-comment">    &lt;ul key=&#123;item.id&#125;&gt;</span><br><span class="hljs-comment">      &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="hljs-comment">    &lt;/ul&gt;</span><br><span class="hljs-comment">  );</span><br><span class="hljs-comment">&#125;); */</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/01/6310852e0ef87.png" alt="列表渲染结果"></p><h3 id="3-循环渲染的唯一值-key"><a href="#3-循环渲染的唯一值-key" class="headerlink" title="3.循环渲染的唯一值 key"></a>3.循环渲染的唯一值 key</h3><p>在进行循环渲染时，react 告诉我们，每一条数据都需要有一个 key 值，且 key 的值是唯一，不能重复的。<br>这涉及到 React（Vue）的渲染方式：虚拟 DOM，其核心也就是 Diff 算法。</p><p>React 的高效依赖于所谓的 Virtual-DOM，尽量不碰 DOM。对于列表元素来说会有一个问题：元素可能会在一个列表中改变位置。要实现这个操作，只需要交换一下 DOM 位置就行了，但是 React 并不知道其实我们只是改变了元素的位置，所以它会重新渲染后面两个元素（再执行 Virtual-DOM ），这样会大大增加 DOM 操作。但如果给每个元素加上唯一的标识，React 就可以知道这两个元素只是交换了位置，这个标识就是 key ，这个 key 必须是每个元素唯一的标识</p><p><img src="https://s1.xptou.com/2022/09/01/6310c0c0d4e24.png" alt="DOM更新原理"></p><ul><li>为了列表的复用和重排，设置 key 值，提高性能。</li><li>在进行列表渲染时，尽量使用数据的 ID 作为 key，因为后端返回的 ID 时唯一的。</li><li>在列表仅仅是数据展示时，可以使用 index 索引作为 key，因为不会对 DOM 进行数据更改。</li><li>如果涉及到列表数据的动态<strong>添加、删除</strong>等，就尽量保证 key 值得唯一性，不然很可能会出现问题。</li><li>在对 state 中的数据更改时，非必要，尽量不要影响原数据，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = a;<br>b.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 此时 b 指向的 和 a 是同一个 内存地址，相当于操作的依旧是 a 数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b); <span class="hljs-comment">// true 若指向的不同地址，就算数组相同，也为 false</span><br></code></pre></td></tr></table></figure><ul><li>解决方法：</li></ul><ul><li>解构赋值 、slice、concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 解构赋值</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = [...a]; <span class="hljs-comment">// 多层数据无法实现</span><br><br><span class="hljs-comment">// slice()  concat()</span><br><span class="hljs-keyword">let</span> c = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> d = [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> c_copy = c.<span class="hljs-title function_">slice</span>();<br><span class="hljs-keyword">let</span> d_copy = d.<span class="hljs-title function_">slice</span>(); <span class="hljs-comment">// 如果数组含有对象，则对象的指针指向同一个内存地址，也相当于拷贝一层</span><br></code></pre></td></tr></table></figure><h3 id="4-setState-同步异步"><a href="#4-setState-同步异步" class="headerlink" title="4.setState 同步异步"></a>4.setState 同步异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">count1</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">count2</span>: <span class="hljs-number">1</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 同步函数</span><br>  changeCount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">count1</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span> + <span class="hljs-number">1</span>,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>      &#125;<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>  &#125;;<br>  <span class="hljs-comment">//异步函数</span><br>  changeAsync = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// axios 属于异步任务</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>        &#123;<br>          <span class="hljs-attr">count2</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span> + <span class="hljs-number">1</span>,<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>        &#125;<br>      );<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeCount&#125;</span>&gt;</span>同步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeAsync&#125;</span>&gt;</span>异步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>点击操作结果如图所示：<br><img src="https://s1.xptou.com/2022/09/04/631473e7819d1.png" alt="setState 同步异步"><br><strong>结论：</strong><br><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><ul><li>setState 处在同步任务中，异步更新状态和真实 DOM<br>setState 处在异步任务中，同步更新状态和真实 DOM</li><li>setState 接受第二个参数，第二个参数式回调函数中，状态和 DOM 更新完成就会被触发</li></ul></div></p><h3 id="5-setState-的两种写法"><a href="#5-setState-的两种写法" class="headerlink" title="5.setState 的两种写法"></a>5.setState 的两种写法</h3><p>setState 有两个参数。<br>第一个参数可以是对象，也可以是方法 return 一个对象，我们把这个参数叫做 updater</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1、参数是对象  这种写法是最常用的</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>  <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>&#125;);<br><br><span class="hljs-comment">//2、参数是方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这两个参数的数据都是最新的，在此回调函数中访问到的数据也都是最近的</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isLiked</span>: !state.<span class="hljs-property">isLiked</span>,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-React-识别富文本：dangerouslySetInnerHTML"><a href="#2-React-识别富文本：dangerouslySetInnerHTML" class="headerlink" title="2.React 识别富文本：dangerouslySetInnerHTML"></a>2.React 识别富文本：dangerouslySetInnerHTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;这是第一行&lt;br/&gt;这是第二行&quot;</span> &#125;],<br>    <span class="hljs-attr">myHtml</span>: <span class="hljs-string">`&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="hljs-string">              &lt;img src=&quot;https://xxxxxxxx&quot;/&gt;</span><br><span class="hljs-string">            &lt;/div&gt;`</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/*注意：__html 是两个下划线*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.content</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.myHtml</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处于安全的原因，React 当中所有表达式的内容会被转义，如果直接输入，标签会被当成文本。这时候<br>就需要使用 dangerouslySetHTML 属性，它允许我们动态设置 innerHTML。<br>一般情况下，dangerouslySetInnerHTML 搭配富文本编辑器使用，一般用来转义 html 标签。</p><h1 id="二、属性（props）"><a href="#二、属性（props）" class="headerlink" title="二、属性（props）"></a>二、属性（props）</h1><h2 id="1-类组件"><a href="#1-类组件" class="headerlink" title="1.类组件"></a>1.类组件</h2><ul><li>props 是正常是外部传入的，组件内部也可以通过一些方式来初始化的设置，属性不能被组件自己更改，但是你可以通过父组件主动重新渲染的方式来传入新的 props</li><li>属性是描述性质、特点的，组件自己不能随意更改。</li><li>总的来说，在使用一个组件的时候，可以把参数放在标签的属性当中，所有的属性都会作为组件 props 对象的键值。通过箭头函数创建的组件，需要通过函数的参数来接收 props :<br>(1) 在组件上通过 key=value 写属性,通过 this.props 获取属性,这样组件的可复用性提高了。<br>(2) 注意在传参数时候，如果写成 isShow=”true” 那么这是一个字符串 如果写成 isShow={true} 这个 是布尔值<br>(3) {…对象} 展开赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Navbar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, propTypes);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.leftshow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#125;</span><br><span class="language-xml">        Navbar-&#123;this.props.title&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;测试&quot;</span>,<br>      <span class="hljs-attr">leftshow</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;列表&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;购物车&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;obj.title&#125;</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;obj.leftshow&#125;</span> /&gt;</span> */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> &#123;<span class="hljs-attr">...obj</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4) 默认属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">*.<span class="hljs-property">defaultProps</span> = &#123;<br><br> &#125;<br><span class="hljs-keyword">static</span> defaultProps = &#123;<br>  <span class="hljs-attr">myname</span>:<span class="hljs-string">&quot;默认的myname&quot;</span>,<br>  <span class="hljs-attr">myshow</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>(5) prop-types 属性验证<br>验证 props 传入的数据是否合法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br>*.<span class="hljs-property">propTypes</span>=&#123;<br>    <span class="hljs-attr">name</span>:propTypes.<span class="hljs-property">string</span>,<br>    <span class="hljs-attr">age</span>:propTypes.<span class="hljs-property">number</span><br>&#125;<br><span class="hljs-comment">// 类属性</span><br><span class="hljs-keyword">static</span> propTypes=&#123;<br>  <span class="hljs-attr">myname</span>:propTypes.<span class="hljs-property">string</span>,<br>  <span class="hljs-attr">myshow</span>:propTypes.<span class="hljs-property">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><p>propTypes 的打印结果：<br><img src="https://s1.xptou.com/2022/09/04/6314741c24aaa.png" alt="propTypes 打印结果"></p><h2 id="2-函数组件"><a href="#2-函数组件" class="headerlink" title="2.函数组件"></a>2.函数组件</h2><p>函数组件的规则和类组件几乎没有区别，只有在 props 的调用上有些许不同<br>类组件使用 this.props.属性 来访问，而函数组件直接 props.属性 访问，毕竟 函数组件没有 this，当然也无法通过 this 访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navbar</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">props.bg</span> &#125;&#125;&gt;</span>Navbar组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-状态-vs-属性"><a href="#3-状态-vs-属性" class="headerlink" title="3.状态 vs 属性"></a>3.状态 vs 属性</h2><p>相似点：都是纯 js 对象，都会触发 render 更新，都具有确定性（状态/属性相同，结果相同）<br>不同点：</p><ol><li>属性能从父组件获取，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以，设置方式不一样</li><li>属性不在组件内部修改，状态要在组件内部修改</li><li>属性能设置子组件初始值，状态不可以</li><li>属性可以修改子组件的值，状态不可以</li></ol><ul><li><p>state 的主要作用是用于组件保存、控制、修改自己的可变状态。 state 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为 state 是一个局部的、只能被组件自身控制的数据源。 state 中状态可以通过 this.setState 方法进行更新，setState 会导致组件的重新渲染。</p></li><li><p>props 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的 props ，否则组件的 props 永远保持不变。</p></li><li><p>没有 state 的组件叫无状态组件（stateless component），设置了 state 的叫做有状态组件（stateful component）。因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。</p></li></ul><h1 id="三、非受控组件和受控组件"><a href="#三、非受控组件和受控组件" class="headerlink" title="三、非受控组件和受控组件"></a>三、非受控组件和受控组件</h1><h2 id="1-非受控组件"><a href="#1-非受控组件" class="headerlink" title="1.非受控组件"></a>1.非受控组件</h2><p>React 要编写一个非受控组件，可以 使用 ref 来从 DOM 节点中获取表单数据，就是非受控组件。（不是通过 react 的 state 来获取表单数据，而是通过 ref 的形式来获取，不受到 state 的控制，就叫做非受控组件）</p><p>默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  myusername = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myusername&#125;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(this.myusername.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          登录</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.myusername.current.value = &quot;&quot;;</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样， type=”checkbox” 和 type=”radio” 支持 defaultChecked ， select 和 textarea 支持 defaultValue 。<br><strong>注意：</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>除非使用很简单的代码，组件的数据不涉及视图更新，不然不建议使用非受控组件，因为非受控组件不与 state 关联，所以改变数据，react 监听不到数据更改，不会改变视图。</p></div></p><h2 id="2-受控组件"><a href="#2-受控组件" class="headerlink" title="2.受控组件"></a>2.受控组件</h2><p>由于在表单元素上设置了 value 属性，因此显示的值将始终为 this.state.value ，这使得 React 的 state 成为唯一数据源。由于 onChange 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。<br>对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">//   myusername = React.createRef();</span><br>  state = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;默认值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.username&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            // input 值 赋值给 state 中的受控数据</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: event.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: &quot;&quot;,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info modern"><p>注意: 另一种说法（广义范围的说法），React 组件的数据渲染是否被调用者传递的 props 完全控制，控制则<br>为受控组件，否则非受控组件。</p></div><h2 id="3-受控组件和非受控组件区别"><a href="#3-受控组件和非受控组件区别" class="headerlink" title="3.受控组件和非受控组件区别"></a>3.受控组件和非受控组件区别</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><div class="tip sync"><p>1、在 React 中默认可以完成从 state 到表单 value 的动态绑定。<br>2、给 input 提供 onchange 事件，一旦检测到文本框内容有变化，马上执行 onchange 事件获取表单的内容。</p></div><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><div class="tip sync"><p>1、操作 DOM 获取到你要的数据，即通过 ref=”dom” 绑定 DOM 元素获取数据。<br>2、可以在构造函数里面定义一个变量 dom = React.createRef()，通过变量来创建组件引用，就可以获取到这个节点。<br>以上两条都是通过 DOM 节点获取数据，本质上是一样的</p></div>]]></content>
    
    
    <summary type="html">React数据加载和渲染：state数据渲染和注意事项，props的使用，state和props之间的区别，受控组件和非受控组件。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-了解React的基础语法</title>
    <link href="https://jsq180.github.io/posts/46f4fab.html"/>
    <id>https://jsq180.github.io/posts/46f4fab.html</id>
    <published>2022-08-28T20:48:49.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、认识-React-组件"><a href="#一、认识-React-组件" class="headerlink" title="一、认识 React 组件"></a>一、认识 React 组件</h1><h2 id="1-Class-组件"><a href="#1-Class-组件" class="headerlink" title="1.Class 组件"></a>1.Class 组件</h2><p>ES6 的加入让 JavaScript 直接支持使用 class 来定义一个类，react 创建组件的方式就是使用的类的继承，ES6 class 是目前官方推荐的使用方式，它使用了 ES6 标准语法来构建，看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>ES6 class 组件其实就是一个构造器,每次使用组件都相当于在实例化组件，像这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入&#123;this.props.name&#125;的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>&#125;).<span class="hljs-title function_">render</span>();<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(app, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2.函数式组件"></a>2.函数式组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>( <span class="hljs-comment">// React组件的调用方式</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) )<br></code></pre></td></tr></table></figure><p><strong>注意：不论是 class 组件还是函数式组件，组件名必须大写，否则报错。且每个组件有且只有一个根节点</strong></p><h2 id="3-组件的样式"><a href="#3-组件的样式" class="headerlink" title="3.组件的样式"></a>3.组件的样式</h2><ul><li>行内样式<br>想给虚拟 dom 添加行内样式，需要使用表达式传入样式对象的方式来实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> styles=&#123;<br>  <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&quot;20px&quot;</span>,<br>  <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;#000&quot;</span><br>&#125;<br><span class="hljs-comment">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，JS会把它当做一个逻辑进行处理，第二个是样式对象的括号</span><br>&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>行内样式需要写入一个样式对象，而这个样式对象的位置可以放在很多地方，例如 render 函数里、组件原型上、外链 js 文件中。</p><ul><li>使用 class<br>React 推荐我们使用行内样式，因为 React 觉得每一个组件都是一个独立的整体。<br>其实我们大多数情况下还是大量的在为元素添加类名，但是需要注意的是， <strong>class</strong> 需要写成 <strong>className</strong> （因为毕竟是在写类 js 代码，会受到 js 规则的限制，而 class 是关键字）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> ==&gt; className , <span class="hljs-keyword">for</span> ==&gt; <span class="hljs-title function_">htmlFor</span>(label)<br><span class="hljs-comment">/* htmlFor 即为 label 的 for 属性 */</span><br></code></pre></td></tr></table></figure><h2 id="4-组件嵌套"><a href="#4-组件嵌套" class="headerlink" title="4.组件嵌套"></a>4.组件嵌套</h2><h3 id="1-基础组件嵌套"><a href="#1-基础组件嵌套" class="headerlink" title="1.基础组件嵌套"></a>1.基础组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f1f600faea.png" alt="基础组件嵌套"></p><h3 id="2-多层组件嵌套"><a href="#2-多层组件嵌套" class="headerlink" title="2.多层组件嵌套"></a>2.多层组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">red</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        NavBar 组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 下的 Child 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f200ab8171.png" alt="多层组件嵌套"></p><h1 id="二、React-事件"><a href="#二、React-事件" class="headerlink" title="二、React 事件"></a>二、React 事件</h1><h2 id="1-事件绑定写法"><a href="#1-事件绑定写法" class="headerlink" title="1.事件绑定写法"></a>1.事件绑定写法</h2><p>采用 on+事件名的方式来绑定一个事件，注意，这里和原生的事件是有区别的，原生的事件全是小写 onclick , React 里的事件是驼峰 onClick ，<strong>React 的事件并不是原生事件，而是合成事件。</strong></p><h2 id="2-事件-handler-的写法"><a href="#2-事件-handler-的写法" class="headerlink" title="2.事件 handler 的写法"></a>2.事件 handler 的写法</h2><ul><li>直接在 render 里写行内的箭头函数(不推荐)</li><li>在组件内使用箭头函数定义一个方法(推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 render 里直接使用 onClick={this.handleClick.bind(this)} (不推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 constructor 里 bind(this)(推荐)<br><strong>个人最推荐的写法为 handleClick2 的方式，行内写方法，组件内将方法写成箭头函数的写法。若要传参，则采用 handleClick5 的写法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">/*  handleClick() &#123;</span><br><span class="hljs-comment">           console.log(this, &quot;click1&quot;);</span><br><span class="hljs-comment">       &#125; */</span><br>  handleClick2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click2&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">handleClick3</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click3&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick4</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click4&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click5&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不加小括号箭头函数，相当于自执行 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(&quot;click，仅限逻辑极少的情况&quot;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add1（行内箭头函数）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* handleClick 不加小括号，被动执行，点击之后触发。若加，则直接执行 */&#125;</span><br><span class="language-xml">        &#123;/* 若要传参，且不让他执行 则 onClick=&#123;()=&gt;&#123;this.handleClick(&quot;value&quot;)&#125;&#125; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>add2（函数箭头函数）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick3.bind(this)&#125;</span>&gt;</span></span><br><span class="language-xml">          add3（行内非箭头函数绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不绑定this ,this 为 undefined */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick4&#125;</span>&gt;</span></span><br><span class="language-xml">          add4（内非箭头函数不绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.handleClick5();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add5（行内箭头函数方法）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f24cdcc47f.png" alt="事件绑定方式"></p><h2 id="3-React-事件绑定原理"><a href="#3-React-事件绑定原理" class="headerlink" title="3.React 事件绑定原理"></a>3.React 事件绑定原理</h2><p>react 的事件绑定并非像原生事件一样，绑定在具体的 DOM 节点上，这样是非常消耗内存的。而是采用了<strong>事件代理</strong>的方案：<br>测试结果如下：</p><ul><li>在未移除 button 的 click 事件时，按钮点击正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f28b32ece4.png" alt="未移除时结果"></li><li>在移除 button 的 click 事件后，按钮依旧正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f29bc899d1.png" alt="移除后执行结果"></li><li>在移除 root 的 click 事件后，按钮无法操作<br><img src="https://s1.xptou.com/2022/08/31/630f2aaad0bb9.png" alt="移除 root 后执行结果"><br>由此推断：<br>react 的事件并非是由点击的 DOM 节点执行的，而是由 root 根节点 target 通过事件源找到真正触发的元素，然后从真实触发的元素依次向顶点查找有没有叫 onClick 的属性，如果有，就把该属性身上的事件执行。<br>因为事件代理的方式，在性能方面是更优的，因为不需要绑定到准确的 DOM 节点上，所以也不需要考虑解绑事件。</li></ul><h2 id="4-Event-对象"><a href="#4-Event-对象" class="headerlink" title="4.Event 对象"></a>4.Event 对象</h2><p>虽然 react 的事件机制与原生事件有所不同，但 event 事件对象却和原生的基本一致。<br>和普通浏览器一样，事件handler会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。<br>不同的是 React中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  handleClick2 = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, <span class="hljs-string">&quot;click&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：<br><img src="https://s1.xptou.com/2022/08/31/630f2d6eb5990.png" alt="打印结果"><br>和普通浏览器一样，事件 handler 会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。不同的是 React 中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><h1 id="三、Ref-的应用"><a href="#三、Ref-的应用" class="headerlink" title="三、Ref 的应用"></a>三、Ref 的应用</h1><ul><li>ref 字符串绑定（将要废弃）</li></ul><ul><li>给标签设置 ref=”ipt1”，通过这个获取 this.refs.ipt1 , ref 可以获取到应用的真实 dom</li></ul><ul><li>新的写法（推荐）</li></ul><ul><li>标签内设置 ipt2 = React.createRef(); 并通过 ref={this.ipt2} 进行 DOM 绑定，通过 this.ipt2.current 获取到真实 DOM</li><li>组件内设置 component = React.createRef(); 并通过 ref={this.component} 进行组件绑定，通过 this.component.current 可以获取到 组件内部的所有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// Input 组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  a = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Input组件---a=&#123;this.a&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  ipt2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  component = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut1&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut2&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Input组件&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>.<span class="hljs-property">a</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ipt1&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.ipt2&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.component&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f5645535ac.png" alt="ref写法"></p>]]></content>
    
    
    <summary type="html">React基础语法介绍：class组件、函数组件的写法及使用，React事件绑定及原理，ref的使用</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React入门篇-认识React</title>
    <link href="https://jsq180.github.io/posts/74b32545.html"/>
    <id>https://jsq180.github.io/posts/74b32545.html</id>
    <published>2022-08-26T16:47:36.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为《从零开始的 react 异世界生活》（误），主要介绍何为 React，以及创建 React 项目需要的环境等，认识 React 的基础框架。<br>PS：这是第一次尝试搭建个人博客，也是为了记录学习和工作上的各种问题，希望以后能够继续更新博客，既是对自己知识的巩固，也是一种记录。<br>首先，因工作上使用 React，所以这次也是从零开始，对 React 技术一种重温，同时对没有了解到的知识的学习。</p><h1 id="一、React-介绍"><a href="#一、React-介绍" class="headerlink" title="一、React 介绍"></a>一、React 介绍</h1><h2 id="1-React-起源与发展"><a href="#1-React-起源与发展" class="headerlink" title="1.React 起源与发展"></a>1.React 起源与发展</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在 2013 年 5 月开源了。</p><h2 id="2-React-与传统-MVC-的关系"><a href="#2-React-与传统-MVC-的关系" class="headerlink" title="2.React 与传统 MVC 的关系"></a>2.React 与传统 MVC 的关系</h2><p>轻量级的视图层库！A JavaScript library for building user interfaces</p><p>React 不是一个完整的 MVC 框架，最多可以认为是 MVC 中的 V（View），甚至 React 并不非常认可 MVC 开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><h2 id="3-React-的特性"><a href="#3-React-的特性" class="headerlink" title="3.React 的特性"></a>3.React 的特性</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05e2a28aa.png" alt="React特性"></p><h2 id="4-虚拟-DOM"><a href="#4-虚拟-DOM" class="headerlink" title="4.虚拟 DOM"></a>4.虚拟 DOM</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05c1543a8.png" alt="传统DOM更新"><br><img src="https://s1.xptou.com/2022/08/27/630a05926ad17.png" alt="虚拟DOM"></p><h1 id="二、创建脚手架"><a href="#二、创建脚手架" class="headerlink" title="二、创建脚手架"></a>二、创建脚手架</h1><h2 id="1-全局安装-create-react-app"><a href="#1-全局安装-create-react-app" class="headerlink" title="1.全局安装 create-react-app"></a>1.全局安装 create-react-app</h2><p>全局安装脚手架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install -g create-react-app<br></code></pre></td></tr></table></figure><p>安装完成，可以检查是否安装成功（检查版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app -V<br></code></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app your-app (your-app为自定义项目名称)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Creating a new React app in /dir/your-app. Installing packages. This might take a couple of minutes. 安装过程较慢，<br>Installing react, react-dom, and react-scripts...    (执行过程)<br></code></pre></td></tr></table></figure><h2 id="2-如果不想全局安装，可以直接使用-npx"><a href="#2-如果不想全局安装，可以直接使用-npx" class="headerlink" title="2.如果不想全局安装，可以直接使用 npx"></a>2.如果不想全局安装，可以直接使用 npx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npx create-react-app myapp 也可以实现相同的效果<br></code></pre></td></tr></table></figure><p>这需要等待一段时间，这个过程实际上会安装三个东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">•react: react的顶级库 •react-dom:<br>因为react有很多的运行环境，比如app端的•react-native,<br>我们要在web上运行就使用react-dom •react-scripts:<br>包含运行和打包react应用程序的所有脚本及配置<br></code></pre></td></tr></table></figure><h2 id="3-创建并启动项目"><a href="#3-创建并启动项目" class="headerlink" title="3.创建并启动项目"></a>3.创建并启动项目</h2><p>出现下面的界面，表示创建项目成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Success! Created your-app at /dir/your-app<br>Inside that directory, you can run several commands:<br><br>    npm start<br>        Starts the development server.<br><br>    npm run build<br>        Bundles the app into static files for production.<br><br>    npm test<br>        Starts the test runner.<br><br>    npm run eject<br>        Removes this tool and copies build dependencies, configuration files<br>        and scripts into the app directory. If you do this, you can’t go back!<br><br>We suggest that you begin by typing:<br><br>    cd your-app<br>    npm start<br><br>    Happy hacking!<br></code></pre></td></tr></table></figure><p>根据上面的提示，通过 cd your-app 命令进入目录并运行 npm start 即可运行项目。<br>生成项目的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">├── README.md 使用方法的文档<br>├── node_modules 所有的依赖安装的目录<br>├── package-lock.json 锁定安装时的包的版本号,保证团队的依赖能保证一致。<br>├── package.json<br>├── public 静态公共目录<br>├── src 开发用的源代码目录<br></code></pre></td></tr></table></figure><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h2><ul><li>npm 安装失败<ul><li>切换为 npm 镜像为淘宝镜像</li><li>使用 yarn，如果本来使用 yarn 还要失败，还得把 yarn 的源切换到国内</li><li>如果还没有办法解决，请删除 node_modules 及 package-lock.json 然后重新执行 npm install 命令</li><li>再不能解决就删除 node_modules 及 package-lock.json 的同时清除 npm 缓存 npm cache clean —force 之后再执行 npm install 命令</li></ul></li><li>拓展：<br>仓库包管理工具：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i -g nrm    安装<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">nrm ls          查看<br></code></pre></td></tr></table></figure>查看执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/6309fe5a0dae7.png" alt="nrm ls查看"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">nrm use yarn    切换镜像源<br></code></pre></td></tr></table></figure>切换镜像源执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/630a01fddb1da.png" alt="nrm use yarn切换查看"></li></ul><h1 id="三、编写第一个-react-应用程序"><a href="#三、编写第一个-react-应用程序" class="headerlink" title="三、编写第一个 react 应用程序"></a>三、编写第一个 react 应用程序</h1><p>react 开发需要引入多个依赖文件：react.js、react-dom.js，分别又有开发版本和生产版本。<br>create react-app 里已经帮我们把这些东西都安装好了。把通过 CRA 创建的工程目录下的 src 目录清空，然后在里面重新创建一个 index.js。index.js 即为入口文件，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有 一种语法叫JSX，要写JSX，就必须引入React</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中 引入的，而不是从 react 引入。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-comment">// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的 元素上</span><br><span class="hljs-comment">// 此版本是 react 17 版本，18版本不支持这种写法</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="hljs-comment">// html语法</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div_h1&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-comment">// 渲染到 节点Id 为 root 的DOM元素下面</span><br>);<br><br>**注意：**<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span> 目前有助于：</span><br><span class="language-xml">识别不安全的生命周期</span><br><span class="language-xml">关于使用过时字符串 ref API 的警告</span><br><span class="language-xml">检测意外的副作用</span><br><span class="language-xml">检测过时的 context API</span><br><span class="language-xml">写法：</span><br><span class="language-xml"></span><br><span class="language-xml">```js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="四、JSX-语法与组件"><a href="#四、JSX-语法与组件" class="headerlink" title="四、JSX 语法与组件"></a>四、JSX 语法与组件</h1><h2 id="1-JSX-语法"><a href="#1-JSX-语法" class="headerlink" title="1.JSX 语法"></a>1.JSX 语法</h2><p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。<br>在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。 编译过程由 Babel 的 JSX 编译器实现。<br><a href="https://reactjs.org/docs/hello-world.html">官方示例链接</a>✔</p><p>原理是什么呢？</p><p>要明白 JSX 的原理，需要先明白如何用 JavaScript 对象来表现一个 DOM 元素的结构?<br>看下面的 DOM 结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;app&quot;</span> id=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个帮助你构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;appRoot&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;title&#x27;</span>&#125;,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;欢迎进入React的世界&#x27;</span> ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;React.js 是一个构建页面 UI 的库&#x27;</span>]<br>    &#125;<br>    ]<br> &#125;<br></code></pre></td></tr></table></figure><p>但是用 JavaScript 写起来太长了，结构看起来又不清晰，用 HTML 的方式写起来就方便很多了。</p><p>于是 React.js 就把 JavaScript 的语法扩展了一下，让 JavaScript 语言能够支持这种直接在 JavaScript 代码里面编写类似 HTML 标签结构的语法，这样写起来就方便很多了。编译的过程会把类似 HTML 的 JSX 结构转换成 JavaScript 的对象结构。</p><p>下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p>编译之后将得到这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>      <span class="hljs-string">&quot;div&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;appRoot&quot;</span>,<br>      &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;h1&quot;</span>,<br>        &#123;<br>          <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;欢迎进入React的世界&quot;</span><br>      ),<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;React.js 是一个构建页面 UI 的库&quot;</span>)<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>React.createElement</strong> 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等, 语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这种写法在获取DOM节点的时候可以看到</span><br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(type, [props], [...children]);<br></code></pre></td></tr></table></figure><p>所谓的 JSX 其实就是 JavaScript 对象，所以使用 React 和 JSX 的时候一定要经过编译的过程:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">JSX —使用react构造组件， bable进行编译—&gt; JavaScript对象 — ReactDOM.render() —&gt;<br>DOM元素 —&gt; 插入页面<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">React入门介绍：环境安装及创建项目</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React学习" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
