<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JSQのBlog</title>
  
  <subtitle>知识小站</subtitle>
  <link href="https://jsq180.github.io/atom.xml" rel="self"/>
  
  <link href="https://jsq180.github.io/"/>
  <updated>2022-09-18T10:22:14.626Z</updated>
  <id>https://jsq180.github.io/</id>
  
  <author>
    <name>JSQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>useCallback和useMemo的使用指南</title>
    <link href="https://jsq180.github.io/posts/cf797f35.html"/>
    <id>https://jsq180.github.io/posts/cf797f35.html</id>
    <published>2022-09-17T23:15:56.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>在上个章节：认识 Hooks 中，useCallback 和 useMemo 的相似度很高，例子使用较为模糊，故单设一个章节，来记录 useCallback 和 useMemo 的使用和区别。<br><a href="https://blog.csdn.net/sinat_17775997/article/details/94453167">文章参考链接 1</a><br><a href="https://blog.csdn.net/qq_35770417/article/details/110000491">文章参考链接 2</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在介绍一下这两个 hooks 的作用之前，我们先来回顾一下 react 中的性能优化。在 hooks 诞生之前，如果组件包含内部 state，我们都是基于 class 的形式来创建组件。当时我们也知道，react 中，性能的优化点在于：<br>1、调用 setState，就会触发组件的重新渲染，无论前后的 state 是否不同<br>2、父组件更新，子组件也会自动的更新</p><p>基于上面的两点，我们通常的解决方案是：<br>1、使用 immutable 进行比较，在不相等的时候调用 setState；（immutable.js 不作为讲解点）<br>2、在 shouldComponentUpdate 中判断前后的 props 和 state，如果没有变化，则返回 false 来阻止更新。</p><p>在 hooks 出来之后，我们能够使用 function 的形式来创建包含内部 state 的组件。<br>但是，使用 function 的形式，失去了上面的 shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。<br>而且，在函数组件中，react 不再区分 mount 和 update 两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此 <strong>useMemo</strong> 和 <strong>useCallback</strong> 就是解决性能问题的杀手锏。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>根据 React 官网示例代码：<br>useMemo：<code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code> 返回一个 memoized 值。<br>useCallback：<code>const memoizedCallback = useCallback(() =&gt; &#123; doSomething(a, b); &#125;, [a, b],);</code> 返回一个 memoized 回调函数。</p><p>useCallback 和 useMemo 的参数跟 useEffect 一致，他们之间最大的区别有是 useEffect 会用于处理副作用，而前两个 hooks 不能。<br>useMemo 和 useCallback 都会在组件第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行；<br>并且这两个 hooks 都返回缓存的值，useMemo 返回<strong>缓存的变量</strong>，useCallback 返回<strong>缓存的函数</strong>。</p><h1 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h1><p>在使用之前，先看一个反例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">WithoutMemo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [val, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">expensive</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;compute&quot;</span>);<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count * <span class="hljs-number">100</span>; i++) &#123;<br>      sum += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        count:&#123;count&#125;--val:&#123;val&#125;--sum:&#123;expensive()&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;count+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;val&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这里创建了两个 state，然后通过 expensive 函数，执行一次昂贵的计算，拿到 count 对应的某个值。<br>以上代码分析：</p><ul><li>expensive 函数只与 count 的变化有关，当 count 变化的时候执行一次昂贵的计算，打印了 “compute”，这没什么问题。</li><li>输入框 val 值，当进行输入框输入的时候，触发了 expensive 函数的执行(能够在控制台看到，即使修改 val，也会打印 “compute”)，这是为什么呢？<ul><li><strong>原因</strong>：val 值改变，视图重新渲染，整个组件会再次执行，expensive 函数再次被注册执行，但 expensive 函数与 val 毫无关系，在 val 修改的时候，是没有必要再次计算的。</li><li><strong>解决方法</strong>：在这种情况下，使用 useMemo，只在 count 的值修改时，执行 expensive 计算：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">WithoutMemo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [val, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> expensive = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;compute&quot;</span>);<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count * <span class="hljs-number">100</span>; i++) &#123;<br>      sum += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>  &#125;, [count]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        count:&#123;count&#125;--val:&#123;val&#125;--sum:&#123;expensive&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;count+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;val&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> setValue(event.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面我们可以看到，使用 useMemo 来执行昂贵的计算，然后将计算值返回，并且将 count 作为依赖值传递进去。<br>这样，就只会在 count 改变的时候触发 expensive 执行，在修改 val 的时候，返回上一次缓存的值。</p><p><strong>也就是说 useMemo 可以让函数在某个依赖项改变的时候才运行，这可以避免很多额外的开销。</strong><br><strong>useMemo 缓存的结果是回调函数中 return 回来的值，主要用于缓存计算结果的值，应用场景如需要计算的状态</strong></p><h1 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h1><p>讲完了 useMemo，接下来是 useCallback。useCallback 跟 useMemo 比较类似，但它返回的是缓存的函数。我们看一下最简单的用法：</p><p><code>const fnA = useCallback(fnB, [a])</code></p><p>上面的 useCallback 会将我们传递给它的函数 fnB 返回，并且将这个结果缓存；<br>当依赖 a 变更时，会返回新的函数。既然返回的是函数，我们无法很好的判断返回的函数是否变更，所以我们可以借助 ES6 新增的数据类型 Set 来判断，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Callback</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [val, setVal] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>  &#125;, [count]);<br>  set.<span class="hljs-title function_">add</span>(callback);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>count：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>set.size：&#123;set.size&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;count+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;val&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> setVal(event.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，每次修改 count，set.size 就会增加，这说明 useCallback 依赖变量 count，count 变更时会返回新的函数；<br>而 val 变更时，set.size 不会变，说明返回的是缓存的旧版本函数。</p><p>知道 useCallback 有什么样的特点，那有什么作用呢？</p><p>例子 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, memo, useEffect, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">let</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setList</span>([<span class="hljs-string">&quot;6点起床&quot;</span>, <span class="hljs-string">&quot;7点上班&quot;</span>, <span class="hljs-string">&quot;8点早会&quot;</span>]);<br>  &#125;, []);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * useCallback的第一个参数称为&quot;内联回调函数&quot;，第二个参数称为&quot;依赖项&quot;数组。</span><br><span class="hljs-comment">   * 返回的函数被称为 memoized 回调函数，该回调函数仅在某个依赖项改变时才会更新。</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 在子组件里面调用了useCallback返回的addI这个方法后，会执行内联回调函数；</span><br><span class="hljs-comment">   * 然后setState，整个组件更新，addI方法也会相应的更新。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> addI = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    list.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;行程 &quot;</span> + count++);<br>    <span class="hljs-title function_">setList</span>([...list]);<br>  &#125;, [list]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">modifyName</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;路人&quot;</span> + ++count);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      &#123;list.map((item, index) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> <span class="hljs-attr">addItem</span>=<span class="hljs-string">&#123;addI&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ListItem</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">      现在的名字： &#123;name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;modifyName&#125;</span>&gt;</span> 点击修改名字 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ListItem</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> addItem = props.<span class="hljs-property">addItem</span>;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件ListItem 加载&quot;</span>);<br>  &#125;, []);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件render&quot;</span>);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addItem&#125;</span>&gt;</span> &#123;props.children&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">List</span>;<br></code></pre></td></tr></table></figure><p>正常情况下：</p><ul><li>addI 增加 list，modifyName 改变名字。如果 addI 不使用 useCallback 函数，纵然 modifyName 与 addI 之间毫无关系，当 modifyName 更改 name 时，addI 也会执行一次。</li><li>此时 addI 使用 useCallback，而 useCallback 返回的是一个 回调函数，此时又把 addI 传给 ListItem ，即将一个 function 函数传递给 子组件。</li><li>若子组件 不使用 memo 进行包裹，那么，每改变一次 name，子组件中的 render 就会调用一次。<ul><li>name 改变，页面重新加载，子组件重新渲染，但是 子组件的 function 函数 是依赖于父组件的 list，name 改变，子组件就渲染，但是状态和之前的一样，拜拜渲染，岂不是浪费性能？</li><li>子组件的 props 中的 function 函数是依赖于 父组件的 list，父组件使用了 useCallback，依赖项 list 不改变不执行，那么子组件要怎么做，才能和父组件的一样，list 不改变，子组件也不重新渲染呢？</li></ul></li><li>此时就可以使用 memo 进行包裹。<ul><li>React.memo 的作用和 React.PureComponent 非常相似，都是过记忆上一次组件的结果，再通过对比判断是否该更新执行 render。</li><li>其实两者的作用就是和 类组件中的 shouldComponent 差不多。PureComponent 是在 class 组件中使用，现在的 memo 是让函数式组件可以实现相同效果。</li></ul></li></ul><!-- **子组件不使用 memo，同样使用 useCallback，监听 回调函数来判断是否render可以吗？**答案是：可以的```js``` --><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><div class="note info simple"><ul><li>useMemo 缓存的结果是回调函数中 return 回来的值，主要用于缓存计算结果的值，应用场景如需要计算的状态</li><li>useCallback 缓存的结果是函数，主要用于缓存函数，应用场景如需要缓存的函数，因为函数式组件每次任何一个 state 发生变化，会触发整个组件更新，一些函数是没有必要更新的，此时就应该缓存起来，提高性能，减少对资源的浪费。</li><li>另外还需要注意的是，useCallback 应该和 React.memo 配套使用，缺了一个都可能导致性能不升反而下降。</li></ul></div>]]></content>
    
    
    <summary type="html">针对 useCallback 和 useMemo 的使用进行进一步详解和区分。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-认识React Hooks（1）</title>
    <link href="https://jsq180.github.io/posts/e3a9606a.html"/>
    <id>https://jsq180.github.io/posts/e3a9606a.html</id>
    <published>2022-09-16T21:53:45.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>为什么使用 Hooks？<br>1、高阶组件为了复用性，导致代码层级复杂。<br>2、生命周期的复杂。<br>3、写成 function 组件，无状态组件，因为又需要状态，又改成 class 成本较高。</p><h1 id="useState-保存组件状态"><a href="#useState-保存组件状态" class="headerlink" title="useState(保存组件状态)"></a>useState(保存组件状态)</h1><p>useState 相当于 在 state 中定义变量 和 this.setState({修改当前变量}) 的集合<br><strong><code>const [state, setstate] = useState(initialState)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用方法</span><br>  <span class="hljs-comment">// name 相当于 state 中的变量，setName 相当于 this.setState(&#123;name:...&#125;)</span><br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值1&quot;</span>);<br><br>  <span class="hljs-comment">//可以查看 obj 究竟是什么</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值2&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-comment">//  [&#x27;初始值2&#x27;, ƒ]</span><br><br>  <span class="hljs-keyword">const</span> [age, setAge] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">18</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 通过 setName 改变 name 的值；通过 setAge 改变 age 的值 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;改变值1&quot;);</span><br><span class="language-xml">          setAge(16);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        点击</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> &#123;name&#125;-&#123;age&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useState 是什么？</strong><br><img src="https://s1.imagehub.cc/images/2022/09/16/Snipaste_2022-09-16_22-22-38.png" alt="useState打印结果"><br><div class="note info simple"><p>由上图可知：<br>useState 的打印结果是一个数组，第 0 项是设置的初始值，第一项是 function 函数。<br>所以 <code>[name,setname] = useName(&#39;初始值&#39;)</code>，相当于数组的解构赋值：<code>const name = &quot;初始值&quot;，const setName = function 函数</code></p></div></p><h1 id="useEffect-处理副作用"><a href="#useEffect-处理副作用" class="headerlink" title="useEffect(处理副作用)"></a>useEffect(处理副作用)</h1><p>useEffect(回调函数，依赖的状态)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//effect</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//cleanup</span><br>    &#125;;<br>&#125;, [依赖的状态;空数组,表示不依赖])<br></code></pre></td></tr></table></figure><p>不要对 Dependencies 撒谎, 如果你明明使用了某个变量，却没有申明在依赖中，你等于向 React 撒了谎。<br>后果就是，当依赖的变量改变时，useEffect 也不会再次执行, eslint 会报警告</p><p><strong>useEffect 没有依赖的情况下，可以传空数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-comment">// 不能直接在 function 中进行 axios 请求，会一直请求，造成死循环</span><br><br>  <span class="hljs-comment">// 使用 useEffect，执行一次</span><br>  <span class="hljs-comment">// useEffect 传递两个参数，第一个参数必须是 回调函数，</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/text.json&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-title function_">setList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []); <span class="hljs-comment">// 如果传空数组，该回调函数就仅仅会执行一次</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map((item) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useEffect 内部有依赖的变量，但没有在第二个参数中传入该依赖的变量：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;APPLE&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 大写转小写</span><br>    <span class="hljs-keyword">let</span> a = name.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-title function_">setName</span>(a);<br>  &#125;, [name]); <span class="hljs-comment">// 第一次执行一次，之后依赖的参数更新，useEffect也会再次执行</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      name-&#123;name&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;BANANER&quot;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/17/63257b7e6faf6.png" alt="useEffect使用变量操作但不依赖"><br>vscode 语法也会进行提示：<br><img src="https://s1.xptou.com/2022/09/17/63257c5aa2caa.png" alt="vscode警告提示"><br>以上警告翻译过来就是：React Hook useEffect 缺少一个依赖项:’name’。包括它或删除依赖数组</p><p><strong>适用场景举例如下：</strong><br>页面的数据，由按钮组件点击下一页，从 id=1 切换到 id=2，id 改变，执行参数 id 相关依赖的 useEffect 获取最新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> id = props.<span class="hljs-property">myid</span>;<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/articles/<span class="hljs-subst">$&#123;id&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">settitle</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>    <span class="hljs-title function_">setcontent</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">content</span>);<br>    <span class="hljs-title function_">setcategory</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">category</span>);<br>  &#125;);<br>&#125;, [id]);<br></code></pre></td></tr></table></figure><p><strong>Hooks 没有生命周期，那么当组件销毁时，内部的计时器，监听器等如何移除？</strong><br>怎么在 useEffect 中销毁 监听和计时器<br>写法：在 useEffect 内部进行 return function(){}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              isCreated: !this.state.isCreated,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          销毁Child组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Child 子组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 注册 resize 监听</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-comment">// 注册 计时器</span><br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件销毁&quot;</span>);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-comment">// 这个 useEffect 如果内部写成 rentun 的格式，则在加载阶段，log不会打印，销毁阶段打印</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// return ()=&gt;&#123;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个useEffect&quot;</span>);<br>    <span class="hljs-comment">// &#125;</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>useEffect 中销毁组件解除监听：<br><img src="https://s1.xptou.com/2022/09/17/632586b2404ca.png" alt="useEffect中销毁组件解除监听"><br>为什么写成 return function 的格式<br><img src="https://s1.xptou.com/2022/09/17/632589392b470.png" alt="useEffect内部写成回调函数原理"></p><div class="note info modern"><p>综上所述：<br>useEffect 可以模拟 Class 组件的 加载、更新和销毁阶段</p></div><div class="note warning modern"><p>警告：<br>在 useEffect 作为销毁阶段时，依赖项<strong>必须为空数组</strong></p></div><h1 id="useLayoutEffect-同步执行处理副作用-与-useEffect-的区别"><a href="#useLayoutEffect-同步执行处理副作用-与-useEffect-的区别" class="headerlink" title="useLayoutEffect(同步执行处理副作用)与 useEffect 的区别"></a>useLayoutEffect(同步执行处理副作用)与 useEffect 的区别</h1><p><strong>官方建议使用 useEffect</strong><br>两者的执行时机不同：</p><ul><li>useEffect 是会在整个页面渲染完才会调用的代码。</li><li>useLayoutEffect 和原来 componentDidMount &amp; componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。<br>官方建议优先使用 useEffect<br><img src="https://s1.xptou.com/2022/09/17/632596f70dfa9.png" alt="执行时机不同"><div class="note info modern"><p>在实际使用时如果想避免页面抖动（在 useEffect 里修改 DOM 很有可能出现）的话，可以把需要操作 DOM 的代码放在 useLayoutEffect 里。<br>在这里做点 dom 操作，这些 dom 修改会和 react 做出的更改一起被一次性渲染到屏幕上，只有一次回流、重绘的代价。<br>即若要在渲染阶段操作 DOM，建议使用 useLayoutEffect</p></div></li></ul><h1 id="useCallback-记忆函数"><a href="#useCallback-记忆函数" class="headerlink" title="useCallback(记忆函数)"></a>useCallback(记忆函数)</h1><p>在讲什么是 记忆函数之前，先实现一个功能：计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">//   useState 本身就属于记忆函数，记住状态</span><br>  <span class="hljs-keyword">var</span> mycount = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(count + 1); //状态改变，整个函数重新执行</span><br><span class="language-xml">          mycount++;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;--&#123;mycount&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，点击 add，count+1，count 会一直点一直加，但 mycount 一直都是 0，因为 每点击一次，useState 就会把 count 的数值进行记忆保存，下次执行就会+1 之后的数据。所以才称 useState 也是属于记忆函数。<br>而 mycount 没有任何保存的方式，每点击一次，App 函数会从上至下执行一遍。此时，虽然点击之后让 mycount+1，但是由于 App 函数重新执行，同时 mycount 变量无法被保存状态，导致 mycount 又一次被重置为 0，所以 mycount 一直为 0。<br><p class='p red'>如果 App 内部有很多 点击事件，在 点击某个按钮，更改状态之后，App 组件重新从上至下执行，这些 点击事件会再次被注册，在性能方面不好。但是我们又无法阻止，因为 App 组件的状态更改，就是要重新渲染，而由此出现的解决方案，就是 useCallback 函数</p></p><div class="note danger simple"><p>而 useCallback 就是防止因为组件重新渲染，导致方法被重新创建 ，起到缓存作用; 只有第二个参数（依赖项） 变化了，才重新声明一次</p></div><p><strong>那么怎么将 mycount 记忆状态呢？</strong><br>基本写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;, [name]);<br><span class="hljs-comment">//只有name改变后， 这个函数才会重新声明一次，</span><br><span class="hljs-comment">//如果传入空数组， 那么就是第一次创建后就被缓存， 如果name后期改变了,拿到的还是老的name。</span><br><span class="hljs-comment">//如果不传第二个参数，每次都会重新声明一次，拿到的就是最新的name.</span><br></code></pre></td></tr></table></figure><p>useCallback 使用注意事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 原本的正常写法</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-comment">// 进行 useCallback 包裹，后续重新渲染不会被重新注册</span><br>  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 1、如果不写依赖，定义为空数组，那么无论点击多少次，count永远为 10，因为缓存的初始状态就是 0, 0 + 10 一直都是 10</span><br>      <span class="hljs-comment">// 2、如果写了依赖，那么缓存的就是上一次的 count 值</span><br>      <span class="hljs-comment">// 3、如果不想麻烦，就不要写 第二个参数，空数组都不要写，这样 useCallback 自动缓存的就是上一次的最新状态</span><br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>    &#125;,<br>    [count] <span class="hljs-comment">// 如果内部使用了状态，要么写依赖项，要么直接不写第二个参数</span><br>    <span class="hljs-comment">/* 如果函数内部使用了 状态 或者其它的数据而没有进行依赖，传了一个空数组</span><br><span class="hljs-comment">      那么 useCallback 缓存的永远是 初始状态，因为没人告诉它需要缓存的 状态 是什么</span><br><span class="hljs-comment">      跟 useEffect 的第二个参数的作用 基本一样</span><br><span class="hljs-comment">      */</span><br><br>    <span class="hljs-comment">// 这样不写的第二个参数，拿到的依然是最新状态，跟写了 依赖项 的作用是一毛一样的</span><br>    <span class="hljs-comment">/* () =&gt; &#123;</span><br><span class="hljs-comment">      setCount(count + 10);</span><br><span class="hljs-comment">    &#125;, */</span><br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleChange&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useMemo-记忆组件"><a href="#useMemo-记忆组件" class="headerlink" title="useMemo 记忆组件"></a>useMemo 记忆组件</h1><p>useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的（类似于 Vue 中的 computed）<br><code>useCallback(fn,inputs) is equivalent to useMemo(()=&gt;fn,inputs)</code></p><p>写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// useCallback 写法</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>&#125;, [count]);<br><br><span class="hljs-comment">// useMemo</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useMemo</span>(<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>  &#125;,<br>  [count]<br>);<br><br><span class="hljs-comment">// 以上两个 虽然写法不同，但属于 等于 关系</span><br></code></pre></td></tr></table></figure><div class="note success simple"><p>唯一的区别是：<br>useCallback 不会执行第一个参数函数，而是将它返回给你，<br>而 useMemo 会执行第一个函数并且将函数执行结果返回给你。<br>所以在前面的例子中，可以返回 handleChange 来达到存储函数的目的。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// const [searchVal, setsearchVal] = useState(&#x27;&#x27;)</span><br>  <span class="hljs-keyword">const</span> [videoList, setvideoList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [searchVal, setsearchVal] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [searchList, setsearchList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res.data.watching);</span><br>      <span class="hljs-title function_">setvideoList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>      <span class="hljs-title function_">setsearchList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">searchIpt</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setsearchVal</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-comment">// searchTitle(e.target.value)</span><br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 正常思路：</span><br><span class="hljs-comment">   * 1、定义一个搜索结果变量 searchList，搜索时，拷贝一份完整的 videoList</span><br><span class="hljs-comment">   * 2、根据搜索内容 searchVal ，检索出符合条件的数据:[.....]</span><br><span class="hljs-comment">   * 3、将数据赋值给 搜索结果数组 searchList，并且，在页面渲染时，就需要将 searchList 赋值：res.data.watching，map循环的也是 searchList</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 普通思路写法：</span><br>  <span class="hljs-comment">/*   const searchTitle = (searchVal) =&gt; &#123;</span><br><span class="hljs-comment">    // 搜索结果</span><br><span class="hljs-comment">    let searchList = videoList.filter((item) =&gt; &#123;</span><br><span class="hljs-comment">      return item.title.includes(searchVal.toUpperCase()) || item.title.includes(searchVal.toLowerCase())</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">    // 赋值</span><br><span class="hljs-comment">    setsearchList(searchList)</span><br><span class="hljs-comment">    console.log(searchList);</span><br><span class="hljs-comment">  &#125; */</span><br><br>  <span class="hljs-comment">// 返回的就是一个数组，当搜索内容（依赖）变化的时候，直接执行该 函数</span><br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;searchIpt&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入搜索关键词&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>动漫列表<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;searchTitle /* searchList */</span><br><span class="language-xml">        .map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useCallback-和-useMemo-的使用区别"><a href="#useCallback-和-useMemo-的使用区别" class="headerlink" title="useCallback 和 useMemo 的使用区别"></a>useCallback 和 useMemo 的使用区别</h1><p>单独开一篇文章：<a href="/posts/cf797f35.html" title="useCallback和useMemo的使用指南">useCallback和useMemo的使用指南</a></p><h1 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h1>]]></content>
    
    
    <summary type="html">对React Hooks即函数组件进行基础的认识和使用。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期简括及简单性能优化</title>
    <link href="https://jsq180.github.io/posts/f56cbe58.html"/>
    <id>https://jsq180.github.io/posts/f56cbe58.html</id>
    <published>2022-09-15T22:16:19.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>结合之前文章的生命周期，将父子组件挂载即更新时，生命周期的执行顺序进行了简单的罗列，并简述 React 中基础的性能优化</p><h1 id="一、生命周期概括"><a href="#一、生命周期概括" class="headerlink" title="一、生命周期概括"></a>一、生命周期概括</h1><h2 id="1、老生命周期"><a href="#1、老生命周期" class="headerlink" title="1、老生命周期"></a>1、老生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextProps</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillReceiveProps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233a7a2254b.png" alt="父子组件老生命周期打印顺序"></p><h2 id="2、新生命周期"><a href="#2、新生命周期" class="headerlink" title="2、新生命周期"></a>2、新生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-comment">// getSnapshotBeforeUpdate 必须 return</span><br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233cfe7a86e.png" alt="父子组件新生命周期打印顺序"></p><div class="note warning simple"><ul><li>componentWillReceiveProps 不能和 static getDerivedStateFormPorps 一起使用</li><li>getSnapshotBeforeUpdate 不能和 shouldComponentUpdate 一起使用</li></ul></div><h1 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h1><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><div class="note info simple"><p>控制组件自身或者子组件是否需要更新，尤其在子组件非常多的情况下， 需要进行优化。</p></div><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><div class="note info simple"><p>PureComponent 会帮你 比较新 props 跟 旧的 props， 新的 state 和老的 state（值相等,或者对象含有相同的属性、且属性值相等 ），决定 shouldcomponentUpdate 返回 true 或者 false， 从而决定要不要呼叫 render function。</p></div><p>注意：<br><div class="note warning modern"><p>如果你的 state 或 props 『永远都会变』，那 PureComponent 并不会比较快，因为 shallowEqual 也需要花时间。</p></div></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">/*   shouldComponentUpdate(nextprops, nextState) &#123;</span><br><span class="hljs-comment">    // JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br><span class="hljs-comment">    //   老状态!==新状态，更新</span><br><span class="hljs-comment">    if (this.state.myname !== nextState.myname) return true;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    if (this.state.myname === nextState.myname) return false;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    // 应该更新/阻止更新</span><br><span class="hljs-comment">  &#125; */</span><br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span>data：&#123;this.state.data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对之前生命周期进行一个简要的概括，并列举React的简单性能优化。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期</title>
    <link href="https://jsq180.github.io/posts/1431380e.html"/>
    <id>https://jsq180.github.io/posts/1431380e.html</id>
    <published>2022-09-12T17:15:24.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期，顾名思义，和人从出生到死亡的过程是相似的。即作为一个页面，从页面加载到执行操作再到销毁的过程。</p><h1 id="老生命周期"><a href="#老生命周期" class="headerlink" title="老生命周期"></a>老生命周期</h1><h2 id="一、初始化阶段"><a href="#一、初始化阶段" class="headerlink" title="一、初始化阶段"></a>一、初始化阶段</h2><ul><li>componentWillMount：主要用于数据初始化，（已移除，不推荐使用）<ul><li>是 render 之前最后一次修改状态的机会</li></ul></li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出</li></ul></li><li>componentDidMount：成功 render 并渲染完成真实 DOM 后触发。<ul><li>多用于数据请求 axios。</li><li>函数的调用</li><li>基于创建完成的 DOM 进行初始化（比如设置 span 标签的 color）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;初始的佩奇&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">//   初始化数据的作用</span><br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillMount，DOM即将挂载，初始化数据，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;修改的野猪&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">//   数据请求、订阅发布函数的调用、setInterval、基于创建完DOM进行初始化</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// axios(&#123;.....&#125;)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidMount，DOM已经渲染完毕，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render，正在挂载渲染...&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面初始化过程打印如下：<br><img src="https://s1.xptou.com/2022/09/12/631f04bd85560.png" alt="页面初始化阶段加载过程"><br><div class="note danger modern"><p>此时控制台有警告，大致意思就是 使用 componentWillMount 可能会产生一些问题，推荐使用 componentDidMount 或者在 constructor 中执行这些逻辑。<br>原因是 ：<br>componentWillMount 是 React16（准确是 16.2） 版本之前的，而目前已是 React17（本人用的 17，此时 18 已在 22 年 3 月 29 日正式发布）。<br>在 16.2 版本之后，推出了新的生命周期，React 在 Diff 算法上出现了一定程度的更改，更加优化性能，提出了 Fiber 技术。<br>技术原因：</p><ul><li>传统的 React 在创建状态、创建新的 VDOM 时，会进行对比旧的 VDOM，这个过程是同步的，数据量小没有影响，数据量过于庞大，就会一直在进行 VDOM 对比，可能会使浏览器进入假死状态，而 React 的 Fiber 技术就是来优化这种情况下的 Diff 算法。</li><li>Fiber 把组件创建 DOM、组件渲染拆分成无数个小的 分片 任务执行，这时，如果有优先级较高的任务，就先执行优先级较高的任务。如果正在执行优先级较低的任务时，优先级较高的任务插入，就打断优先级较低的任务，执行优先级较高的任务。</li><li>在高优先级任务执行时，打断低优先级任务。 如在 WillMount 中，正去找哪些节点将要去挂载到页面中，此时 高优先级任务 ，如 render、DidMount 等，就会打断 WillMount 的寻找过程。打断之后不会保存，只会在高优先级任务执行完毕之后再重新寻找。这样就可能造成<strong>诸如 WillMount 此类的生命周期多次触发</strong>。</li><li>在以上出现的问题基础上，16.2 之后采用异步渲染，推出了新的生命周期。<br>解决方法：根据警告提示，将已过时的生命周期加上 UNSAFE_ 。如 UNSAFE_componentWillMount。</li></ul></div></p><h2 id="二、运行中阶段（更新阶段）"><a href="#二、运行中阶段（更新阶段）" class="headerlink" title="二、运行中阶段（更新阶段）"></a>二、运行中阶段（更新阶段）</h2><ul><li>componentWillReceiveProps：父组件修改属性触发。（已移除，不推荐使用）<ul><li>父组件中的属性作为 props 传递给子组件，此时修改 props 中的某个属性，会触发 子组件中的该生命周期</li></ul></li><li>shouldComponentUpdate：返回 false 会阻止 render 调用，阻止更新。</li><li>compoentWillUpdate：数据将要更新还未更新时。（已移除，不推荐使用）</li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出。</li></ul></li><li>componentDidUpdate：可以修改 DOM。</li></ul><h3 id="1、componentWillUpdate、render、componentDidMount"><a href="#1、componentWillUpdate、render、componentDidMount" class="headerlink" title="1、componentWillUpdate、render、componentDidMount"></a>1、componentWillUpdate、render、componentDidMount</h3><p><strong>componentWillUpdate：</strong></p><ul><li>在此生命周期内部访问到的属性和 DOM 元素都是旧的，因为此时处于将要更新，还未更新的状态，一切数据都是旧的。</li><li>componentWillUpdate(nextProps,nextState)，该生命周期可以接收两个参数。nextProps：即将更新的 props，nextState：即将更新的 state。<br><strong>componentDidUpdate：</strong></li><li>此时的数据和 DOM 都已更新完毕，推荐在此生命周期内获取/操作 DOM。</li><li>componentDidUpdate(prevProps,prevState)，该生命周期可以接收两个参数。prevProps：更新前的旧 props，prevState：更新钱的旧 state。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>    <span class="hljs-attr">filmList</span>: [],<br>  &#125;;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 加载获取数据</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">filmList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 在 DidMount 中，filmList 由 [] 变成有数据，所以在初始化阶段就会触发 WillUpdate、DidUpdate</span><br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      nextProps,<br>      nextState<br>    );<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      prevProps,<br>      prevState<br>    );<br><br>    <span class="hljs-comment">// 在内部可以做一些判断，比如：</span><br>    <span class="hljs-keyword">if</span> (prevState.<span class="hljs-property">filmList</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 创建 DOM，否则的话旧不需要再次创建，因为该 DOM 已经存在</span><br>    &#125;<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.filmList.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如图所示<br><img src="https://s1.xptou.com/2022/09/13/632089629d744.png" alt="WillUpdate和DidUpdate执行"><br><div class="tip error"><p>切忌在 WillUpdate 或 DidUpdate 等更新阶段的生命周期内部更改数据，会造成死循环，更新阶段触发更新就会再次执行该生命周期</p></div></p><h3 id="2、shouldComponentUpdate"><a href="#2、shouldComponentUpdate" class="headerlink" title="2、shouldComponentUpdate"></a>2、shouldComponentUpdate</h3><p>该生命周期是判断 是否触发更新阶段，返回 false 不更新，返回 true 更新。<br>shouldComponentUpdate(nextProps, nextState)，接收两个参数，和 WillUpdate 类似。nextProps：即将更新的 props，nextState：即将更新的 state。<br>在 shouldComponentUpdate 内部访问的数据依旧是原来的，因为该阶段是更新阶段首个触发的，用于判断是否进行后续的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// scu</span><br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br>    <span class="hljs-comment">//   老状态!==新状态，更新</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> !== nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> === nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 应该更新/阻止更新</span><br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//   会执行多次，解决办法：加判断</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevprops, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正常情况下，每次点击都会触发更新，因为 React 会把 状态做成新的 VDOM，和旧 VDOM 对比，并走完整个更新阶段。</span><br><span class="hljs-comment">     * 但这种情况下，如果数据没有发生改变，就会浪费这一流程，才有了 shouldComponentUpdate</span><br><span class="hljs-comment">     * shouldComponentUpdate 最主要的作用就是 对性能上的部分优化，适当阻止一些无意义的更新</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.myname&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、componentWillReceiveProps"><a href="#3、componentWillReceiveProps" class="headerlink" title="3、componentWillReceiveProps"></a>3、componentWillReceiveProps</h3><p>componentWillReceiveProps(nextProps)，接收一个参数，nextProps：即将更新的 props 状态，可以通过 props 传递过来的参数用于：网络请求，数据操作等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>  &#125;;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;上杉绘梨衣&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        父组件：&#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextprops</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillReceiveProps&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, nextprops);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">title</span>: nextprops.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦啦&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、销毁阶段"><a href="#三、销毁阶段" class="headerlink" title="三、销毁阶段"></a>三、销毁阶段</h2><p>componentWillUnmount：在删除组件之前进行清理操作，比如清空定时器和事件监听器，大多用于性能优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br><br>  handleComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isCreated</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isCreated</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleComponent&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUnmount&quot;</span>, <span class="hljs-string">&quot;组件即将移除&quot;</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果组件销毁但不进行清空操作：<br><img src="https://s1.xptou.com/2022/09/13/632098876eac0.png" alt="组件移除不进行清除操作"><br>组件销毁，清空定时器和其它监听事件：<br><img src="https://s1.xptou.com/2022/09/13/632097cde2109.png" alt="组件移除进行清除"></p><p class='p red'>老生命周期的问题：</p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>(1) componentWillMount ,在 ssr 中 这个方法将会被多次调用， 所以会重复触发多遍，同时在这里如果绑定事件，将无法解绑，导致内存泄漏 ，变得不够安全高效逐步废弃。<br>(2) componentWillReceiveProps 外部组件多次频繁更新传入多次不同的 props，会导致不必要的异步请求<br>(3) componetWillUpdate, 更新前记录 DOM 状态, 可能会做一些处理，与 componentDidUpdate 相隔时间如果过长， 会导致 状态不太信</p></div><h1 id="新生命周期"><a href="#新生命周期" class="headerlink" title="新生命周期"></a>新生命周期</h1><h2 id="1、getDerivedStateFromProps"><a href="#1、getDerivedStateFromProps" class="headerlink" title="1、getDerivedStateFromProps"></a>1、getDerivedStateFromProps</h2><p>机翻：得到衍生的 state 来自 props。<br>特点：<br>第一次的初始化组件以及后续的更新过程中(包括自身状态更新以及父传子) ，返回一个对象作为新的 state，返回 null 则说明不需要在这里更新 state</p><p>getDerivedStateFromProps 注意事项：<br><img src="https://s1.xptou.com/2022/09/14/6321ef5966995.png" alt="1、getDerivedStateFromProps注意事项"><br>getDerivedStateFromProps(nextProps,nextState)，该生命周期接收两个参数，nextProps：即将更新的 props 属性，nextState：即将更新的 state 状态。<br><p class='p red'>getDerivedStateFromProps 替代了 componentWillMount 、componentWillreceiveProps</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;父组件更改前&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">text</span>: nextState.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦&quot;</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; text: &quot;父组件更新后&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          click</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-comment">// componentWillReceiveProps(nextprops) &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillReceiveProps&quot;, this.props, nextprops);</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     title: nextprops.text + &quot;啦啦啦啦&quot;,</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-comment">// 在这里可以接收到父组件传递过来的 props，但不能在这里做任何异步请求</span><br>    <span class="hljs-comment">// 因为 return 会立即执行，不会等待任何异步操作</span><br>    <span class="hljs-comment">// 所以该生命周期最大的作用是进行一个数据中转，把 props 的属性值 转换为自身的 state，再在 DidUpdate中记性一些 axios 请求等</span><br>    <span class="hljs-comment">// 解决 componentWillReceiveProps 频繁多次请求的问题</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">title</span>: nextProps.<span class="hljs-property">text</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-comment">// *********************注意****************************</span><br>    <span class="hljs-comment">//不能直接在 DidUpdate 中发起 网络请求，因为发起之后，请求成功，更新数据，就会造成再次执行更新阶段，死循环，</span><br>    <span class="hljs-comment">// 不能直接请求，需进行一个判断，</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">title</span> === prevProps.<span class="hljs-property">text</span>) &#123;<br>      <span class="hljs-comment">// 判断 更新后的 值和 之前老的 props 值是否一样，一样的话 return，不再进行后续操作</span><br>      <span class="hljs-comment">// 同时，例如点击向子组件传值，子组件根据值发请求这种例子，可以使重复点击不生效</span><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;子组件在DidUpdate中更新的myname&quot;</span>,<br>    &#125;);<br><br>    <span class="hljs-comment">/* axios(&#123;</span><br><span class="hljs-comment">      url:&#x27;https://.....&#x27;,</span><br><span class="hljs-comment">      method:&#x27;GET&#x27;,</span><br><span class="hljs-comment">      data:&#123;</span><br><span class="hljs-comment">        query:this.state.title</span><br><span class="hljs-comment">        ........</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;).then((res)=&gt;&#123;</span><br><span class="hljs-comment">      this.setState(&#123;</span><br><span class="hljs-comment">        title:res</span><br><span class="hljs-comment">      &#125;)</span><br><span class="hljs-comment">    &#125;) */</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件更新在 DidUpdate 中直接进行网络请求或数据更改，死循环：<br><img src="https://s1.xptou.com/2022/09/15/63232c62dc0a9.png" alt="子组件更新不加if判断"><br>加 if 判断，进行请求或数据更改：<br><img src="https://s1.xptou.com/2022/09/15/63232dc460106.png" alt="加if判断"></p><h2 id="2、getSnapshotBeforeUpdate"><a href="#2、getSnapshotBeforeUpdate" class="headerlink" title="2、getSnapshotBeforeUpdate"></a>2、getSnapshotBeforeUpdate</h2><p>getSnapshotBeforeUpdate 取代了 componetWillUpdate ,触发时间为 update 发生的时候，在 render 之后，dom 渲染之前返回一个值，作为 componentDidUpdate 的第三个参数。<br>应用场景：如聊天滚动时记录滚动位置等处理（此用法并不常见）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">mytext</span>: <span class="hljs-string">&quot;1111&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// componentWillUpdate() &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillUpdate&quot;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">nextProps, nextState, value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>, nextProps, nextState, value);<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; mytext: &quot;2222&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          onClick</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.mytext&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/632332d776a4f.png" alt="更新的打印过程"></p>]]></content>
    
    
    <summary type="html">主要了解React的生命周期，包括旧生命周期和新生命周期以及用法。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-组件通信的方式</title>
    <link href="https://jsq180.github.io/posts/1515f762.html"/>
    <id>https://jsq180.github.io/posts/1515f762.html</id>
    <published>2022-09-10T22:56:16.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>一般常用的组件通信方式基本就是 子传父 和 父传子，但除此之外还有其他的数据传递方式，在此说明。<br>并且该篇章中有不熟悉的知识点，发布订阅和上下文，诸如此类，所以单拎出来写了一个篇章。</p><h1 id="一、父子组件通信"><a href="#一、父子组件通信" class="headerlink" title="一、父子组件通信"></a>一、父子组件通信</h1><h2 id="1、父传子"><a href="#1、父传子" class="headerlink" title="1、父传子"></a>1、父传子</h2><p>所谓父向子传值，个人理解就是把父亲的东西（state/方法等）给儿子，可以供儿子使用，儿子可以使用父亲给他的数据，但儿子决不能损坏这些数据（React 遵循单项数据流原则），因为会挨骂（!!!∑(ﾟ Д ﾟノ)ノ）。</p><h3 id="1-父组件向子组件传递基础数据"><a href="#1-父组件向子组件传递基础数据" class="headerlink" title="1.父组件向子组件传递基础数据"></a>1.父组件向子组件传递基础数据</h3><p>父组件通过在子组件内部写 key=value 的形式向子组件传递数据，子组件通过 props 调用<br>本质上就是调用子组件的 props，因为父组件传递的所有数据，都存储在 props 对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件的name为：&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.text&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>渲染的视图以及打印数据如图所示：<br><img src="https://s1.xptou.com/2022/09/10/631cac6e14c40.png" alt="视图及子组件props"></p><h3 id="2-父组件向子组件传递方法"><a href="#2-父组件向子组件传递方法" class="headerlink" title="2.父组件向子组件传递方法"></a>2.父组件向子组件传递方法</h3><p>通常情况下，都是需要子组件做出行为，来影响父组件中的数据，但子组件不能直接更改父组件的数据，此时就需要父组件给子组件更改数据的权限，即：父组件先定义好一个更改数据的方法，传递给子组件，子组件接受收到这个方法，在触发某种行为时调用即可。<br>（烂白话就是：父亲一般不会让儿子拿抽屉里的盒子（数据），但特殊情况时，父亲会给儿子一把开锁的钥匙（更改数据的方法），儿子就可以取走抽屉里的盒子（更改父组件数据），就是这么回事。当然儿子也可以把锁撬开，即强行拿盒子（强行更改父组件数据），结果可想而知(〃’▽’〃)）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">fn</span>();<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">this.props.bg</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span>点击更改父组件的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">childColor</span>: <span class="hljs-string">&quot;lightblue&quot;</span>,<br>  &#125;;<br><br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;张三&quot;</span> ? <span class="hljs-string">&quot;李四&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      name,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的名字：&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">bg</span>=<span class="hljs-string">&#123;this.state.childColor&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fn</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/10/631cb0e7be01c.png" alt="子组件调用父组件方法"><br>props 中有父组件传给子组件的 fn 函数，子组件调用，就相当于直接调用了父组件中修改 state 的方法，对于子组件来说是间接修改了父组件的 state。<br>（人话总结：儿子拿到了钥匙（props 中的 fn），并取出盒子（更改了父组件的 state），但这个盒子不属于他且不知道盒子是干啥的（子组件无权访问 父组件的 state），因为儿子只是遵守父亲的指令，在适当时候把盒子拿出来）</p><h2 id="2、子传父"><a href="#2、子传父" class="headerlink" title="2、子传父"></a>2、子传父</h2><p>子传父的方式和 父向子传方法 比较类似，区别就是子组件不是单纯的调用父组件的方法，而是需要向父组件传递自己内部的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;childName&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击改变自己的name</span><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;changeName&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击向父组件传递数据</span><br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getChildName</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> &quot;<span class="hljs-attr">10px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          子组件自己的name:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>点击改变自己的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span></span><br><span class="language-xml">          点击向父组件传递自己的name</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">childName</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br><br>  getChildName = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件传递过来的值&quot;</span>, value);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">childName</span>: value,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件的名字：&#123;this.state.childName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">getChildName</span>=<span class="hljs-string">&#123;this.getChildName&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>初始加载页面：<br><img src="https://s1.xptou.com/2022/09/11/631cb8d038fad.png" alt="加载页面"><br>点击更改子组件 name：此时并未向父组件传值，所以父组件的渲染处依旧为空<br><img src="https://s1.xptou.com/2022/09/11/631cb968ad1f2.png" alt="子组件更改name"><br>此时点击向父组件传值：<br><img src="https://s1.xptou.com/2022/09/11/631cb9f3ec123.png" alt="向父组件传值"></p><p>子向传父传值，子组件将数据作为回调交给父组件的方法，父组件可以接收到这个值，并将子组件的这个值，赋值给自己的 state ，作为自己内部的数据进行渲染，如果后续子组件的数据发生变化，只要调用向父组件传值的方法，就可以更改视图。如果子组件一直不调用，那么，父组件就无法得到子组件的数据。<br>人话总结：这是一位和蔼可亲的父亲，给儿子一张成绩统计表（向子组件传递方法并接收参数），儿子可以凭自己的意愿，决定要不要填写这个成绩表，并把它交给父亲（子组件自主调用该方法，并将部分数据传给父组件）</p><h1 id="二、非父子组件通信"><a href="#二、非父子组件通信" class="headerlink" title="二、非父子组件通信"></a>二、非父子组件通信</h1><h2 id="1、状态提升（中间人模式）"><a href="#1、状态提升（中间人模式）" class="headerlink" title="1、状态提升（中间人模式）"></a>1、状态提升（中间人模式）</h2><p>React 中的状态提升概括来说,就是将多个组件需要共享的状态提升到它们最近的父组件上.在父组件上改变这个状态然后通过 props 分发给子组件.（即兄弟组件通信）<br>流程如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631d9b1053d26.png" alt="中间人模式数据传输流程"><br>兄弟组件传值：子传父—&gt;父再传另一个子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [],<br>  &#125;;<br>  getList = <span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件接收到Child1的值&quot;</span>, list);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      list,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">getList</span>=<span class="hljs-string">&#123;this.getList&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&#123;this.state.list&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-comment">// 向父组件传值</span><br>  sendList = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child1向父组件传值&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getList</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.sendList&#125;</span>&gt;</span>点击向Child2发送数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2 render：list数据&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">list</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员列表：</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;/*接收父组件传过来的值并渲染*/&#125;</span><br><span class="language-xml">          &#123;this.props.list.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;item.name&#125;-&#123;item.age&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初次渲染，Child2 没有值，所以 ul 列表的 li 不渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da081db55f.png" alt="初次加载阶段"><br>点击按钮，Child1 把 list 传递给父组件，父组件 list 改变，Child2 的 props 也相应改变，render 再次渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da0e062623.png" alt="子传父，父传给另一个子"></p><h2 id="2、发布订阅模式（简易版）"><a href="#2、发布订阅模式（简易版）" class="headerlink" title="2、发布订阅模式（简易版）"></a>2、发布订阅模式（简易版）</h2><p>发布订阅模式不是 React 独有的，通过 JavaScript 即可实现发布订阅模式，是原生的设计模式。<br>发布订阅模式流程图如下(以微信公众号为例子)：<br><img src="https://s1.xptou.com/2022/09/11/631da5a8efbe4.png" alt="发布订阅流程图"></p><div class="note info modern"><p>第一步：定义 bus 对象，在内部定义方法：subscibe()(订阅)、publish()（发布），并在 bus 外部创建订阅者</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 微信公众平台</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者</span><br><span class="hljs-comment">// 点击按钮订阅公众号</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>console 结果如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631da7eec9e8e.png" alt="callback结果"><br>此时的 log 打印即为 subscribe 执行的结果，因为有人订阅了（调用了 subscribe），所以有了打印，subscribe 接收的是一个回调函数，而后续需要在 publish 方法中使用这个 callback，但 publish 访问不到 subscribe 中的 callback ，此时进行第二步</p><div class="note info modern"><p>第二步：定义 list 数组，用来存储所有订阅者传递的回调函数 callback</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631dab011fea8.png" alt="多个订阅者执行subscribe"><br>此时多个订阅者已经订阅了这一个公众号，那么接下来，就轮到 发布者 发布了，调用 publish</p><div class="note info modern"><p>第三步：发布者发布文章，调用 publish 方法，publish 将所有订阅者的 callback 函数进行遍历执行</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">// 遍历所有的 list ，将回调函数执行</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback, index</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：张三`</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：李四`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;HTML&quot;</span>);<br>&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631db7a18cef7.png" alt="发布者调用publish"><br>结果就是订阅者的回调函数，在发布者发布的情况下依次执行，派发给每一个订阅者。</p><div class="tip info"><p>Redux 的原理实际上就是基于的发布订阅去实现的</p></div><h2 id="3、发布订阅结合-React（简单案例）"><a href="#3、发布订阅结合-React（简单案例）" class="headerlink" title="3、发布订阅结合 React（简单案例）"></a>3、发布订阅结合 React（简单案例）</h2><div class="note info modern"><p>第一步：创建一个发布订阅模式<br>第二步：Child2 组件先进行订阅 bus.subscribe((value) =&gt; {})<br>第三步：Child1 组件进行发布，pubLishDetail = (item) =&gt;{bus.publish(item.content)}，在点击按钮的时候获取到当前项，并把当前项的 content 发布<br>第四部：Child2 组件能够得到 Child1 发布的 content，此时仅需渲染即可，在内部 this.setState({content:value})，即可进行视图的渲染</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-attr">list</span>: [],<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">publish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">//   遍历所有的列表list，将回调函数执行</span><br>    <span class="hljs-comment">// console.log(this.list);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br><br>  <span class="hljs-comment">// 组件1 进行发布</span><br>  pubLishDetail = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    bus.<span class="hljs-title function_">publish</span>(item.<span class="hljs-property">content</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.list.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                this.pubLishDetail(item);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              点击发布该名字的人物介绍</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 组件2DOM元素加载完毕，进行订阅</span><br>    bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2订阅得到发布者的发布内容：&quot;</span>, value);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">content</span>: value,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员介绍：&#123;this.state.content&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始加载状态：<br><img src="https://s1.xptou.com/2022/09/11/631dbe66be3ef.png" alt="加载完毕的状态"><br>点击每一项按钮依次派发内容：<br><img src="https://s1.xptou.com/2022/09/11/631dbeb136265.png" alt="点击按钮Child2组件接收不同内容"></p><h2 id="4、context-状态树传参"><a href="#4、context-状态树传参" class="headerlink" title="4、context 状态树传参"></a>4、context 状态树传参</h2><p>React 官方提供了 Context 来进行组件通信，其原理就是 生产者-消费者 模式。<br>生产者-消费者模式流程介绍图：<br><img src="https://s1.xptou.com/2022/09/11/631dfc38ebe66.png" alt="生产者消费者模式"><br>虽然这些组件也是必须在一个父组件当中，但和兄弟组件传值相比，Context 最大的优势，是可以进行组件嵌套时的数据通信，只要在一个父组件下，所有的子组件都可以是消费者，不管该组件外部嵌套了多少父组件，只要成为消费者，生产商就可以把数据传递给这些组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 第一步，先创建 Context 对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GLobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第二步：使用 GLobalContext 将根节点进行包裹，实际是使用 GLobalContext 对象身上的 Provider 属性，使根组件成为 供应商</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 第四步：尝试传递一些参数</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">call:</span> &quot;<span class="hljs-attr">打电话</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">sms:</span> &quot;<span class="hljs-attr">发短信</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">content:</span> <span class="hljs-attr">this.state.content</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">changeContent:</span> (<span class="hljs-attr">content</span>) =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(content);</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              content,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Provider</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第三步：使组件1 成为消费者</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 步骤1：先使用 GLobalContext.Consumer 将根节点进行包裹</span><br><span class="hljs-comment">     * 步骤2：在内部写一个 JavaScript 写法的回调函数 ()=&gt;&#123;&#125;  因为 React render 中不支持这样写，还需要加一个&#123;&#125;让 React 识别，</span><br><span class="hljs-comment">     * 最终写法：&#123;</span><br><span class="hljs-comment">                  ()=&gt;&#123;</span><br><span class="hljs-comment">                      return &lt;div&gt;根节点&lt;/div&gt;</span><br><span class="hljs-comment">                  &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-comment">// 问：为什么携程回调函数的形式？</span><br>    <span class="hljs-comment">// 答：为了接收参数，即 供应商 提供给消费者的各种服务（数据）</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child1组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              &#123;this.state.list.map((item) =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">                    &#123;item.name&#125;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                        // value.content = item.content // 这种改法 React 监听不到，视图不会重新渲染，所以需要供应商提供一个改状态的方法</span><br><span class="language-xml">                        // 在点击的时候 把当前点击项的 content 传递给父组件，父组件进行修改并广播</span><br><span class="language-xml">                        value.changeContent(item.content);</span><br><span class="language-xml">                      &#125;&#125;</span><br><span class="language-xml">                    &gt;</span><br><span class="language-xml">                      点击显示该名字的人物介绍</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child2组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">              人员介绍：&#123;value.content&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Context 写法下的结果，和发布订阅模式下的结果一致：<br><img src="https://s1.xptou.com/2022/09/11/631dfc5a05427.png" alt="Context写法"><br>以上代码需求大致为：此时需要将 Child1 点击对应项，让 Child2 显示 content，即将 Child1 的数据传递给 Child2<br>实现流程：<br><div class="note info simple"><p>1、使 App 组件成为 生产者，使 Child1、Child2 组件成为消费者，<br>2、App 生产者，需提供 一个在 state 定义好，用来接收 Child1 传递过来的数据，派发给每一个消费者，这样才能使消费者中使用这个数据的视图更新<br>3、App 生产者，需提供一个 更改 state 的方法，在点击 Child1 的某项数据时，把数据传递给 App 生产者，并更改 state 中的数据<br>4、点击测试即可</p></div><br>PS：小声 bb，这种写法真是无力吐槽，对于简单的通信，父子通信即可解决，而且开发中很少使用这种方式，大都使用 Redux 进行跨组件通信。</p><div class="tip warning"><p>注意：GlobalContext.Consumer 内必须是回调函数，通过 context 方法改变根组件状态</p></div><div class="note info modern"><p>context 优缺点：<br>优点：跨组件访问数据<br>缺点：react 组件树中某个上级组件 shouldComponetUpdate 返回 false,当 context 更新时，不会引起下级组件更新</p></div><h2 id="三、插槽"><a href="#三、插槽" class="headerlink" title="三、插槽"></a>三、插槽</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        App父组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1111111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3333333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、爲了复用</span><br><span class="hljs-comment">2、一定程度减少父子通信</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>); <span class="hljs-comment">// 插槽的内容以数组的形式呈现</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        Child组件</span><br><span class="language-xml">        &#123;/* 类似vue的插槽 */&#125;</span><br><span class="language-xml">        &#123;this.props.children[0]&#125;</span><br><span class="language-xml">        &#123;this.props.children[1]&#125;</span><br><span class="language-xml">        &#123;this.props.children[2]&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图渲染即打印结果：插槽的内容以数组的形式呈现<br><img src="https://s1.xptou.com/2022/09/11/631e025cc8899.png" alt="插槽的使用结果"></p>]]></content>
    
    
    <summary type="html">主要讲述React的组件通信的多种方式。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-state和props以及受控组件</title>
    <link href="https://jsq180.github.io/posts/38c9fb2f.html"/>
    <id>https://jsq180.github.io/posts/38c9fb2f.html</id>
    <published>2022-09-01T21:00:02.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、组件的数据挂载方式"><a href="#一、组件的数据挂载方式" class="headerlink" title="一、组件的数据挂载方式"></a>一、组件的数据挂载方式</h1><h2 id="1-状态（state）"><a href="#1-状态（state）" class="headerlink" title="1.状态（state）"></a>1.状态（state）</h2><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)。</p><ul><li>写法一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.name = &quot;Vue&quot;</span><br>  &#125;;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  isLiked 存放在实例的 state 对象当中，组件的 render 函数内，会根据组件的 state 的中的</span><br><span class="hljs-comment">  isLiked 不同显示“取消”或“收藏”内容。下面给 button 加上了点击的事件监听</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span> 点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：在 React 中修改状态，不能直接 this.state.isLiked 修改，原因如下</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>this.state 是纯 js 对象,在 vue 中，data 属性是利用 Object.defineProperty 处理过的，更改 data 的数据的时候会触发数据的 getter 和 setter ，但是 React 中没有做这样的处理。<br>如果直接更改的话，react 是无法得知的，所以，需要使用特殊的更改状态的方法 <strong>setState</strong> 。</p></div></p><ul><li>写法二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;<br><br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 将 name 属性从 React 设置为 Vue</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span>点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用 constructor 构造器继承 Component 组件的属性，则必须在内部添加 super()</p><ul><li>constructor 简单介绍：</li></ul><ul><li>constructor 方法是类的默认方法，通过 new 命令生成对象实例，自动调用该方法。</li><li>一个类必须有 constructor 方法，如果没有显示定义，一个空的 constructor 方法会被默认添加。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义了一个空的类Point，</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-comment">// JavaScript引擎会自动为它添加一个空的constructor方法</span><br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 constructor 详细内容，后续补充。</p><h2 id="2-渲染数据"><a href="#2-渲染数据" class="headerlink" title="2.渲染数据"></a>2.渲染数据</h2><h3 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h3><p>一般会通过三目运算的方式，对不同状态的数据进行不同内容的渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changeLike = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.isLiked = !this.state.isLiked</span><br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>/</span><br><span class="language-xml">        &#123;/* 当 isLiked 的状态为 true ，渲染 &quot;❤收藏&quot; ，否则渲染  &quot;🖤取消&quot; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeLike&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.isLiked ? &quot;🖤取消&quot; : &quot;❤收藏&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-列表渲染"><a href="#2-列表渲染" class="headerlink" title="2.列表渲染"></a>2.列表渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">people</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.people.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 内部渲染还可以这样写：原因是 return 的只能是一个根节点，即一个结果，所以 return 和 &#123;&#125; 可以省略不写</span><br><span class="hljs-comment">/* this.state.people.map((item) =&gt; &#123;</span><br><span class="hljs-comment">  return (</span><br><span class="hljs-comment">    &lt;ul key=&#123;item.id&#125;&gt;</span><br><span class="hljs-comment">      &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="hljs-comment">    &lt;/ul&gt;</span><br><span class="hljs-comment">  );</span><br><span class="hljs-comment">&#125;); */</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/01/6310852e0ef87.png" alt="列表渲染结果"></p><h3 id="3-循环渲染的唯一值-key"><a href="#3-循环渲染的唯一值-key" class="headerlink" title="3.循环渲染的唯一值 key"></a>3.循环渲染的唯一值 key</h3><p>在进行循环渲染时，react 告诉我们，每一条数据都需要有一个 key 值，且 key 的值是唯一，不能重复的。<br>这涉及到 React（Vue）的渲染方式：虚拟 DOM，其核心也就是 Diff 算法。</p><p>React 的高效依赖于所谓的 Virtual-DOM，尽量不碰 DOM。对于列表元素来说会有一个问题：元素可能会在一个列表中改变位置。要实现这个操作，只需要交换一下 DOM 位置就行了，但是 React 并不知道其实我们只是改变了元素的位置，所以它会重新渲染后面两个元素（再执行 Virtual-DOM ），这样会大大增加 DOM 操作。但如果给每个元素加上唯一的标识，React 就可以知道这两个元素只是交换了位置，这个标识就是 key ，这个 key 必须是每个元素唯一的标识</p><p><img src="https://s1.xptou.com/2022/09/01/6310c0c0d4e24.png" alt="DOM更新原理"></p><ul><li>为了列表的复用和重排，设置 key 值，提高性能。</li><li>在进行列表渲染时，尽量使用数据的 ID 作为 key，因为后端返回的 ID 时唯一的。</li><li>在列表仅仅是数据展示时，可以使用 index 索引作为 key，因为不会对 DOM 进行数据更改。</li><li>如果涉及到列表数据的动态<strong>添加、删除</strong>等，就尽量保证 key 值得唯一性，不然很可能会出现问题。</li><li>在对 state 中的数据更改时，非必要，尽量不要影响原数据，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = a;<br>b.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 此时 b 指向的 和 a 是同一个 内存地址，相当于操作的依旧是 a 数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b); <span class="hljs-comment">// true 若指向的不同地址，就算数组相同，也为 false</span><br></code></pre></td></tr></table></figure><ul><li>解决方法：</li></ul><ul><li>解构赋值 、slice、concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 解构赋值</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = [...a]; <span class="hljs-comment">// 多层数据无法实现</span><br><br><span class="hljs-comment">// slice()  concat()</span><br><span class="hljs-keyword">let</span> c = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> d = [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> c_copy = c.<span class="hljs-title function_">slice</span>();<br><span class="hljs-keyword">let</span> d_copy = d.<span class="hljs-title function_">slice</span>(); <span class="hljs-comment">// 如果数组含有对象，则对象的指针指向同一个内存地址，也相当于拷贝一层</span><br></code></pre></td></tr></table></figure><h3 id="4-setState-同步异步"><a href="#4-setState-同步异步" class="headerlink" title="4.setState 同步异步"></a>4.setState 同步异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">count1</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">count2</span>: <span class="hljs-number">1</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 同步函数</span><br>  changeCount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">count1</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span> + <span class="hljs-number">1</span>,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>      &#125;<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>  &#125;;<br>  <span class="hljs-comment">//异步函数</span><br>  changeAsync = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// axios 属于异步任务</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>        &#123;<br>          <span class="hljs-attr">count2</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span> + <span class="hljs-number">1</span>,<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>        &#125;<br>      );<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeCount&#125;</span>&gt;</span>同步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeAsync&#125;</span>&gt;</span>异步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>点击操作结果如图所示：<br><img src="https://s1.xptou.com/2022/09/04/631473e7819d1.png" alt="setState 同步异步"><br><strong>结论：</strong><br><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><ul><li>setState 处在同步任务中，异步更新状态和真实 DOM<br>setState 处在异步任务中，同步更新状态和真实 DOM</li><li>setState 接受第二个参数，第二个参数式回调函数中，状态和 DOM 更新完成就会被触发</li></ul></div></p><h3 id="5-setState-的两种写法"><a href="#5-setState-的两种写法" class="headerlink" title="5.setState 的两种写法"></a>5.setState 的两种写法</h3><p>setState 有两个参数。<br>第一个参数可以是对象，也可以是方法 return 一个对象，我们把这个参数叫做 updater</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1、参数是对象  这种写法是最常用的</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>  <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>&#125;);<br><br><span class="hljs-comment">//2、参数是方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这两个参数的数据都是最新的，在此回调函数中访问到的数据也都是最近的</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isLiked</span>: !state.<span class="hljs-property">isLiked</span>,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-React-识别富文本：dangerouslySetInnerHTML"><a href="#2-React-识别富文本：dangerouslySetInnerHTML" class="headerlink" title="2.React 识别富文本：dangerouslySetInnerHTML"></a>2.React 识别富文本：dangerouslySetInnerHTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;这是第一行&lt;br/&gt;这是第二行&quot;</span> &#125;],<br>    <span class="hljs-attr">myHtml</span>: <span class="hljs-string">`&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="hljs-string">              &lt;img src=&quot;https://xxxxxxxx&quot;/&gt;</span><br><span class="hljs-string">            &lt;/div&gt;`</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/*注意：__html 是两个下划线*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.content</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.myHtml</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处于安全的原因，React 当中所有表达式的内容会被转义，如果直接输入，标签会被当成文本。这时候<br>就需要使用 dangerouslySetHTML 属性，它允许我们动态设置 innerHTML。<br>一般情况下，dangerouslySetInnerHTML 搭配富文本编辑器使用，一般用来转义 html 标签。</p><h1 id="二、属性（props）"><a href="#二、属性（props）" class="headerlink" title="二、属性（props）"></a>二、属性（props）</h1><h2 id="1-类组件"><a href="#1-类组件" class="headerlink" title="1.类组件"></a>1.类组件</h2><ul><li>props 是正常是外部传入的，组件内部也可以通过一些方式来初始化的设置，属性不能被组件自己更改，但是你可以通过父组件主动重新渲染的方式来传入新的 props</li><li>属性是描述性质、特点的，组件自己不能随意更改。</li><li>总的来说，在使用一个组件的时候，可以把参数放在标签的属性当中，所有的属性都会作为组件 props 对象的键值。通过箭头函数创建的组件，需要通过函数的参数来接收 props :<br>(1) 在组件上通过 key=value 写属性,通过 this.props 获取属性,这样组件的可复用性提高了。<br>(2) 注意在传参数时候，如果写成 isShow=”true” 那么这是一个字符串 如果写成 isShow={true} 这个 是布尔值<br>(3) {…对象} 展开赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Navbar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, propTypes);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.leftshow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#125;</span><br><span class="language-xml">        Navbar-&#123;this.props.title&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;测试&quot;</span>,<br>      <span class="hljs-attr">leftshow</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;列表&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;购物车&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;obj.title&#125;</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;obj.leftshow&#125;</span> /&gt;</span> */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> &#123;<span class="hljs-attr">...obj</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4) 默认属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">*.<span class="hljs-property">defaultProps</span> = &#123;<br><br> &#125;<br><span class="hljs-keyword">static</span> defaultProps = &#123;<br>  <span class="hljs-attr">myname</span>:<span class="hljs-string">&quot;默认的myname&quot;</span>,<br>  <span class="hljs-attr">myshow</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>(5) prop-types 属性验证<br>验证 props 传入的数据是否合法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br>*.<span class="hljs-property">propTypes</span>=&#123;<br>    <span class="hljs-attr">name</span>:propTypes.<span class="hljs-property">string</span>,<br>    <span class="hljs-attr">age</span>:propTypes.<span class="hljs-property">number</span><br>&#125;<br><span class="hljs-comment">// 类属性</span><br><span class="hljs-keyword">static</span> propTypes=&#123;<br>  <span class="hljs-attr">myname</span>:propTypes.<span class="hljs-property">string</span>,<br>  <span class="hljs-attr">myshow</span>:propTypes.<span class="hljs-property">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><p>propTypes 的打印结果：<br><img src="https://s1.xptou.com/2022/09/04/6314741c24aaa.png" alt="propTypes 打印结果"></p><h2 id="2-函数组件"><a href="#2-函数组件" class="headerlink" title="2.函数组件"></a>2.函数组件</h2><p>函数组件的规则和类组件几乎没有区别，只有在 props 的调用上有些许不同<br>类组件使用 this.props.属性 来访问，而函数组件直接 props.属性 访问，毕竟 函数组件没有 this，当然也无法通过 this 访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navbar</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">props.bg</span> &#125;&#125;&gt;</span>Navbar组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-状态-vs-属性"><a href="#3-状态-vs-属性" class="headerlink" title="3.状态 vs 属性"></a>3.状态 vs 属性</h2><p>相似点：都是纯 js 对象，都会触发 render 更新，都具有确定性（状态/属性相同，结果相同）<br>不同点：</p><ol><li>属性能从父组件获取，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以，设置方式不一样</li><li>属性不在组件内部修改，状态要在组件内部修改</li><li>属性能设置子组件初始值，状态不可以</li><li>属性可以修改子组件的值，状态不可以</li></ol><ul><li><p>state 的主要作用是用于组件保存、控制、修改自己的可变状态。 state 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为 state 是一个局部的、只能被组件自身控制的数据源。 state 中状态可以通过 this.setState 方法进行更新，setState 会导致组件的重新渲染。</p></li><li><p>props 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的 props ，否则组件的 props 永远保持不变。</p></li><li><p>没有 state 的组件叫无状态组件（stateless component），设置了 state 的叫做有状态组件（stateful component）。因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。</p></li></ul><h1 id="三、非受控组件和受控组件"><a href="#三、非受控组件和受控组件" class="headerlink" title="三、非受控组件和受控组件"></a>三、非受控组件和受控组件</h1><h2 id="1-非受控组件"><a href="#1-非受控组件" class="headerlink" title="1.非受控组件"></a>1.非受控组件</h2><p>React 要编写一个非受控组件，可以 使用 ref 来从 DOM 节点中获取表单数据，就是非受控组件。（不是通过 react 的 state 来获取表单数据，而是通过 ref 的形式来获取，不受到 state 的控制，就叫做非受控组件）</p><p>默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  myusername = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myusername&#125;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(this.myusername.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          登录</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.myusername.current.value = &quot;&quot;;</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样， type=”checkbox” 和 type=”radio” 支持 defaultChecked ， select 和 textarea 支持 defaultValue 。<br><strong>注意：</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>除非使用很简单的代码，组件的数据不涉及视图更新，不然不建议使用非受控组件，因为非受控组件不与 state 关联，所以改变数据，react 监听不到数据更改，不会改变视图。</p></div></p><h2 id="2-受控组件"><a href="#2-受控组件" class="headerlink" title="2.受控组件"></a>2.受控组件</h2><p>由于在表单元素上设置了 value 属性，因此显示的值将始终为 this.state.value ，这使得 React 的 state 成为唯一数据源。由于 onChange 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。<br>对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">//   myusername = React.createRef();</span><br>  state = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;默认值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.username&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            // input 值 赋值给 state 中的受控数据</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: event.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: &quot;&quot;,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info modern"><p>注意: 另一种说法（广义范围的说法），React 组件的数据渲染是否被调用者传递的 props 完全控制，控制则<br>为受控组件，否则非受控组件。</p></div><h2 id="3-受控组件和非受控组件区别"><a href="#3-受控组件和非受控组件区别" class="headerlink" title="3.受控组件和非受控组件区别"></a>3.受控组件和非受控组件区别</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><div class="tip sync"><p>1、在 React 中默认可以完成从 state 到表单 value 的动态绑定。<br>2、给 input 提供 onchange 事件，一旦检测到文本框内容有变化，马上执行 onchange 事件获取表单的内容。</p></div><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><div class="tip sync"><p>1、操作 DOM 获取到你要的数据，即通过 ref=”dom” 绑定 DOM 元素获取数据。<br>2、可以在构造函数里面定义一个变量 dom = React.createRef()，通过变量来创建组件引用，就可以获取到这个节点。<br>以上两条都是通过 DOM 节点获取数据，本质上是一样的</p></div>]]></content>
    
    
    <summary type="html">React数据加载和渲染：state数据渲染和注意事项，props的使用，state和props之间的区别，受控组件和非受控组件。</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-了解React的基础语法</title>
    <link href="https://jsq180.github.io/posts/46f4fab.html"/>
    <id>https://jsq180.github.io/posts/46f4fab.html</id>
    <published>2022-08-28T20:48:49.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、认识-React-组件"><a href="#一、认识-React-组件" class="headerlink" title="一、认识 React 组件"></a>一、认识 React 组件</h1><h2 id="1-Class-组件"><a href="#1-Class-组件" class="headerlink" title="1.Class 组件"></a>1.Class 组件</h2><p>ES6 的加入让 JavaScript 直接支持使用 class 来定义一个类，react 创建组件的方式就是使用的类的继承，ES6 class 是目前官方推荐的使用方式，它使用了 ES6 标准语法来构建，看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>ES6 class 组件其实就是一个构造器,每次使用组件都相当于在实例化组件，像这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入&#123;this.props.name&#125;的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>&#125;).<span class="hljs-title function_">render</span>();<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(app, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2.函数式组件"></a>2.函数式组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>( <span class="hljs-comment">// React组件的调用方式</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) )<br></code></pre></td></tr></table></figure><p><strong>注意：不论是 class 组件还是函数式组件，组件名必须大写，否则报错。且每个组件有且只有一个根节点</strong></p><h2 id="3-组件的样式"><a href="#3-组件的样式" class="headerlink" title="3.组件的样式"></a>3.组件的样式</h2><ul><li>行内样式<br>想给虚拟 dom 添加行内样式，需要使用表达式传入样式对象的方式来实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> styles=&#123;<br>  <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&quot;20px&quot;</span>,<br>  <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;#000&quot;</span><br>&#125;<br><span class="hljs-comment">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，JS会把它当做一个逻辑进行处理，第二个是样式对象的括号</span><br>&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>行内样式需要写入一个样式对象，而这个样式对象的位置可以放在很多地方，例如 render 函数里、组件原型上、外链 js 文件中。</p><ul><li>使用 class<br>React 推荐我们使用行内样式，因为 React 觉得每一个组件都是一个独立的整体。<br>其实我们大多数情况下还是大量的在为元素添加类名，但是需要注意的是， <strong>class</strong> 需要写成 <strong>className</strong> （因为毕竟是在写类 js 代码，会受到 js 规则的限制，而 class 是关键字）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> ==&gt; className , <span class="hljs-keyword">for</span> ==&gt; <span class="hljs-title function_">htmlFor</span>(label)<br><span class="hljs-comment">/* htmlFor 即为 label 的 for 属性 */</span><br></code></pre></td></tr></table></figure><h2 id="4-组件嵌套"><a href="#4-组件嵌套" class="headerlink" title="4.组件嵌套"></a>4.组件嵌套</h2><h3 id="1-基础组件嵌套"><a href="#1-基础组件嵌套" class="headerlink" title="1.基础组件嵌套"></a>1.基础组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f1f600faea.png" alt="基础组件嵌套"></p><h3 id="2-多层组件嵌套"><a href="#2-多层组件嵌套" class="headerlink" title="2.多层组件嵌套"></a>2.多层组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">red</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        NavBar 组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 下的 Child 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f200ab8171.png" alt="多层组件嵌套"></p><h1 id="二、React-事件"><a href="#二、React-事件" class="headerlink" title="二、React 事件"></a>二、React 事件</h1><h2 id="1-事件绑定写法"><a href="#1-事件绑定写法" class="headerlink" title="1.事件绑定写法"></a>1.事件绑定写法</h2><p>采用 on+事件名的方式来绑定一个事件，注意，这里和原生的事件是有区别的，原生的事件全是小写 onclick , React 里的事件是驼峰 onClick ，<strong>React 的事件并不是原生事件，而是合成事件。</strong></p><h2 id="2-事件-handler-的写法"><a href="#2-事件-handler-的写法" class="headerlink" title="2.事件 handler 的写法"></a>2.事件 handler 的写法</h2><ul><li>直接在 render 里写行内的箭头函数(不推荐)</li><li>在组件内使用箭头函数定义一个方法(推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 render 里直接使用 onClick={this.handleClick.bind(this)} (不推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 constructor 里 bind(this)(推荐)<br><strong>个人最推荐的写法为 handleClick2 的方式，行内写方法，组件内将方法写成箭头函数的写法。若要传参，则采用 handleClick5 的写法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">/*  handleClick() &#123;</span><br><span class="hljs-comment">           console.log(this, &quot;click1&quot;);</span><br><span class="hljs-comment">       &#125; */</span><br>  handleClick2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click2&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">handleClick3</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click3&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick4</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click4&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click5&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不加小括号箭头函数，相当于自执行 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(&quot;click，仅限逻辑极少的情况&quot;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add1（行内箭头函数）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* handleClick 不加小括号，被动执行，点击之后触发。若加，则直接执行 */&#125;</span><br><span class="language-xml">        &#123;/* 若要传参，且不让他执行 则 onClick=&#123;()=&gt;&#123;this.handleClick(&quot;value&quot;)&#125;&#125; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>add2（函数箭头函数）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick3.bind(this)&#125;</span>&gt;</span></span><br><span class="language-xml">          add3（行内非箭头函数绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不绑定this ,this 为 undefined */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick4&#125;</span>&gt;</span></span><br><span class="language-xml">          add4（内非箭头函数不绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.handleClick5();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add5（行内箭头函数方法）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f24cdcc47f.png" alt="事件绑定方式"></p><h2 id="3-React-事件绑定原理"><a href="#3-React-事件绑定原理" class="headerlink" title="3.React 事件绑定原理"></a>3.React 事件绑定原理</h2><p>react 的事件绑定并非像原生事件一样，绑定在具体的 DOM 节点上，这样是非常消耗内存的。而是采用了<strong>事件代理</strong>的方案：<br>测试结果如下：</p><ul><li>在未移除 button 的 click 事件时，按钮点击正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f28b32ece4.png" alt="未移除时结果"></li><li>在移除 button 的 click 事件后，按钮依旧正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f29bc899d1.png" alt="移除后执行结果"></li><li>在移除 root 的 click 事件后，按钮无法操作<br><img src="https://s1.xptou.com/2022/08/31/630f2aaad0bb9.png" alt="移除 root 后执行结果"><br>由此推断：<br>react 的事件并非是由点击的 DOM 节点执行的，而是由 root 根节点 target 通过事件源找到真正触发的元素，然后从真实触发的元素依次向顶点查找有没有叫 onClick 的属性，如果有，就把该属性身上的事件执行。<br>因为事件代理的方式，在性能方面是更优的，因为不需要绑定到准确的 DOM 节点上，所以也不需要考虑解绑事件。</li></ul><h2 id="4-Event-对象"><a href="#4-Event-对象" class="headerlink" title="4.Event 对象"></a>4.Event 对象</h2><p>虽然 react 的事件机制与原生事件有所不同，但 event 事件对象却和原生的基本一致。<br>和普通浏览器一样，事件handler会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。<br>不同的是 React中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  handleClick2 = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, <span class="hljs-string">&quot;click&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：<br><img src="https://s1.xptou.com/2022/08/31/630f2d6eb5990.png" alt="打印结果"><br>和普通浏览器一样，事件 handler 会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。不同的是 React 中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><h1 id="三、Ref-的应用"><a href="#三、Ref-的应用" class="headerlink" title="三、Ref 的应用"></a>三、Ref 的应用</h1><ul><li>ref 字符串绑定（将要废弃）</li></ul><ul><li>给标签设置 ref=”ipt1”，通过这个获取 this.refs.ipt1 , ref 可以获取到应用的真实 dom</li></ul><ul><li>新的写法（推荐）</li></ul><ul><li>标签内设置 ipt2 = React.createRef(); 并通过 ref={this.ipt2} 进行 DOM 绑定，通过 this.ipt2.current 获取到真实 DOM</li><li>组件内设置 component = React.createRef(); 并通过 ref={this.component} 进行组件绑定，通过 this.component.current 可以获取到 组件内部的所有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// Input 组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  a = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Input组件---a=&#123;this.a&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  ipt2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  component = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut1&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut2&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Input组件&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>.<span class="hljs-property">a</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ipt1&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.ipt2&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.component&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f5645535ac.png" alt="ref写法"></p>]]></content>
    
    
    <summary type="html">React基础语法介绍：class组件、函数组件的写法及使用，React事件绑定及原理，ref的使用</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React入门篇-认识React</title>
    <link href="https://jsq180.github.io/posts/74b32545.html"/>
    <id>https://jsq180.github.io/posts/74b32545.html</id>
    <published>2022-08-26T16:47:36.000Z</published>
    <updated>2022-09-18T10:22:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为《从零开始的 react 异世界生活》（误），主要介绍何为 React，以及创建 React 项目需要的环境等，认识 React 的基础框架。<br>PS：这是第一次尝试搭建个人博客，也是为了记录学习和工作上的各种问题，希望以后能够继续更新博客，既是对自己知识的巩固，也是一种记录。<br>首先，因工作上使用 React，所以这次也是从零开始，对 React 技术一种重温，同时对没有了解到的知识的学习。</p><h1 id="一、React-介绍"><a href="#一、React-介绍" class="headerlink" title="一、React 介绍"></a>一、React 介绍</h1><h2 id="1-React-起源与发展"><a href="#1-React-起源与发展" class="headerlink" title="1.React 起源与发展"></a>1.React 起源与发展</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在 2013 年 5 月开源了。</p><h2 id="2-React-与传统-MVC-的关系"><a href="#2-React-与传统-MVC-的关系" class="headerlink" title="2.React 与传统 MVC 的关系"></a>2.React 与传统 MVC 的关系</h2><p>轻量级的视图层库！A JavaScript library for building user interfaces</p><p>React 不是一个完整的 MVC 框架，最多可以认为是 MVC 中的 V（View），甚至 React 并不非常认可 MVC 开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><h2 id="3-React-的特性"><a href="#3-React-的特性" class="headerlink" title="3.React 的特性"></a>3.React 的特性</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05e2a28aa.png" alt="React特性"></p><h2 id="4-虚拟-DOM"><a href="#4-虚拟-DOM" class="headerlink" title="4.虚拟 DOM"></a>4.虚拟 DOM</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05c1543a8.png" alt="传统DOM更新"><br><img src="https://s1.xptou.com/2022/08/27/630a05926ad17.png" alt="虚拟DOM"></p><h1 id="二、创建脚手架"><a href="#二、创建脚手架" class="headerlink" title="二、创建脚手架"></a>二、创建脚手架</h1><h2 id="1-全局安装-create-react-app"><a href="#1-全局安装-create-react-app" class="headerlink" title="1.全局安装 create-react-app"></a>1.全局安装 create-react-app</h2><p>全局安装脚手架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install -g create-react-app<br></code></pre></td></tr></table></figure><p>安装完成，可以检查是否安装成功（检查版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app -V<br></code></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app your-app (your-app为自定义项目名称)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Creating a new React app in /dir/your-app. Installing packages. This might take a couple of minutes. 安装过程较慢，<br>Installing react, react-dom, and react-scripts...    (执行过程)<br></code></pre></td></tr></table></figure><h2 id="2-如果不想全局安装，可以直接使用-npx"><a href="#2-如果不想全局安装，可以直接使用-npx" class="headerlink" title="2.如果不想全局安装，可以直接使用 npx"></a>2.如果不想全局安装，可以直接使用 npx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npx create-react-app myapp 也可以实现相同的效果<br></code></pre></td></tr></table></figure><p>这需要等待一段时间，这个过程实际上会安装三个东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">•react: react的顶级库 •react-dom:<br>因为react有很多的运行环境，比如app端的•react-native,<br>我们要在web上运行就使用react-dom •react-scripts:<br>包含运行和打包react应用程序的所有脚本及配置<br></code></pre></td></tr></table></figure><h2 id="3-创建并启动项目"><a href="#3-创建并启动项目" class="headerlink" title="3.创建并启动项目"></a>3.创建并启动项目</h2><p>出现下面的界面，表示创建项目成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Success! Created your-app at /dir/your-app<br>Inside that directory, you can run several commands:<br><br>    npm start<br>        Starts the development server.<br><br>    npm run build<br>        Bundles the app into static files for production.<br><br>    npm test<br>        Starts the test runner.<br><br>    npm run eject<br>        Removes this tool and copies build dependencies, configuration files<br>        and scripts into the app directory. If you do this, you can’t go back!<br><br>We suggest that you begin by typing:<br><br>    cd your-app<br>    npm start<br><br>    Happy hacking!<br></code></pre></td></tr></table></figure><p>根据上面的提示，通过 cd your-app 命令进入目录并运行 npm start 即可运行项目。<br>生成项目的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">├── README.md 使用方法的文档<br>├── node_modules 所有的依赖安装的目录<br>├── package-lock.json 锁定安装时的包的版本号,保证团队的依赖能保证一致。<br>├── package.json<br>├── public 静态公共目录<br>├── src 开发用的源代码目录<br></code></pre></td></tr></table></figure><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h2><ul><li>npm 安装失败<ul><li>切换为 npm 镜像为淘宝镜像</li><li>使用 yarn，如果本来使用 yarn 还要失败，还得把 yarn 的源切换到国内</li><li>如果还没有办法解决，请删除 node_modules 及 package-lock.json 然后重新执行 npm install 命令</li><li>再不能解决就删除 node_modules 及 package-lock.json 的同时清除 npm 缓存 npm cache clean —force 之后再执行 npm install 命令</li></ul></li><li>拓展：<br>仓库包管理工具：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i -g nrm    安装<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">nrm ls          查看<br></code></pre></td></tr></table></figure>查看执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/6309fe5a0dae7.png" alt="nrm ls查看"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">nrm use yarn    切换镜像源<br></code></pre></td></tr></table></figure>切换镜像源执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/630a01fddb1da.png" alt="nrm use yarn切换查看"></li></ul><h1 id="三、编写第一个-react-应用程序"><a href="#三、编写第一个-react-应用程序" class="headerlink" title="三、编写第一个 react 应用程序"></a>三、编写第一个 react 应用程序</h1><p>react 开发需要引入多个依赖文件：react.js、react-dom.js，分别又有开发版本和生产版本。<br>create react-app 里已经帮我们把这些东西都安装好了。把通过 CRA 创建的工程目录下的 src 目录清空，然后在里面重新创建一个 index.js。index.js 即为入口文件，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有 一种语法叫JSX，要写JSX，就必须引入React</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中 引入的，而不是从 react 引入。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-comment">// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的 元素上</span><br><span class="hljs-comment">// 此版本是 react 17 版本，18版本不支持这种写法</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="hljs-comment">// html语法</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div_h1&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-comment">// 渲染到 节点Id 为 root 的DOM元素下面</span><br>);<br><br>**注意：**<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span> 目前有助于：</span><br><span class="language-xml">识别不安全的生命周期</span><br><span class="language-xml">关于使用过时字符串 ref API 的警告</span><br><span class="language-xml">检测意外的副作用</span><br><span class="language-xml">检测过时的 context API</span><br><span class="language-xml">写法：</span><br><span class="language-xml"></span><br><span class="language-xml">```js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="四、JSX-语法与组件"><a href="#四、JSX-语法与组件" class="headerlink" title="四、JSX 语法与组件"></a>四、JSX 语法与组件</h1><h2 id="1-JSX-语法"><a href="#1-JSX-语法" class="headerlink" title="1.JSX 语法"></a>1.JSX 语法</h2><p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。<br>在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。 编译过程由 Babel 的 JSX 编译器实现。<br><a href="https://reactjs.org/docs/hello-world.html">官方示例链接</a>✔</p><p>原理是什么呢？</p><p>要明白 JSX 的原理，需要先明白如何用 JavaScript 对象来表现一个 DOM 元素的结构?<br>看下面的 DOM 结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;app&quot;</span> id=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个帮助你构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;appRoot&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;title&#x27;</span>&#125;,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;欢迎进入React的世界&#x27;</span> ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;React.js 是一个构建页面 UI 的库&#x27;</span>]<br>    &#125;<br>    ]<br> &#125;<br></code></pre></td></tr></table></figure><p>但是用 JavaScript 写起来太长了，结构看起来又不清晰，用 HTML 的方式写起来就方便很多了。</p><p>于是 React.js 就把 JavaScript 的语法扩展了一下，让 JavaScript 语言能够支持这种直接在 JavaScript 代码里面编写类似 HTML 标签结构的语法，这样写起来就方便很多了。编译的过程会把类似 HTML 的 JSX 结构转换成 JavaScript 的对象结构。</p><p>下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p>编译之后将得到这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>      <span class="hljs-string">&quot;div&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;appRoot&quot;</span>,<br>      &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;h1&quot;</span>,<br>        &#123;<br>          <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;欢迎进入React的世界&quot;</span><br>      ),<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;React.js 是一个构建页面 UI 的库&quot;</span>)<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>React.createElement</strong> 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等, 语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这种写法在获取DOM节点的时候可以看到</span><br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(type, [props], [...children]);<br></code></pre></td></tr></table></figure><p>所谓的 JSX 其实就是 JavaScript 对象，所以使用 React 和 JSX 的时候一定要经过编译的过程:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">JSX —使用react构造组件， bable进行编译—&gt; JavaScript对象 — ReactDOM.render() —&gt;<br>DOM元素 —&gt; 插入页面<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">React入门介绍：环境安装及创建项目</summary>
    
    
    
    <category term="前端" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://jsq180.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
