<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JSQのBlog</title>
  
  <subtitle>知识小站</subtitle>
  <link href="https://jsq180.github.io/atom.xml" rel="self"/>
  
  <link href="https://jsq180.github.io/"/>
  <updated>2022-10-17T23:01:21.000Z</updated>
  <id>https://jsq180.github.io/</id>
  
  <author>
    <name>JSQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目自动化部署</title>
    <link href="https://jsq180.github.io/posts/88b59e59.html"/>
    <id>https://jsq180.github.io/posts/88b59e59.html</id>
    <published>2022-10-16T00:12:24.000Z</published>
    <updated>2022-10-17T23:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果是自动化部署的话，就需要有一台自己的服务器，这里将从零开始，从购买服务器到部署全流程详解。</p><h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p>这里以阿里云为例，登录账号，进入控制台页面。</p><h2 id="点击创建实例"><a href="#点击创建实例" class="headerlink" title="点击创建实例"></a>点击创建实例</h2><p><img src="https://s1.xptou.com/2022/10/16/634bb9f2dd364.png" alt="创建实例"></p><h2 id="选择购买类型"><a href="#选择购买类型" class="headerlink" title="选择购买类型"></a>选择购买类型</h2><p>创建实例进入购买服务器页面，可以自由选择服务器的类型。<br><img src="https://s1.xptou.com/2022/10/16/634bbbbf66116.png" alt="购买选项步骤1"><br><img src="https://s1.xptou.com/2022/10/16/634bbd0fa573f.png" alt="购买选项步骤2"></p><h2 id="进入网络和安全组"><a href="#进入网络和安全组" class="headerlink" title="进入网络和安全组"></a>进入网络和安全组</h2><p><img src="https://s1.xptou.com/2022/10/16/634bbfc6ab508.png" alt="网络和安全组选项操作"></p><h3 id="新建安全组"><a href="#新建安全组" class="headerlink" title="新建安全组"></a>新建安全组</h3><p>如果有安全组，则可以跳过此步骤，没有就新建。<br><img src="https://s1.xptou.com/2022/10/16/634bc02f3edaf.png" alt="安全组信息配置"></p><p>安全组下方有开放端口，默认只有表中的端口时可以访问到的，其它的一律访问不到<br><img src="https://s1.xptou.com/2022/10/16/634bc0deb2de7.png" alt="安全组端口解释"></p><p>点击创建安全组之后，展示一下界面，就表示安全组创建成功、<br><img src="https://s1.xptou.com/2022/10/16/634bc12ceca19.png" alt="安全组创建成功页面"></p><p>点击选择安全组之后，其它都不用管。直接下一步就可以了。<br><img src="https://s1.xptou.com/2022/10/16/634bc1c45eee4.png" alt="选择安全组"></p><p><strong>注意：</strong> 如果提示 <strong>安全组与 VPC 不匹配，请重新选择 VPC 或 安全组</strong> 的提示。就重新刷新页面，从第一步开始再操作一遍，原因是页面没获取到最新的安全组信息。</p><h2 id="云服务-ESC"><a href="#云服务-ESC" class="headerlink" title="云服务 ESC"></a>云服务 ESC</h2><p>点击下一步可以进入该界面，进行如下操作即可。<br><img src="https://s1.xptou.com/2022/10/16/634bc45048712.png" alt="密码设置及操作"><br><strong>此处纠正：直接确认订单，无需下一步</strong></p><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>确认订单之后进入该界面<br><img src="https://s1.xptou.com/2022/10/16/634bc5294b408.png" alt="创建实例"></p><h2 id="管理控制台"><a href="#管理控制台" class="headerlink" title="管理控制台"></a>管理控制台</h2><p>点击创建实例 ==&gt; 签署并下单 ==&gt; 返回管理控制台<br>即可进入控制台页面<br><img src="https://s1.xptou.com/2022/10/16/634bc58a4d85e.png" alt="管理控制台"></p><h1 id="手动部署；连接"><a href="#手动部署；连接" class="headerlink" title="手动部署；连接"></a>手动部署；连接</h1><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><ol><li><p>打开命令行，执行以下命令<br><img src="https://s1.xptou.com/2022/10/16/634bc7005ecd2.png" alt="执行连接命令"></p></li><li><p>按下回车键，出现以下内容（大致意思就是是否要建立连接），输入 yes。并输入密码（自定义密码时候的密码）<br><img src="https://s1.xptou.com/2022/10/16/634bc78203c70.png" alt="输入yes和密码"></p></li><li><p>输入密码回车之后，出现以下内容则表示连接成功，否则就是连接失败<br><img src="https://s1.xptou.com/2022/10/16/634bc886df0b7.png" alt="连接成功"></p></li></ol><h2 id="vscode-操作"><a href="#vscode-操作" class="headerlink" title="vscode 操作"></a>vscode 操作</h2><p>通过 vscode 插件来完成链接</p><ol><li>在 vscode 插件中搜索 remote SSH，安装即可。<br><img src="https://s1.xptou.com/2022/10/16/634bc96e2c476.png" alt="插件安装"></li><li>安装成功之后，在左侧会出现如下图标，并点击<br><img src="https://s1.xptou.com/2022/10/16/634bca237c89b.png" alt="插件点击"></li><li>创建地址<br><img src="https://s1.xptou.com/2022/10/16/634bcb6ccf5a1.png" alt="点击加号并创建链接"><br>输入链接的登录名和 IP 之后回车，会出现以下图片，默认再次回车就好<br><img src="https://s1.xptou.com/2022/10/16/634bcbe9ce4cd.png" alt="一次回车之后显示"><br>再次回车之后，出现如下界面，就表示地址创建成功<br><img src="https://s1.xptou.com/2022/10/16/634bcc3e59664.png" alt="地址创建成功"></li><li>建立连接<br><img src="https://s1.xptou.com/2022/10/16/634bccc0dc146.png" alt="建立连接"><br>点击之后会出现如下界面。选择连接对应的操作系统。因为使用的是 CentOS Stream，操作系统是 Linux 内核，所以选择 Linux<br><img src="https://s1.xptou.com/2022/10/16/634bcd8c8259b.png" alt="选择连接对应的操作系统"><br>回车之后弹出输入密码<br><img src="https://s1.xptou.com/2022/10/16/634bcdc1d123a.png" alt="输入密码界面"><br>输入密码，回车，出现如下所示，表示连接成功<br><img src="https://s1.xptou.com/2022/10/16/634bcfbb95129.png" alt="连接成功图片"></li></ol><p>连接建立成功之后，打开文件夹，打开的就是服务器终端的文件夹，新建终端，也是服务器的终端<br><img src="https://s1.xptou.com/2022/10/16/634bd03d0c6ad.png" alt="打开文件夹"></p><h1 id="手动部署服务器"><a href="#手动部署服务器" class="headerlink" title="手动部署服务器"></a>手动部署服务器</h1><p>如果是手动部署服务器的话，我们需要使用到 Nginx。<br>因为 Nginx 可以监听服务器的端口，不使用 Nginx 的话，直接访问我们的服务器端口，是无法访问成功的。</p><p><img src="https://s1.xptou.com/2022/10/16/634bd26eccac5.png" alt="服务器访问过程"></p><h2 id="搜索服务器是否包含-Nginx"><a href="#搜索服务器是否包含-Nginx" class="headerlink" title="搜索服务器是否包含 Nginx"></a>搜索服务器是否包含 Nginx</h2><p>此时的 dnf 命令是因为使用的 CentOS，其它系统不清楚</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf search nginx<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/16/634bddb179bfb.png" alt="搜索nignx"></p><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install nginx<br></code></pre></td></tr></table></figure><p>输入命令回车之后，显示如下页面，大致就是需要安装的内容以及大小。根据提示输入 y 即可<br><img src="https://s1.xptou.com/2022/10/16/634bdefb22be4.png" alt="安装命令并确认安装"></p><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><p>其实 Nginx 就和软件一样，安装了不启动，跟没安装一样，所以安装成功之后启动，也可以使用 Tomcat 启动，这里不做过多拓展。</p><p>需要使用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Nginx</span><br>systemctl start nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 Nginx 状态，一般用于查看是否启动成功</span><br>systemctl status nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开机自启 一般在安装 Nginx 后，都会做一步这样的操作</span><br>systemctl enable nginx<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/16/634be12a108f9.png" alt="启动nginx以及查看是否启动成功"></p><p>设置开机自启，为了之后重启的时候不需要再次手动启动 Nginx<br><img src="https://s1.xptou.com/2022/10/16/634be1f44bb41.png" alt="设置开机自启"></p><h2 id="再次访问服务器地址"><a href="#再次访问服务器地址" class="headerlink" title="再次访问服务器地址"></a>再次访问服务器地址</h2><p>此时我们再次访问之前访问失败的服务器公网 IP 地址<br><img src="https://s1.xptou.com/2022/10/16/634be28a18ef0.png" alt="服务器地址访问"></p><p>此时我们发现，服务器已经做出了响应，这个页面就是 Nginx 的默认页面。<br>只要能够看到这个页面，就说明 Nginx 安装时没有任何问题的。<br>此时就可以将项目文件放在服务器的某个文件夹下，就可以部署成功了。</p><h1 id="Jenkins-自动化部署配置安装"><a href="#Jenkins-自动化部署配置安装" class="headerlink" title="Jenkins 自动化部署配置安装"></a>Jenkins 自动化部署配置安装</h1><h2 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h2><p>Jenkins 本身是依赖 java 的，所以需要安装 java 环境。<br><strong>注意：</strong> 如果 Jenkins 安装最新的，那么 java 也要安装最新的（目前已经是 java 17）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf search java<br></code></pre></td></tr></table></figure><p>老规矩，和安装 Nginx 一样，先搜索相关内容，才能去下载。执行搜索命令<br><img src="https://s1.xptou.com/2022/10/16/634be825c09fc.png" alt="搜索java版本"></p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install java-17-openjdk<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/16/634be8d290621.png" alt="安装最新java版本"><br>向下拉到最后，有确认是否安装的提示（和安装 Nginx 基本一致）<br>输入 y 回车等待安装完成即可。</p><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><p>先搜索一下，有没有 Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf search jenkins<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/16/634beb3353e77.png" alt="搜索Jenkins"><br><strong>此时的执行结果和以前的都不一样，这次搜索完成之后，并未发现 Jenkins，也就是说 DNS 服务器并没有安装 Jenkins，这就意味着我们也不能直接 install 进行安装了</strong></p><h2 id="配置-Jenkins"><a href="#配置-Jenkins" class="headerlink" title="配置 Jenkins"></a>配置 Jenkins</h2><h3 id="下载-Jenkins-到服务器文件夹"><a href="#下载-Jenkins-到服务器文件夹" class="headerlink" title="下载 Jenkins 到服务器文件夹"></a>下载 Jenkins 到服务器文件夹</h3><p>因为 Jenkins 本身是没有在 dnf 的软件仓库包中的，所以我们需要链接 Jenkins 仓库</p><ul><li>wget 是 Linux 中下载文件的一个工具，-O 表示输出到某个文件夹并命名什么文件</li><li>rpm：全称是 The RPM Package Manage，是 Linux 下一个软件把你管理器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo<br></code></pre></td></tr></table></figure><p>把 Jenkins 从仓库拉取，并下载保存下来。</p><h3 id="导入-GPG-秘钥确保合法性"><a href="#导入-GPG-秘钥确保合法性" class="headerlink" title="导入 GPG 秘钥确保合法性"></a>导入 GPG 秘钥确保合法性</h3><p>导入 GPG 秘钥以确保您的软件合法<br>就像安装手机软件一样，服务器会对外部安装的程序进行检测，不合法的不予使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">导入 GPG 秘钥以确保您的软件合法</span><br>rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>rpm --import https://pkg.jenkins-ci-org/redhat/jenkins-ci-org.key<br></code></pre></td></tr></table></figure><h3 id="编辑文件-etc-yum-repos-d-jenkins-repo"><a href="#编辑文件-etc-yum-repos-d-jenkins-repo" class="headerlink" title="编辑文件 /etc/yum.repos.d/jenkins.repo"></a>编辑文件 /etc/yum.repos.d/jenkins.repo</h3><p><code>/etc/yum.repos.d/jenkins.repo</code>这个路径就是我们安装下载 Jenkins 时候的文件路径。</p><ul><li>可以通过 vim 编辑</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/yum.repos.d/jenkins.repo<br></code></pre></td></tr></table></figure><p>输入以上命令，回车之后，显示以下界面：<br><img src="https://s1.xptou.com/2022/10/16/634c00e735aa3.png" alt="vim打开的文件夹内容"></p><p>打开文件夹内容之后，此时我们是无法编辑的，在终端区域敲击 i 键，出现 INSERT ，就可以编辑了<br><img src="https://s1.xptou.com/2022/10/16/634c0160c0aeb.png" alt="敲击i键进入编辑状态"></p><p>粘贴以下内容替换原来的，或者将原本的内容对比进行更改都可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[jenkins]<br>name=Jenkins-stable<br>baseurl=http://pkg.jenkins.io/redhat<br>gpgcheck=1<br></code></pre></td></tr></table></figure><p>此时内容更改完毕，按 <strong>esc</strong> 键退出编辑状态。<br>但此时还是在 vim 模式下，且内容只是编辑了，并未保存。<br>按 <strong>shift + 冒号键</strong>，并输入 <strong>wq</strong>，然后按 <strong>回车键</strong> 即可。（wq 就是退出并保存）<br><img src="https://s1.xptou.com/2022/10/16/634c043cbf929.png" alt="退出并保存"></p><h3 id="真正安装-Jenkins"><a href="#真正安装-Jenkins" class="headerlink" title="真正安装 Jenkins"></a>真正安装 Jenkins</h3><p>经过以上操作，我们的服务器才算是可以真正能够安装 Jenkins 了。<br>此时就可以 install 了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install jenkins<br></code></pre></td></tr></table></figure><p>此时就出现我们比较熟悉的界面了，输入 y，安装即可<br><img src="https://s1.xptou.com/2022/10/16/634c0456115d4.png" alt="Jenkins安装界面"></p><h2 id="启动-Jenkins"><a href="#启动-Jenkins" class="headerlink" title="启动 Jenkins"></a>启动 Jenkins</h2><p>跟启动 Nginx 如出一辙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 Jenkins</span><br>systemctl start jenkins<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否启动成功</span><br>systemctl status jenkins<br><span class="hljs-meta prompt_"># </span><span class="language-bash">让 Jenkins随操作系统启动也自启动</span><br>systemctl enable jsnkins<br></code></pre></td></tr></table></figure><h2 id="添加安全组允许的端口"><a href="#添加安全组允许的端口" class="headerlink" title="添加安全组允许的端口"></a>添加安全组允许的端口</h2><p>当 Jenkins 启动成功之后，默认会访问 8080 端口，但是此时访问 8080 端口依旧访问不到。<br>是因为 安全组的策略原因。<br><img src="https://s1.xptou.com/2022/10/16/634c08917b447.png" alt="安全组允许访问的端口"></p><p>此时我们可以添加端口，进行如下操作之后，点击保存即可<br><img src="https://s1.xptou.com/2022/10/16/634c09388d411.png" alt="端口添加"></p><p>此时我们再次访问 8080 端口，就可以得到响应<br><img src="https://s1.xptou.com/2022/10/16/634c09e6c4a48.png" alt="访问8080端口"></p><h2 id="访问-Jenkins-安装插件"><a href="#访问-Jenkins-安装插件" class="headerlink" title="访问 Jenkins 安装插件"></a>访问 Jenkins 安装插件</h2><p>出现以上界面是由于 Jenkins 默认给定的 8080 端口，Jenkins 提供了很多的操作。如果有其他人访问到这个端口，就需要提供管理员密码，而管理员密码只有有资格访问服务器的人才知道。<br>我们赋值页面上提供的路径到 vscode 终端中，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p>cat 就是查看某个文件的内容</p><p>此时就可以直接访问到管理员密码<br><img src="https://s1.xptou.com/2022/10/16/634c0b2c4eb22.png" alt="查看管理员密码"></p><p>然后拿着这串密码拷贝到页面的输入框内，点击继续即可进入 Jenkins 页面<br><img src="https://s1.xptou.com/2022/10/16/634c0c1360854.png" alt="Jenkins页面"></p><p>点击 第一个 安装推荐的插件，就可以自动帮你安装一些插件。<br><img src="https://s1.xptou.com/2022/10/16/634c0d1e63a8f.png" alt="安装插件"></p><h1 id="本地项目提交至-github"><a href="#本地项目提交至-github" class="headerlink" title="本地项目提交至 github"></a>本地项目提交至 github</h1><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>进入 github，右上角选择 New repository 新建仓库。</p><p><img src="https://s1.xptou.com/2022/10/17/634d496b598d6.png" alt="新建仓库"></p><p>仓库初始化完成<br><img src="https://s1.xptou.com/2022/10/17/634d49bb2db5b.png" alt="仓库初始化完成"></p><h2 id="提交本地项目至仓库"><a href="#提交本地项目至仓库" class="headerlink" title="提交本地项目至仓库"></a>提交本地项目至仓库</h2><p>在项目的根目录命令行根据仓库的提示，依次输入命令即可。<br><img src="https://s1.xptou.com/2022/10/17/634d4b46f1a03.png" alt="本地项目提交github"></p><h1 id="项目上传至服务器"><a href="#项目上传至服务器" class="headerlink" title="项目上传至服务器"></a>项目上传至服务器</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>在服务器创建一个用于项目存放的文件夹<br><img src="https://s1.xptou.com/2022/10/17/634d4be71cc97.png" alt="创建文件夹"></p><h2 id="打开文件夹"><a href="#打开文件夹" class="headerlink" title="打开文件夹"></a>打开文件夹</h2><p>创建完成之后，打开刚才创建的文件夹<br><img src="https://s1.xptou.com/2022/10/17/634d4c7d6b963.png" alt="打开文件夹"><br><img src="https://s1.xptou.com/2022/10/17/634d4d1f53cc1.png" alt="文件打开成功"></p><h2 id="将打包项目放入文件夹"><a href="#将打包项目放入文件夹" class="headerlink" title="将打包项目放入文件夹"></a>将打包项目放入文件夹</h2><p>项目完成之后，一般使用<code>npm run build</code>将项目打包完成，此时我们只需要将 build 文件夹里边的内容，拖入复制到服务器文件夹即可。<br><img src="https://s1.xptou.com/2022/10/17/634d4dab32738.png" alt="打包项目复制到文件夹"></p><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>此时我们打开公网 IP，默认访问的 80 端口，而 80 端口正在被 Nginx 监听，不过此时得到的依旧是之前的 Nginx 默认网页，它没有去服务器找寻我们上传的项目入口，此时需要对 Nginx 进行配置<br><img src="https://s1.xptou.com/2022/10/17/634d4fc295f2b.png" alt="访问公网IP"></p><p>此时我们可以在 vscode 中再打开一个终端，或者如图所示<br><img src="https://s1.xptou.com/2022/10/17/634d4fe5f13f7.png" alt="新建终端"></p><p>打开 Nginx 的配置文件 路径为：/etc/nginx/congfi<br>找到名为 confi 的文件<br><img src="https://s1.xptou.com/2022/10/17/634d506213bb2.png" alt="打开confi文件"></p><h3 id="更改-confi-配置"><a href="#更改-confi-配置" class="headerlink" title="更改 confi 配置"></a>更改 confi 配置</h3><p>步骤一：<br><img src="https://s1.xptou.com/2022/10/17/634d511aafc5c.png" alt="步骤一"></p><p>步骤而：<br><img src="https://s1.xptou.com/2022/10/17/634d54176c62e.png" alt="步骤二"><br>更改完成之后，点击 x 号关闭即可。</p><h3 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h3><p>打开 Nginx 的终端（实际上只要是在服务器终端就可以）<br><img src="https://s1.xptou.com/2022/10/17/634d54bb5d3f3.png" alt="打开终端"></p><p>然后再终端输入以下命令重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart nginx<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/17/634d54fbbf137.png" alt="重启Nginx"></p><h3 id="访问公网-IP"><a href="#访问公网-IP" class="headerlink" title="访问公网 IP"></a>访问公网 IP</h3><p>此时我们再次去访问公网 IP，或者刷新页面，运行的项目就出现在眼前了。<br><img src="https://s1.xptou.com/2022/10/17/634d55a3c60a5.png" alt="访问IP"></p><h1 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h1><h2 id="设置-Jenkins"><a href="#设置-Jenkins" class="headerlink" title="设置 Jenkins"></a>设置 Jenkins</h2><p>此时访问 8080 端口，8080 端口是被 Jenkins 所占用的<br><img src="https://s1.xptou.com/2022/10/17/634d56971261e.png" alt="创建管理员账号"></p><p>实例配置尽量不要动，否则就需要再次去安全组里添加端口<br><img src="https://s1.xptou.com/2022/10/17/634d56cabb8de.png" alt="实例配置"></p><p>点击进入 Jenkins<br><img src="https://s1.xptou.com/2022/10/17/634d570d225cf.png" alt="进入Jenkins"></p><h2 id="创建-Jenkins-部署的配置"><a href="#创建-Jenkins-部署的配置" class="headerlink" title="创建 Jenkins 部署的配置"></a>创建 Jenkins 部署的配置</h2><p>进入页面之后，呈现的就是如下内容，我们点击其中一个选项，即可进入配置自动化部署<br><img src="https://s1.xptou.com/2022/10/17/634d57cb7e7cb.png" alt="进入自动化部署"><br>输入任务名称<br><img src="https://s1.xptou.com/2022/10/17/634d584d2ff50.png" alt="输入任务名称"></p><p>选择配置选项，点击确定<br><img src="https://s1.xptou.com/2022/10/17/634d58e5d8540.png" alt="选择配置选项"></p><p>部署描述可选，选择 github，把项目存放的 github 仓库地址粘贴进来<br><img src="https://s1.xptou.com/2022/10/17/634d59ca22dce.png" alt="选择部署方式"></p><p>当项目提交至 github 后，Jenkins 是使用 git clone 进行的代码同步，而新的服务器上时没有 git 的，可以使用 <code>git --version</code>查看，没有就安装 git<br><img src="https://s1.xptou.com/2022/10/17/634d5a79905eb.png" alt="安装git"></p><p>此时再次查看 git，git 就存在了<br><img src="https://s1.xptou.com/2022/10/17/634d5b135c843.png" alt="查看git"></p><h2 id="管理凭证"><a href="#管理凭证" class="headerlink" title="管理凭证"></a>管理凭证</h2><p>如果是私有的仓库，是需要这一步的，公开的仓库，谁都可以访问，就不需要这一步骤<br><img src="https://s1.xptou.com/2022/10/17/634d5be30f921.png" alt="管理凭证"></p><p>进入管理凭证界面，点击图中图标<br><img src="https://s1.xptou.com/2022/10/17/634d5c5b3eacd.png" alt="点击图标"></p><p>点击全局凭证<br><img src="https://s1.xptou.com/2022/10/17/634d5c902ee0b.png" alt="点击全局凭证"></p><p>点击添加凭证<br><img src="https://s1.xptou.com/2022/10/17/634d5cdd94f33.png" alt="点击添加凭证"></p><p>添加访问人员的信息<br><img src="https://s1.xptou.com/2022/10/17/634d5d7aa3da4.png" alt="添加访问人员的信息"></p><h2 id="继续配置-Jenkins-的部署设置"><a href="#继续配置-Jenkins-的部署设置" class="headerlink" title="继续配置 Jenkins 的部署设置"></a>继续配置 Jenkins 的部署设置</h2><p>如果是私有仓库，选择凭证，公有的选择无就可以。<br><img src="https://s1.xptou.com/2022/10/17/634d5f0474f06.png" alt="选择凭证"></p><p>同步分支，根据自己仓库的主分支进行修改<br><img src="https://s1.xptou.com/2022/10/17/634d5f7b1f4c0.png" alt="修改分支"></p><p>构建触发器<br>就是 Jenkins 何时去进行自动化部署</p><p>构建触发器的规则如下：<br><img src="https://s1.xptou.com/2022/10/17/634d60dfa967c.png" alt="构建触发器规则"></p><p>设置构建触发<br><img src="https://s1.xptou.com/2022/10/17/634d61738a571.png" alt="设置构建"></p><h3 id="安装-node-插件"><a href="#安装-node-插件" class="headerlink" title="安装 node 插件"></a>安装 node 插件</h3><p>在构建环境之前，我们需要知道，新服务器是没有 node，而构建环境的选项中也不存在 node，所以我们需要先去安装 node 插件。<br>回到 Jenkins 首页，点击以下选项<br><img src="https://s1.xptou.com/2022/10/17/634d635b395c7.png" alt="回到首页操作"></p><p>进入后搜索 node，并勾选，点击 install 即可。安装过程中可以勾选 ‘安装成功并重启’<br><img src="https://s1.xptou.com/2022/10/17/634d63e055328.png" alt="安装node"><br>勾选安装完成自动重启<br><img src="https://s1.xptou.com/2022/10/17/634d647d07689.png" alt="勾选安装完成自动重启"><br>重启之后再次输入用户名和密码</p><h2 id="node-环境配置"><a href="#node-环境配置" class="headerlink" title="node 环境配置"></a>node 环境配置</h2><p>重启完成之后点击 全局工具配置<br><img src="https://s1.xptou.com/2022/10/17/634d654f77a07.png" alt="点击进入配置"><br>进入之后找到 node，并点击新增<br><img src="https://s1.xptou.com/2022/10/17/634d662491554.png" alt="点击新增"><br>填写 node 信息<br><img src="https://s1.xptou.com/2022/10/17/634d66abc960c.png" alt="填写node信息"></p><h2 id="再次继续配置-Jenkins-的部署设置"><a href="#再次继续配置-Jenkins-的部署设置" class="headerlink" title="再次继续配置 Jenkins 的部署设置"></a>再次继续配置 Jenkins 的部署设置</h2><p>点击选择构建 node 环境，使用默认配置即可。<br><img src="https://s1.xptou.com/2022/10/17/634d671f450bc.png" alt="构建node环境"></p><p>点击选择 shell<br>对话框中输入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">pwd<br>node -v<br>npm -v<br><br>npm install<br>npm run build<br><br>pwd<br><br>echo &#x27;构建成功&#x27;<br><br>ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除/root/hy_airbnb文件夹里所有的内容</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意：这个文件夹路径就是你的项目代码拉到服务器，服务器存放的文件路径</span><br>rm -rf /root/hy_airbnb/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">build 文件就是打包的文件名，意思是把 build 文件夹内的东西放在 /root/hy_airbnb/ 文件夹下</span><br>cp -rf ./build/* /root/hy_airbnb/<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/17/634d68fde6cc8.png" alt="自动化构建步骤"><br>此时点击保存，就构建完成了。</p><p>保存成功我们可以点击立即构建，这样就不需要等到规定的构建时间再去构建。<br><img src="https://s1.xptou.com/2022/10/17/634d6a268ac1e.png" alt="立即构建"><br>此时构建大概率会出错，因为目前构建是使用 Jenkins 构建的，而 Jenkins 是不能随便访问 root 目录下的内容的<br>这里提供了三种解决方案<br><img src="https://s1.xptou.com/2022/10/17/634d6afc7f600.png" alt="解决方案"><br>此处采用第二种赋值权限<br><img src="https://s1.xptou.com/2022/10/17/634d6c6df0b56.png" alt="赋值权限"><br>如果失败了，采用第三种解决方案，别问，问就是第一种麻烦<br><img src="https://s1.xptou.com/2022/10/17/634d6cf2698ed.png" alt="分配权限"><br>此时再次构建就可以了。</p><h1 id="检查自动化部署是否成功"><a href="#检查自动化部署是否成功" class="headerlink" title="检查自动化部署是否成功"></a>检查自动化部署是否成功</h1><p>先提交代码到 github 仓库<br><img src="https://s1.xptou.com/2022/10/17/634d6dbd13590.png" alt="代码提交到github仓库"><br>然后检查 Jenkins 上的立即构建即可查看到最新的提交信息。</p>]]></content>
    
    
    <summary type="html">对所写项目进行一个自动化部署。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目(爱彼迎)-详情页面编写</title>
    <link href="https://jsq180.github.io/posts/71271cd6.html"/>
    <id>https://jsq180.github.io/posts/71271cd6.html</id>
    <published>2022-10-13T22:41:26.000Z</published>
    <updated>2022-10-16T22:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>更多页面的房屋列表，其点击切换图片，以及自定义指示器都已经实现。而点击房屋信息的图片则跳转至详情页，是点击项的详情。在点击时，已经把点击项的数据存入 redux 中，详情页直接获取数据即可。</p><h1 id="获取-redux-中的当前项数据"><a href="#获取-redux-中的当前项数据" class="headerlink" title="获取 redux 中的当前项数据"></a>获取 redux 中的当前项数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; detailInfo &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>  <span class="hljs-attr">detailInfo</span>: state.<span class="hljs-property">detail</span>.<span class="hljs-property">detailInfo</span>,<br>&#125;));<br></code></pre></td></tr></table></figure><h1 id="页面分割组件"><a href="#页面分割组件" class="headerlink" title="页面分割组件"></a>页面分割组件</h1><p>详情页面可以分成两个组件：detail-pictures（上方的图片组件）、detail-infos（下方的信息展示组件）</p><h2 id="pictures-组件（图片悬浮高亮）"><a href="#pictures-组件（图片悬浮高亮）" class="headerlink" title="pictures 组件（图片悬浮高亮）"></a>pictures 组件（图片悬浮高亮）</h2><p>该组件是主要内容，info 组件就是单纯地数据展示，在次不过多编写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">PicturesWrapper</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pictures&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;detailInfo?.picture_urls?.[0]&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;detailInfo?.picture_urls?.slice(1, 5).map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">PicturesWrapper</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">position</span>: relative;<br><br>&gt; <span class="hljs-selector-class">.pictures</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-selector-class">.cover</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-selector-class">.cover</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* .cover &#123;</span><br><span class="hljs-comment">      opacity: 1 !important;</span><br><span class="hljs-comment">    &#125; */</span><br><br>  <span class="hljs-comment">/* .item:hover &#123;</span><br><span class="hljs-comment">      .cover &#123;</span><br><span class="hljs-comment">        opacity: 0 !important;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125; */</span><br>&#125;<br><br><span class="hljs-selector-class">.left</span>,<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>  <span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">object-fit</span>: cover;<br><br>      <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.3s</span> ease-in;<br>    &#125;<br><br>    <span class="hljs-selector-class">.cover</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">200ms</span> ease;<br>    &#125;<br><br>    <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br><br>  <span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 css 中最重要的，就是 悬浮遮罩层消失（悬浮项高亮）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* 最开始，让所有图片默认 opacity：0 （全部高亮） */</span><br><span class="hljs-selector-class">.cover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* pictures 是最外层的 div */</span><br><span class="hljs-selector-class">.pictures</span> &#123;<br>  <span class="hljs-comment">/* 当鼠标悬停在 大容器上时，让所有的图片 全部有遮罩层 */</span><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-selector-class">.cover</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 然后再去给当前悬浮的图片位置，把遮罩层去掉（即高亮） */</span><br>    <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-selector-class">.cover</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：<br><img src="https://s1.xptou.com/2022/10/14/63496c8a594dd.png" alt="效果图"></p><h1 id="picture-组件（图片查看器）"><a href="#picture-组件（图片查看器）" class="headerlink" title="picture 组件（图片查看器）"></a>picture 组件（图片查看器）</h1><p>实现点击图片进入图片查看器组件</p><h2 id="查看器展示黑色背景"><a href="#查看器展示黑色背景" class="headerlink" title="查看器展示黑色背景"></a>查看器展示黑色背景</h2><p><strong>注意：</strong> 图片查看器时没有滚动条的，但是固定定位样式书写之后会出现滚动条，原因是原本的内容区域是有滚动条的。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">position</span>: fixed;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br></code></pre></td></tr></table></figure><p><strong>我们需要在图片查看时，不管之前有没有滚动条。都要让滚动条消失，即滚动功能消失</strong></p><p>此时需要在组件内部进行操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 滚动的原因是，页面的内容过多，但是出现了滚动条 */</span><br><br>  <span class="hljs-comment">// 当组件加载时，溢出隐藏，滚动条消失</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&quot;hidden&quot;</span>;<br><br>  <span class="hljs-comment">// 当组件卸载时，即展示内容时，滚动条出现</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&quot;auto&quot;</span>;<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><h2 id="实现显示关闭功能"><a href="#实现显示关闭功能" class="headerlink" title="实现显示关闭功能"></a>实现显示关闭功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; closeClick &#125; = props;<br><span class="hljs-comment">/* 事件处理 */</span><br><span class="hljs-comment">// 关闭图片查看器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closeBtnClickHandle</span>(<span class="hljs-params"></span>) &#123;<br>  closeClick &amp;&amp; <span class="hljs-title function_">closeClick</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;close-btn&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;closeBtnClickHandle&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconClose</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.top</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">86px</span>;<br><br>  <span class="hljs-selector-class">.close-btn</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="头部和底部固定不变，内容随页面放大缩小"><a href="#头部和底部固定不变，内容随页面放大缩小" class="headerlink" title="头部和底部固定不变，内容随页面放大缩小"></a>头部和底部固定不变，内容随页面放大缩小</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">flex-direction</span>: column;<br><br><span class="hljs-comment">/* 头部 */</span><br><span class="hljs-selector-class">.top</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">86px</span>;<br>  <span class="hljs-comment">/* 关闭按钮 */</span><br>  <span class="hljs-selector-class">.close-btn</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 内容区域 */</span><br><span class="hljs-selector-class">.silder</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* 底部 */</span><br><span class="hljs-selector-class">.preview</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="特殊轮播效果结合-SwitchTansition（先移入后淡出）"><a href="#特殊轮播效果结合-SwitchTansition（先移入后淡出）" class="headerlink" title="特殊轮播效果结合 SwitchTansition（先移入后淡出）"></a>特殊轮播效果结合 SwitchTansition（先移入后淡出）</h1><h2 id="实现图片切换功能"><a href="#实现图片切换功能" class="headerlink" title="实现图片切换功能"></a>实现图片切换功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [currentIndex, setCurrentIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 按钮点击事件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">controlClickHandle</span>(<span class="hljs-params">isNext = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-keyword">let</span> newIndex = isNext ? currentIndex + <span class="hljs-number">1</span> : currentIndex - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (newIndex &lt; <span class="hljs-number">0</span>) newIndex = pictureUrls.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (newIndex &gt; pictureUrls.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) newIndex = <span class="hljs-number">0</span>;<br>  <span class="hljs-title function_">setCurrentIndex</span>(newIndex);<br>&#125;<br><br><span class="hljs-comment">// 内容部分</span><br>&lt;div className=<span class="hljs-string">&quot;silder&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(false)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;77&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;77&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(true)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;77&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;77&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;picture&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;pictureUrls[currentIndex]&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.silder</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">justify-content</span>: center;<br><br>  <span class="hljs-selector-class">.control</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>    <span class="hljs-selector-class">.btn</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">justify-content</span>: center;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">83px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">cursor</span>: pointer;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.picture</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">105vh</span>;<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      user-select: <span class="hljs-attribute">none;</span><br><span class="hljs-attribute">    &#125;</span><br><span class="hljs-attribute">  &#125;</span><br><span class="hljs-attribute">&#125;</span><br></code></pre></td></tr></table></figure><p>此时，点击左右两侧按钮，图片就实现了切换效果，但是没有动画，需要进行动画效果的操作</p><h2 id="安装-transition-动画库"><a href="#安装-transition-动画库" class="headerlink" title="安装 transition 动画库"></a>安装 transition 动画库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i react-transition-group<br></code></pre></td></tr></table></figure><h2 id="引入-transition-库并实现切换的过渡效果"><a href="#引入-transition-库并实现切换的过渡效果" class="headerlink" title="引入 transition 库并实现切换的过渡效果"></a>引入 transition 库并实现切换的过渡效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果是一个组件或内容的显示隐藏，只使用 CSSTransition 即可</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CSSTransition</span>, <span class="hljs-title class_">SwitchTransition</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-transition-group&quot;</span>;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;picture&quot;</span>&gt;</span></span><br><span class="language-xml">  &#123;/* in-out 先进入，后离开 */&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">SwitchTransition</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;in-out&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;/* 如果不集合 switch 使用，css的显示与隐藏由 in 控制。否则使用 key 控制 */&#125;</span><br><span class="language-xml">    &#123;/* in 接收的是 true 和 false ，而 key 则是两次传入的东西不一样即可 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pictureUrls[currentIndex]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      // <span class="hljs-attr">classnames</span> <span class="hljs-attr">用于书写</span> <span class="hljs-attr">css</span> <span class="hljs-attr">过渡样式</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;pic&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      // <span class="hljs-attr">必传属性</span>：<span class="hljs-attr">过渡时间</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;pictureUrls[currentIndex]&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">SwitchTransition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* 动画样式 */</span><br><br><span class="hljs-comment">/* 进入时状态 */</span><br><span class="hljs-selector-class">.pic-enter</span> &#123;<br>  <span class="hljs-comment">/* 设置初始状态是距离当前内容的左侧或右侧100%位置，根据左右按钮判断 */</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>($ &#123;(props) =&gt; (props.isNext ? <span class="hljs-string">&quot;100%&quot;</span>: <span class="hljs-string">&quot;-100%&quot;</span>)&#125;);<br>  <span class="hljs-comment">/* 初始状态是 透明色 */</span><br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 进入结束的状态以及过渡时间 */</span><br><span class="hljs-selector-class">.pic-enter-active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">200ms</span> ease;<br>&#125;<br><br><span class="hljs-comment">/* 离开时状态 */</span><br><span class="hljs-selector-class">.pic-exit</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">/* transform: translate(0); */</span><br>&#125;<br><br><span class="hljs-selector-class">.pic-exit-active</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* transform: translate(-100%); */</span><br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">200ms</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时就实现了点击左侧，图片向右移动呈现上一张，点击右侧，图片向左移动呈现下一章的效果。<br><img src="https://s1.xptou.com/2022/10/15/634a7b4436389.png" alt="静态效果图"></p><h2 id="底部图片预览选项卡"><a href="#底部图片预览选项卡" class="headerlink" title="底部图片预览选项卡"></a>底部图片预览选项卡</h2><p>因为选项卡切换可以使用之前的组件。<br>并设置 css 样式使当前项的选项卡高亮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Indicator</span> <span class="hljs-attr">selectIndex</span>=<span class="hljs-string">&#123;currentIndex&#125;</span>&gt;</span></span><br><span class="language-xml">    &#123;pictureUrls.map((item, index) =&gt; &#123;</span><br><span class="language-xml">      return (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span>&quot;<span class="hljs-attr">item</span>&quot;, <span class="hljs-attr">currentIndex</span> === <span class="hljs-string">index</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      );</span><br><span class="language-xml">    &#125;)&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Indicator</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.list</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">transition</span>: height <span class="hljs-number">300ms</span> ease;<br><br>  <span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br><br>    <span class="hljs-selector-tag">img</span> &#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">67px</span>;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-class">.active</span> &#123;<br>      <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图预览：<br><img src="https://s1.xptou.com/2022/10/15/634a8493505c0.png" alt="底部选项卡预览"></p><h2 id="实现点击选项卡内容显示对应图片"><a href="#实现点击选项卡内容显示对应图片" class="headerlink" title="实现点击选项卡内容显示对应图片"></a>实现点击选项卡内容显示对应图片</h2><p>这个就比较简单了<br>当点击时，把 currentIndex 改成当前点击项索引就好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Indicator</span> selectIndex=&#123;currentIndex&#125;&gt;<br>  &#123;pictureUrls.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span>&quot;<span class="hljs-attr">item</span>&quot;, <span class="hljs-attr">currentIndex</span> === <span class="hljs-string">index</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /* <span class="hljs-attr">点击事件</span> */</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setCurrentIndex(index)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;)&#125;<br>&lt;/<span class="hljs-title class_">Indicator</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="动态设置选项卡的显示隐藏和动画（高度控制）"><a href="#动态设置选项卡的显示隐藏和动画（高度控制）" class="headerlink" title="动态设置选项卡的显示隐藏和动画（高度控制）"></a>动态设置选项卡的显示隐藏和动画（高度控制）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// showList 时传入 less 内部的boolean，根据状态动态设置 height</span><br>&lt;div className=<span class="hljs-string">&quot;toggle&quot;</span> onClick=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">setShowList</span>(!showList)&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>隐藏照片列表<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IconTriangleArrowDown</span> /&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.list</span> &#123;<br>       <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>       <span class="hljs-attribute">overflow</span>: hidden;<br>       <span class="hljs-attribute">transition</span>: height <span class="hljs-number">300ms</span> ease;<br>       <span class="hljs-attribute">height</span>: $&#123;(props) =&gt; (props.showList ? <span class="hljs-string">&quot;67px&quot;</span> : <span class="hljs-string">&quot;0px&quot;</span>)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>图片浏览器组件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CSSTransition</span>, <span class="hljs-title class_">SwitchTransition</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-transition-group&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BraserWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconArrowLeft</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-arrow-left&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconArrowRight</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-arrow-right&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconClose</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon_close&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconTriangleArrowDown</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-triangle-arrow-down&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Indicator</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../indicator&quot;</span>;<br><span class="hljs-keyword">import</span> classNames <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconTriangleArrowTop</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-triangle-arrow-tpo&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PictureBrowser</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; pictureUrls, closeClick &#125; = props;<br>  <span class="hljs-keyword">const</span> [currentIndex, setCurrentIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [isNext, setIsNext] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> [showList, setShowList] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 滚动的原因是，页面的内容过多，但是出现了滚动条 */</span><br><br>    <span class="hljs-comment">// 当组件加载时，溢出隐藏，滚动条消失</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&quot;hidden&quot;</span>;<br>    <span class="hljs-comment">// 当组件卸载时，即展示内容时，滚动条出现</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&quot;auto&quot;</span>;<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-comment">/* 事件处理 */</span><br>  <span class="hljs-comment">// 关闭图片查看器</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">closeBtnClickHandle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    closeClick &amp;&amp; <span class="hljs-title function_">closeClick</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">controlClickHandle</span>(<span class="hljs-params">isNext = <span class="hljs-literal">true</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> newIndex = isNext ? currentIndex + <span class="hljs-number">1</span> : currentIndex - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newIndex &lt; <span class="hljs-number">0</span>) newIndex = pictureUrls.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newIndex &gt; pictureUrls.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) newIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-title function_">setCurrentIndex</span>(newIndex);<br>    <span class="hljs-title function_">setIsNext</span>(isNext);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bottomClickHandle</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-comment">// index 大于当前索引，就是点击的下一张</span><br>    <span class="hljs-comment">// 反之，点击的就是上一张，让图片向右移动</span><br>    <span class="hljs-title function_">setIsNext</span>(index &gt; currentIndex);<br>    <span class="hljs-title function_">setCurrentIndex</span>(index);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 传入 less 中，用于判断是左侧还是右侧按钮，并设置移动方向</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BraserWrapper</span> <span class="hljs-attr">isNext</span>=<span class="hljs-string">&#123;isNext&#125;</span> <span class="hljs-attr">showList</span>=<span class="hljs-string">&#123;showList&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;close-btn&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;closeBtnClickHandle&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">IconClose</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;silder&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(false)&#125;&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;77&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;77&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(true)&#125;&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;77&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;77&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;picture&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;/* in-out 先进入，后离开 */&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SwitchTransition</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;in-out&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 如果不集合 switch 使用，css的显示与隐藏由 in 控制。否则使用 key 控制 */&#125;</span><br><span class="language-xml">            &#123;/* in 接收的是 true 和 false ，而 key 则是两次传入的东西不一样即可 */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pictureUrls[currentIndex]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              // <span class="hljs-attr">classnames</span> <span class="hljs-attr">用于书写</span> <span class="hljs-attr">css</span> <span class="hljs-attr">过渡样式</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;pic&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              // <span class="hljs-attr">必传属性</span>：<span class="hljs-attr">过渡时间</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;pictureUrls[currentIndex]&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">SwitchTransition</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;preview&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                &#123;currentIndex + 1&#125;/&#123;pictureUrls.length&#125;:</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>room apartment图片&#123;currentIndex + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;toggle&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setShowList(!showList)&#125;&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;showList ? &quot;隐藏&quot; : &quot;显示&quot;&#125;照片列表<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              &#123;showList ? <span class="hljs-tag">&lt;<span class="hljs-name">IconTriangleArrowDown</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">IconTriangleArrowTop</span> /&gt;</span>&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Indicator</span> <span class="hljs-attr">selectIndex</span>=<span class="hljs-string">&#123;currentIndex&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;pictureUrls.map((item, index) =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      &quot;<span class="hljs-attr">item</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">currentIndex</span> === <span class="hljs-string">index</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">                    )&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> bottomClickHandle(index)&#125;</span><br><span class="language-xml">                  &gt;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Indicator</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BraserWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">PictureBrowser</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">pictureUrls</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PictureBrowser</span>;<br></code></pre></td></tr></table></figure><p>图片浏览器 css 样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">BraserWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  position: fixed;</span><br><span class="hljs-string">  z-index: 999;</span><br><span class="hljs-string">  top: 0;</span><br><span class="hljs-string">  left: 0;</span><br><span class="hljs-string">  bottom: 0;</span><br><span class="hljs-string">  right: 0;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  flex-direction: column;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  background-color: #333;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .top &#123;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    height: 86px;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .close-btn &#123;</span><br><span class="hljs-string">      position: absolute;</span><br><span class="hljs-string">      top: 15px;</span><br><span class="hljs-string">      right: 25px;</span><br><span class="hljs-string">      cursor: pointer;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .silder &#123;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    flex: 1;</span><br><span class="hljs-string">    justify-content: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .control &#123;</span><br><span class="hljs-string">      position: absolute;</span><br><span class="hljs-string">      z-index: 1;</span><br><span class="hljs-string">      left: 0;</span><br><span class="hljs-string">      right: 0;</span><br><span class="hljs-string">      top: 0;</span><br><span class="hljs-string">      display: flex;</span><br><span class="hljs-string">      justify-content: space-between;</span><br><span class="hljs-string">      bottom: 0;</span><br><span class="hljs-string">      color: #fff;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .btn &#123;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        justify-content: center;</span><br><span class="hljs-string">        align-items: center;</span><br><span class="hljs-string">        width: 83px;</span><br><span class="hljs-string">        height: 100%;</span><br><span class="hljs-string">        cursor: pointer;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .picture &#123;</span><br><span class="hljs-string">      position: relative;</span><br><span class="hljs-string">      height: 100%;</span><br><span class="hljs-string">      overflow: hidden;</span><br><span class="hljs-string">      width: 100%;</span><br><span class="hljs-string">      max-width: 105vh;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      img &#123;</span><br><span class="hljs-string">        position: absolute;</span><br><span class="hljs-string">        top: 0;</span><br><span class="hljs-string">        left: 0;</span><br><span class="hljs-string">        right: 0;</span><br><span class="hljs-string">        margin: 0 auto;</span><br><span class="hljs-string">        height: 100%;</span><br><span class="hljs-string">        user-select: none;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      /* 动画样式 */</span><br><span class="hljs-string"></span><br><span class="hljs-string">      /* 进入时状态 */</span><br><span class="hljs-string">      .pic-enter &#123;</span><br><span class="hljs-string">        /* 设置初始状态是距离当前内容的左侧或右侧100%位置，根据左右按钮判断 */</span><br><span class="hljs-string">        transform: translateX(<span class="hljs-subst">$&#123;(props) =&gt; (props.isNext ? <span class="hljs-string">&quot;100%&quot;</span> : <span class="hljs-string">&quot;-100%&quot;</span>)&#125;</span>);</span><br><span class="hljs-string">        /* 初始状态是 透明色 */</span><br><span class="hljs-string">        opacity: 0;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      /* 进入结束的状态以及过渡时间 */</span><br><span class="hljs-string">      .pic-enter-active &#123;</span><br><span class="hljs-string">        transform: translate(0);</span><br><span class="hljs-string">        opacity: 1;</span><br><span class="hljs-string">        transition: all 200ms ease;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      /* 离开时状态 */</span><br><span class="hljs-string">      .pic-exit &#123;</span><br><span class="hljs-string">        opacity: 1;</span><br><span class="hljs-string">        /* transform: translate(0); */</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .pic-exit-active &#123;</span><br><span class="hljs-string">        opacity: 0;</span><br><span class="hljs-string">        /* transform: translate(-100%); */</span><br><span class="hljs-string">        transition: all 200ms ease;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .preview &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    justify-content: center;</span><br><span class="hljs-string">    height: 100px;</span><br><span class="hljs-string">    margin-top: 10px;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .info &#123;</span><br><span class="hljs-string">      position: absolute;</span><br><span class="hljs-string">      bottom: 10px;</span><br><span class="hljs-string">      max-width: 105vh;</span><br><span class="hljs-string">      color: #fff;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .desc &#123;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        justify-content: space-between;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        .toggle &#123;</span><br><span class="hljs-string">          cursor: pointer;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .list &#123;</span><br><span class="hljs-string">        margin-top: 3px;</span><br><span class="hljs-string">        overflow: hidden;</span><br><span class="hljs-string">        transition: height 300ms ease;</span><br><span class="hljs-string">        height: <span class="hljs-subst">$&#123;(props) =&gt; (props.showList ? <span class="hljs-string">&quot;67px&quot;</span> : <span class="hljs-string">&quot;0px&quot;</span>)&#125;</span>;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        .item &#123;</span><br><span class="hljs-string">          margin-top: 15px;</span><br><span class="hljs-string">          cursor: pointer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          img &#123;</span><br><span class="hljs-string">            height: 67px;</span><br><span class="hljs-string">            opacity: 0.5;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          &amp;.active &#123;</span><br><span class="hljs-string">            img &#123;</span><br><span class="hljs-string">              opacity: 1;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>图片浏览器用到的选项卡组件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IndicatorWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Indicator</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; selectIndex = <span class="hljs-number">0</span> &#125; = props;<br>  <span class="hljs-keyword">const</span> contentRef = <span class="hljs-title function_">useRef</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1、获取 slectIndex 对应的 item，取其宽度及offsetLeft</span><br>    <span class="hljs-keyword">const</span> selectItemEl = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">children</span>[selectIndex];<br>    <span class="hljs-comment">// console.log(selectItemEl);</span><br>    <span class="hljs-comment">// 2、计算 item 距离左侧的距离和 自身宽度</span><br>    <span class="hljs-keyword">const</span> itemLeft = selectItemEl.<span class="hljs-property">offsetLeft</span>;<br>    <span class="hljs-keyword">const</span> itemWidth = selectItemEl.<span class="hljs-property">clientWidth</span>;<br>    <span class="hljs-comment">// 3、content 的可视宽度  和  实际内容宽度</span><br>    <span class="hljs-keyword">const</span> contentWidth = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientWidth</span>;<br>    <span class="hljs-keyword">const</span> contentScroll = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">scrollWidth</span>;<br>    <span class="hljs-comment">// 4、滚动距离</span><br>    <span class="hljs-keyword">let</span> distance = itemLeft + itemWidth * <span class="hljs-number">0.5</span> - contentWidth * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(distance);<br>    <span class="hljs-comment">// 左侧特殊情况处理</span><br>    <span class="hljs-keyword">if</span> (distance &lt; <span class="hljs-number">0</span>) distance = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 右侧特殊情况处理</span><br>    <span class="hljs-keyword">const</span> totalDistance = contentScroll - contentWidth;<br>    <span class="hljs-keyword">if</span> (distance &gt; totalDistance) distance = totalDistance;<br>    <span class="hljs-comment">// 5、设置滚动距离</span><br>    contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;-distance&#125;</span>px)`</span>;<br>  &#125;, [selectIndex]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IndicatorWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;i-content&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;contentRef&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;props.children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">IndicatorWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">Indicator</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">selectIndex</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Indicator</span>;<br></code></pre></td></tr></table></figure><p>相关组件的 css 样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">IndicatorWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  overflow: hidden;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .i-content &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    transition: transform 200ms ease;</span><br><span class="hljs-string">    &gt; * &#123;</span><br><span class="hljs-string">      flex-shrink: 0;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h1><p>这个是出自 room-item 组件。<br>问题是：当点击按钮切换图片时，由于图片本身绑定的有跳转功能，所以会在切换完成后立马跳转页面<br>解决方法：<code>e.stopPropagation()</code>即可</p><h1 id="公共头部组件（不同页面不同效果）"><a href="#公共头部组件（不同页面不同效果）" class="headerlink" title="公共头部组件（不同页面不同效果）"></a>公共头部组件（不同页面不同效果）</h1><p><strong>分析：</strong> header 头部组件原本是放在 App.js 中的，这样，头部组件之下的才是各个页面之间的组件。<br>但是这样写，header 组件就与当前展示的页面时哪个页面了。<br><strong>解决方法一：</strong> 最简单的方法，就是把 header 组件在每个页面中引入一次。<br><strong>解决方法二：</strong> 在 App.js 中根据 header 组件在 redux 中的不同状态，来控制 不同页面的不同展示效果（采用）</p><h2 id="header-状态-redux-存储"><a href="#header-状态-redux-存储" class="headerlink" title="header 状态 redux 存储"></a>header 状态 redux 存储</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> mainSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;main&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">headerConfig</span>: &#123;<br>      <span class="hljs-comment">// 头部是否固定定位</span><br>      <span class="hljs-attr">isFixed</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">changeHeaderConfigAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">headerConfig</span> = payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 导出 action 供页面 dispatch 调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeHeaderConfigAction &#125; = mainSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-comment">// 导出供 index.js 合并reducer</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> mainSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><h2 id="页面加载时-dispatch-修改状态"><a href="#页面加载时-dispatch-修改状态" class="headerlink" title="页面加载时 dispatch 修改状态"></a>页面加载时 dispatch 修改状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeHeaderConfigAction</span>(&#123; <span class="hljs-attr">isFixed</span>: <span class="hljs-literal">false</span> &#125;));<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="AppHeader-组件响应数据的改变"><a href="#AppHeader-组件响应数据的改变" class="headerlink" title="AppHeader 组件响应数据的改变"></a>AppHeader 组件响应数据的改变</h2><p>根据以上思路，当我们进入不同页面时，为 header 组件创建的 redux 的状态都会发生变化，相应的，header 组件应该根据这些状态呈现不同的样式效果。</p><p>首先需要拿到当前最新的状态，根据状态来设置最新的 css 样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; headerConfig &#125; = <span class="hljs-title function_">useSelector</span>(<br>  <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">headerConfig</span>: state.<span class="hljs-property">main</span>.<span class="hljs-property">headerConfig</span>,<br>  &#125;),<br>  shallowEqual<br>);<br><br><span class="hljs-keyword">const</span> &#123; isFixed &#125; = headerConfig;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="hljs-comment">// 如果 isFixed=true，给 div 添加一个 fixed 类名</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HeaderWrapper</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(&#123;</span> <span class="hljs-attr">fixed:</span> <span class="hljs-attr">isFixed</span> &#125;)&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HeaderLeft</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HeaderCenter</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HeaderRight</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h1 id="Suspense-异步加载导致状态改变而组件不被监听"><a href="#Suspense-异步加载导致状态改变而组件不被监听" class="headerlink" title="Suspense 异步加载导致状态改变而组件不被监听"></a>Suspense 异步加载导致状态改变而组件不被监听</h1><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>问题：<code>&lt;AppHeader/&gt;</code>组件是在 App.js 内部的，当每进入一个新的页面时，页面懒加载导致 react 底层的 subscribe 无法监听到 store 中的数据改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeProvider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>具体情况如图所示：<br><img src="https://s1.xptou.com/2022/10/15/634ad1c31688c.png" alt="原因"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>解决方法很简单，将 Suspense 放在 Provider 内部就可以了，证明懒加载也是数据 Provider 的一部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Provider</span> store=&#123;store&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeProvider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Provider</span>&gt;<br></code></pre></td></tr></table></figure><p>此时问题就解决了。<br>但是由于组件异步加载，监听到状态的改变而会多刷新几次。</p><p>当异步加载组件时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;@/views/home&quot;</span>));<br></code></pre></td></tr></table></figure><p>造成的结果：<br><img src="https://s1.xptou.com/2022/10/15/634ad431a6f17.png" alt="异步加载组件打印"></p><p>当同步加载时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/home&quot;</span>;<br></code></pre></td></tr></table></figure><p>打印结果：<br><img src="https://s1.xptou.com/2022/10/15/634ad4cbb7b17.png" alt="同步加载打印"></p><p><strong>前两次的打印是懒加载下页面 js 未被加载完的情况下，header 组件获取了未 dispatch 的状态，即（老的状态）。当 js 加载完毕，dispatch 后，header 组件监听到状态发生改变，就会再次执行一遍代码</strong><br>解决方法：<br>Suspense 不要放在最外部的 index.js 中，放在 App.jsx 中就可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">AppHeader</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span>&#123;useRoutes(routes)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">AppFooter</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>因为 routes 中的内容才是我们真正想要异步加载的。</p><h1 id="页面加载内容默认滚动到顶部"><a href="#页面加载内容默认滚动到顶部" class="headerlink" title="页面加载内容默认滚动到顶部"></a>页面加载内容默认滚动到顶部</h1><p>因为每个页面都需要，这种可以直接在 App.jsx 中编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br><span class="hljs-comment">// 当 pathname 改变时，意味着页面发生改变，此时执行 scroll，让其滚动到顶部即可</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;, [location.<span class="hljs-property">pathname</span>]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">点击房屋列表时跳转到详情页面，主要展示点击项的所有图片以及点击切换效果。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目(爱彼迎)-更多页面编写</title>
    <link href="https://jsq180.github.io/posts/69d45264.html"/>
    <id>https://jsq180.github.io/posts/69d45264.html</id>
    <published>2022-10-08T22:16:02.000Z</published>
    <updated>2022-10-13T22:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>首页基本完工，开始 Entire（更多）页面的搭建，从页面的分析大组件拆分，到细化到每个小组件的拆分复用。</p><h1 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h1><p>从官网上看，页面结构大致以上中下结构进行划分，上部的选项卡，中间的内容区域，以及下方的分页器。<br><img src="https://s1.xptou.com/2022/10/08/634186fc1581d.png" alt="Entire页面结构划分"></p><h1 id="页面大组件初步构建"><a href="#页面大组件初步构建" class="headerlink" title="页面大组件初步构建"></a>页面大组件初步构建</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">EntireFilter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/entire-filter&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">EntirePagination</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/entire-pagination&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">EntireRooms</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/entire-rooms&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EntireWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Entire</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">EntireWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">EntireFilter</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">EntireRooms</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">EntirePagination</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">EntireWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Entire</span>;<br></code></pre></td></tr></table></figure><h1 id="头部过滤选项卡"><a href="#头部过滤选项卡" class="headerlink" title="头部过滤选项卡"></a>头部过滤选项卡</h1><h2 id="选项卡点击选中及移除"><a href="#选项卡点击选中及移除" class="headerlink" title="选项卡点击选中及移除"></a>选项卡点击选中及移除</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FilterWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> filterData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/data/filter_data.json&quot;</span>;<br><span class="hljs-keyword">import</span> classNames <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EntireFilter</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [selectItems, setSelectItems] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">itemClickHandle</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-keyword">const</span> newItems = [...selectItems];<br>    <span class="hljs-keyword">if</span> (newItems.<span class="hljs-title function_">includes</span>(item)) &#123;<br>      <span class="hljs-comment">// 已经选中了，点击移除</span><br>      <span class="hljs-keyword">const</span> itemIndex = newItems.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">filterItem</span>) =&gt;</span> filterItem === item);<br>      newItems.<span class="hljs-title function_">splice</span>(itemIndex, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      newItems.<span class="hljs-title function_">push</span>(item);<br>    &#125;<br>    <span class="hljs-title function_">setSelectItems</span>(newItems);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilterWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;filter&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;filterData.map((item, index) =&gt; &#123;</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span>&quot;<span class="hljs-attr">item</span>&quot;, &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">active:</span> <span class="hljs-attr">selectItems.includes</span>(<span class="hljs-attr">item</span>),</span></span><br><span class="hljs-tag"><span class="language-xml">              &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">                itemClickHandle(item);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              &#123;item&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FilterWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EntireFilter</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">FilterWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  /*  position: fixed;</span><br><span class="hljs-string">  z-index: 99;</span><br><span class="hljs-string">  left: 0;</span><br><span class="hljs-string">  right: 0;</span><br><span class="hljs-string">  top: 80px; */</span><br><span class="hljs-string"></span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  height: 48px;</span><br><span class="hljs-string">  padding-left: 16px;</span><br><span class="hljs-string">  border-bottom: 1px solid #f2f2f2;</span><br><span class="hljs-string">  background-color: #fff;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .filter &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .item &#123;</span><br><span class="hljs-string">      margin: 0 4px 0 8px;</span><br><span class="hljs-string">      padding: 6px 12px;</span><br><span class="hljs-string">      border: 1px solid #dce0e0;</span><br><span class="hljs-string">      border-raduis: 4px;</span><br><span class="hljs-string">      color: #484848;</span><br><span class="hljs-string">      cursor: pointer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      &amp;.active &#123;</span><br><span class="hljs-string">        background: #008489;</span><br><span class="hljs-string">        border: 1px solid #008489;</span><br><span class="hljs-string">        color: #ffffff;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="Entire-页面发送网络请求存入-redux"><a href="#Entire-页面发送网络请求存入-redux" class="headerlink" title="Entire 页面发送网络请求存入 redux"></a>Entire 页面发送网络请求存入 redux</h1><p>本意是在 页面 根组件 中，在页面渲染时，调用该页面的数据请求，数据存入 redux，并从 redux 中获取缓存数据进行渲染。</p><h2 id="redux-数据创建（普通写法）"><a href="#redux-数据创建（普通写法）" class="headerlink" title="redux 数据创建（普通写法）"></a>redux 数据创建（普通写法）</h2><h3 id="创建-constants"><a href="#创建-constants" class="headerlink" title="创建 constants"></a>创建 constants</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   src\store\modules\entire\constants.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHANGE_CURRENT_PAGE</span> = <span class="hljs-string">&quot;entire/change_current_page&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHANGE_ROOM_LIST</span> = <span class="hljs-string">&quot;entire/change_room_list&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHANGE_TOTAL_COUNT</span> = <span class="hljs-string">&quot;entire/change_total_count&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="创建对应的-reducer"><a href="#创建对应的-reducer" class="headerlink" title="创建对应的 reducer"></a>创建对应的 reducer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//    src\store\modules\entire\reducer.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./constants&quot;</span>;<br><br><span class="hljs-comment">// 初始数据</span><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">currentPage</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 当前页码</span><br>  <span class="hljs-attr">roomList</span>: [], <span class="hljs-comment">// 房间列表数据</span><br>  <span class="hljs-attr">totalCount</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 数据总数</span><br>&#125;;<br><br><span class="hljs-comment">// 如果 上一次数据为空，则使用 初始数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">prevState = initialState, action</span>) &#123;<br>  <span class="hljs-comment">// 根据 type 执行对应的逻辑代码</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> actionTypes.<span class="hljs-property">CHANGE_CURRENT_PAGE</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...prevState, <span class="hljs-attr">currentPage</span>: action.<span class="hljs-property">currentPage</span> &#125;;<br><br>    <span class="hljs-keyword">case</span> actionTypes.<span class="hljs-property">CHANGE_ROOM_LIST</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...prevState, <span class="hljs-attr">roomList</span>: action.<span class="hljs-property">roomList</span> &#125;;<br><br>    <span class="hljs-keyword">case</span> actionTypes.<span class="hljs-property">CHANGE_TOTAL_COUNT</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...prevState, <span class="hljs-attr">totalCount</span>: action.<span class="hljs-property">totalCount</span> &#125;;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure><h3 id="创建对应的-action"><a href="#创建对应的-action" class="headerlink" title="创建对应的 action"></a>创建对应的 action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./constants&quot;</span>;<br><br><span class="hljs-comment">// action 返回的是一个对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeCurrentPageAction</span> = (<span class="hljs-params">currentPage</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_CURRENT_PAGE</span>,<br>  currentPage,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRoomListAction</span> = (<span class="hljs-params">roomList</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_ROOM_LIST</span>,<br>  roomList,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeTotalCountAction</span> = (<span class="hljs-params">totalCount</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_TOTAL_COUNT</span>,<br>  totalCount,<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时 redux 中数据已经构建完毕</p><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><h3 id="网络请求书写"><a href="#网络请求书写" class="headerlink" title="网络请求书写"></a>网络请求书写</h3><p>entire 模块就新建一个 entire js 文件，在其内部写请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> hyRequest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;..&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getEntireRoomList</span>(<span class="hljs-params">offset = <span class="hljs-number">0</span>, size = <span class="hljs-number">20</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/entire/list&quot;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      offset,<br>      size,<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="网络请求调用"><a href="#网络请求调用" class="headerlink" title="网络请求调用"></a>网络请求调用</h3><ol><li>最简单的就是直接在页面调用</li></ol><p>再通过 dispatch 派发数据，但此时网络请求数据又放在了页面里边</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">getEntireRoomList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></figure><ol><li>请求和逻辑放到 redux 中</li></ol><p>在 actionCreators 中进行网络请求，请求完毕直接派发存储 redux</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getEntireRoomList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services/modules/entire&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./constants&quot;</span>;<br><br><span class="hljs-comment">// action 返回的是一个对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeCurrentPageAction</span> = (<span class="hljs-params">currentPage</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_CURRENT_PAGE</span>,<br>  currentPage,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRoomListAction</span> = (<span class="hljs-params">roomList</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_ROOM_LIST</span>,<br>  roomList,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeTotalCountAction</span> = (<span class="hljs-params">totalCount</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_TOTAL_COUNT</span>,<br>  totalCount,<br>&#125;);<br><br><span class="hljs-comment">// 这里利用的时 redux-thunk 的原理</span><br><span class="hljs-comment">// 当 redux-thunk 发现返回的是一个异步函数时，会传一个 dispatch 和 getState</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchRoomListAction</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 返回的是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (dispatch, getState) =&gt; &#123;<br>    <span class="hljs-comment">// 请求时需要拿到要偏移的数据量 当前页码 * 每页数量</span><br>    <span class="hljs-keyword">const</span> currentPage = <span class="hljs-title function_">getState</span>().<span class="hljs-property">entire</span>.<span class="hljs-property">currentPage</span>;<br>    <span class="hljs-comment">// 发起请求</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getEntireRoomList</span>(currentPage * <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 最新数据</span><br>    <span class="hljs-keyword">const</span> roomList = res.<span class="hljs-property">list</span>;<br>    <span class="hljs-keyword">const</span> totalCount = res.<span class="hljs-property">totalCount</span>;<br><br>    <span class="hljs-comment">// 数据去存 redux</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeRoomListAction</span>(roomList));<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeTotalCountAction</span>(totalCount));<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>此时 拿到最新数据 dispatch 之后，经过 reducer，存储到 redux 中。</p><ol><li>页面调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchRoomListAction</span>());<br>&#125;, [dispatch]);<br></code></pre></td></tr></table></figure><h1 id="房屋列表封装展示"><a href="#房屋列表封装展示" class="headerlink" title="房屋列表封装展示"></a>房屋列表封装展示</h1><h2 id="房屋列表初步构建"><a href="#房屋列表初步构建" class="headerlink" title="房屋列表初步构建"></a>房屋列表初步构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">RoomItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/room-item&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RoomsWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EntireRooms</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; roomList, totalCount &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">roomList</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">roomList</span>,<br>    <span class="hljs-attr">totalCount</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">totalCount</span>,<br>  &#125;));<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RoomsWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>共&#123;totalCount&#125;处住所<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;roomList.map((item) =&gt; &#123;</span><br><span class="language-xml">          return <span class="hljs-tag">&lt;<span class="hljs-name">RoomItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&quot;20%&quot;</span> /&gt;</span>;</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RoomsWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EntireRooms</span>;<br></code></pre></td></tr></table></figure><h1 id="底部分页器封装"><a href="#底部分页器封装" class="headerlink" title="底部分页器封装"></a>底部分页器封装</h1><h2 id="分页器组件初步搭建"><a href="#分页器组件初步搭建" class="headerlink" title="分页器组件初步搭建"></a>分页器组件初步搭建</h2><p>在 entire/c-cpn/entire-pagination 下书写基本样式和内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pagination</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@mui/material&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PaginationWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EntirePagination</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PaginationWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Pagination</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;15&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>第x-xx个房源, 共超过zzz个<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EntirePagination</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">PaginationWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .info &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    flex-direction: column;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .desc &#123;</span><br><span class="hljs-string">      margin-top: 16px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="修改分页器组件选中背景色"><a href="#修改分页器组件选中背景色" class="headerlink" title="修改分页器组件选中背景色"></a>修改分页器组件选中背景色</h2><ol><li>使用 MUI 官方提供的自定义主题色，将 color 的属性色进行修改，详情可查看 MUI 官网（不推荐）</li><li>修改组件的 css 样式</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.MuiPaginationItem-page</span><span class="hljs-selector-class">.Mui-selected</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#222</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>并对样式进行进一步修改，修改内容如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">justify-content</span>: center;<br><br><span class="hljs-selector-class">.info</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br><br>  <span class="hljs-selector-class">.MuiPaginationItem-page</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">9px</span>;<br><br>    <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">text-decoration</span>: underline;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.MuiPaginationItem-icon</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.MuiPaginationItem-page</span><span class="hljs-selector-class">.Mui-selected</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#222</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.desc</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面目前的内容代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  !!roomList.<span class="hljs-property">length</span> &amp;&amp; (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Pagination</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;totalPage&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 0: 1-20    1: 21-40 */&#125;第 &#123;startCount&#125; - &#123;endCount&#125; 个房源, 共超过&#123;&quot; &quot;&#125;</span><br><span class="language-xml">        &#123;totalCount&#125; 个</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info simple"><p>使用 !!roomList.length 的原因是：当 roomList.length 为 0 时，最初会显示 0 ，但是布尔类型的不会，所以进行两次取反，这样在加载阶段，就不会显示 0</p></div><h2 id="派发合并优化"><a href="#派发合并优化" class="headerlink" title="派发合并优化"></a>派发合并优化</h2><p>原本的写法中，当点击下一页的时候，要派发一个 page 页码的 action，一个 roomList 的 action，在页面中不太美观，因此这样优化。<br>将 修改 page 的数据 放在请求数据的 action 之前更改，此时需要将 当前页码 传入 fetchAction</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; fetchRoomListAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/entire/actionCreators&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pagination</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@mui/material&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PaginationWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EntirePagination</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; totalCount, currentPage, roomList &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">totalCount</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">totalCount</span>,<br>    <span class="hljs-attr">currentPage</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">currentPage</span>,<br>    <span class="hljs-attr">roomList</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">roomList</span>,<br>  &#125;));<br><br>  <span class="hljs-comment">// 必须掌握</span><br>  <span class="hljs-keyword">const</span> totalPage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(totalCount / <span class="hljs-number">20</span>); <span class="hljs-comment">// 向上取整</span><br>  <span class="hljs-keyword">const</span> startCount = currentPage * <span class="hljs-number">20</span> + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> endCount = (currentPage + <span class="hljs-number">1</span>) * <span class="hljs-number">20</span>;<br><br>  <span class="hljs-comment">/* 事件处理逻辑 */</span><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">pageChangeHandle</span>(<span class="hljs-params">e, pageCount</span>) &#123;<br>    <span class="hljs-comment">// 更新最新的页码</span><br>    <span class="hljs-comment">// dispatch(changeCurrentPageAction(pageCount - 1))</span><br>    <span class="hljs-comment">// 更新最新的列表数据</span><br><br>    <span class="hljs-comment">/* 两分次派发两个 action，不太好，这里将 page 页码数据传入 请求的 action 中，在其中更新 page */</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchRoomListAction</span>(pageCount - <span class="hljs-number">1</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PaginationWrapper</span>&gt;</span></span><br><span class="language-xml">      &#123;!!roomList.length &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Pagination</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;totalPage&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;pageChangeHandle&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 0: 1-20    1: 21-40 */&#125;第 &#123;startCount&#125; - &#123;endCount&#125; 个房源,</span><br><span class="language-xml">            共超过 &#123;totalCount&#125; 个</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EntirePagination</span>;<br></code></pre></td></tr></table></figure><p>在 store 的 action 中修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchRoomListAction</span> = (<span class="hljs-params">page = <span class="hljs-number">0</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 返回的是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (dispatch <span class="hljs-comment">/* getState */</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 修改 currentPage</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeCurrentPageAction</span>(page));<br><br>    <span class="hljs-comment">// 请求时需要拿到要偏移的数据量 当前页码 * 每页数量</span><br>    <span class="hljs-comment">// const currentPage = getState().entire.currentPage</span><br>    <span class="hljs-comment">// 发起请求</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getEntireRoomList</span>(<span class="hljs-comment">/* currentPage */</span> page * <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 最新数据</span><br>    <span class="hljs-keyword">const</span> roomList = res.<span class="hljs-property">list</span>;<br>    <span class="hljs-keyword">const</span> totalCount = res.<span class="hljs-property">totalCount</span>;<br><br>    <span class="hljs-comment">// 数据去存 redux</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeRoomListAction</span>(roomList));<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeTotalCountAction</span>(totalCount));<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="点击页码页面回到顶部和添加页面蒙版"><a href="#点击页码页面回到顶部和添加页面蒙版" class="headerlink" title="点击页码页面回到顶部和添加页面蒙版"></a>点击页码页面回到顶部和添加页面蒙版</h2><h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><p>回到顶部：<code>window.scroll(0, 0)</code> 即可。</p><h3 id="蒙版添加"><a href="#蒙版添加" class="headerlink" title="蒙版添加"></a>蒙版添加</h3><p>蒙版只遮住内容列表，头部和分页器不遮住，所以遮罩层在 roomList 中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//    src\views\entire\c-cpns\entire-rooms\index.jsx</span><br>&lt;div className=<span class="hljs-string">&quot;cover&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//    src\views\entire\c-cpns\entire-rooms\style.js</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RoomsWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  position: relative;</span><br><span class="hljs-string">  padding: 30px 20px;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .title &#123;</span><br><span class="hljs-string">    font-size: 22px;</span><br><span class="hljs-string">    font-weight: 700;</span><br><span class="hljs-string">    color: #222;</span><br><span class="hljs-string">    margin: 0 0 10px 10px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .list &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    flex-wrap: wrap;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  &gt; .cover &#123;</span><br><span class="hljs-string">    position: absolute;</span><br><span class="hljs-string">    left: 0;</span><br><span class="hljs-string">    right: 0;</span><br><span class="hljs-string">    top: 0;</span><br><span class="hljs-string">    bottom: 0;</span><br><span class="hljs-string">    background-color: rgba(255, 255, 255, 0.8);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>此时的页面效果如图所示：<br><img src="https://s1.xptou.com/2022/10/12/6346be2f985d3.png" alt="蒙版效果图"></p><h3 id="蒙版状态控制"><a href="#蒙版状态控制" class="headerlink" title="蒙版状态控制"></a>蒙版状态控制</h3><p>分析：蒙版效果在 roomList 组件中，但是 roomList 只负责渲染数据，何时请求，何时请求结束，该组件是不知道的，所以需要在网络请求变动时，将该状态进行统一管理，在 redux 中存储。</p><h4 id="redux-中存储-loading-状态（全局-loading）"><a href="#redux-中存储-loading-状态（全局-loading）" class="headerlink" title="redux 中存储 loading 状态（全局 loading）"></a>redux 中存储 loading 状态（全局 loading）</h4><p>reducer 中设置初始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>actionCreator 中创建 action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeIsLoadingAction</span> = (<span class="hljs-params">isLoading</span>) =&gt; (&#123;<br>  <span class="hljs-attr">type</span>: actionTypes.<span class="hljs-property">CHANGE_IS_LOADING</span>,<br>  isLoading,<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时 CHANGE_IS_LOADING 还不存在，去 costants 中创建该声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHANGE_IS_LOADING</span> = <span class="hljs-string">&quot;entire/change_is_loading&quot;</span>;<br></code></pre></td></tr></table></figure><p>去 reducer 中监听 action 的派发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">prevState = initialState, action</span>) &#123;<br>  <span class="hljs-comment">// 根据 type 执行对应的逻辑代码</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> actionTypes.<span class="hljs-property">CHANGE_IS_LOADING</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...prevState, <span class="hljs-attr">isLoading</span>: action.<span class="hljs-property">isLoading</span> &#125;;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时 loading 的状态管理就创建完成。</p><h4 id="请求时修改-loading-状态"><a href="#请求时修改-loading-状态" class="headerlink" title="请求时修改 loading 状态"></a>请求时修改 loading 状态</h4><p>当发起请求的时候，修改 loading 状态，蒙版生效，请求结束，再次修改 loading，蒙版消失。<br>请求是在 action 中发起的，在 action 中修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchRoomListAction</span> = (<span class="hljs-params">page = <span class="hljs-number">0</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 返回的是一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (dispatch <span class="hljs-comment">/* getState */</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 修改 currentPage</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeCurrentPageAction</span>(page));<br><br>    <span class="hljs-comment">// 请求时需要拿到要偏移的数据量 当前页码 * 每页数量</span><br>    <span class="hljs-comment">// const currentPage = getState().entire.currentPage</span><br>    <span class="hljs-comment">// 发起请求</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeIsLoadingAction</span>(<span class="hljs-literal">true</span>));<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getEntireRoomList</span>(<span class="hljs-comment">/* currentPage */</span> page * <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 请求结束</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeIsLoadingAction</span>(<span class="hljs-literal">false</span>));<br><br>    <span class="hljs-comment">// 最新数据</span><br>    <span class="hljs-keyword">const</span> roomList = res.<span class="hljs-property">list</span>;<br>    <span class="hljs-keyword">const</span> totalCount = res.<span class="hljs-property">totalCount</span>;<br><br>    <span class="hljs-comment">// 数据去存 redux</span><br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeRoomListAction</span>(roomList));<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeTotalCountAction</span>(totalCount));<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果是个全局 loading，每个页面都需要，可以放在 拦截器当中</p><h4 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h4><p>路径：src\views\entire\c-cpns\entire-rooms</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EntireRooms</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; roomList, totalCount, isLoading &#125; = <span class="hljs-title function_">useSelector</span>(<br>    <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>      <span class="hljs-attr">roomList</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">roomList</span>,<br>      <span class="hljs-attr">totalCount</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">totalCount</span>,<br>      <span class="hljs-attr">isLoading</span>: state.<span class="hljs-property">entire</span>.<span class="hljs-property">isLoading</span>,<br>    &#125;),<br>    shallowEqual<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RoomsWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>共&#123;totalCount&#125;处住所<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;roomList.map((item) =&gt; &#123;</span><br><span class="language-xml">          return <span class="hljs-tag">&lt;<span class="hljs-name">RoomItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&quot;20%&quot;</span> /&gt;</span>;</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isLoading &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RoomsWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EntireRooms</span>;<br></code></pre></td></tr></table></figure><h1 id="图片被压缩问题"><a href="#图片被压缩问题" class="headerlink" title="图片被压缩问题"></a>图片被压缩问题</h1><p>这是同一张图片，原图片时竖着的，但由于 css 的属性设置，为了适应现有的空间，图片成为了一张横着的</p><p><img src="https://s1.xptou.com/2022/10/12/6346c06860a0b.png" alt="图片被压缩"></p><p>如果你不希望图片被压缩，同时占满整个空间的话，可以这样做：<br>添加一个属性：<code>object-fit: cover;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 不压缩的情况下 ，把整个区域遮盖住*/</span><br>  <span class="hljs-comment">/* 图片是无法展示完全的，因为原图片宽高和空间高度不匹配，但是没有被压缩 */</span><br>  <span class="hljs-attribute">object-fit</span>: cover;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图对比：<br><img src="https://s1.xptou.com/2022/10/12/6346c272d8cc4.png" alt="效果图对比"></p><h1 id="房屋列表每一项的图片轮播"><a href="#房屋列表每一项的图片轮播" class="headerlink" title="房屋列表每一项的图片轮播"></a>房屋列表每一项的图片轮播</h1><p>修改 room-item 组件的内容</p><h2 id="图片轮播图初步构建"><a href="#图片轮播图初步构建" class="headerlink" title="图片轮播图初步构建"></a>图片轮播图初步构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=<span class="hljs-string">&#x27;inner&#x27;</span>&gt;<br>        &#123;<span class="hljs-comment">/* &lt;div className=&#x27;cover&#x27;&gt;</span><br><span class="hljs-comment">          &lt;img src=&#123;itemData.picture_url&#125; alt=&quot;&quot; /&gt;</span><br><span class="hljs-comment">        &lt;/div&gt; */</span>&#125;<br>        &lt;div className=<span class="hljs-string">&#x27;swiper&#x27;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Carousel</span>&gt;</span></span><br><span class="language-xml">            &#123;</span><br><span class="language-xml">              itemData.picture_urls.map(item =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;cover&#x27;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                )</span><br><span class="language-xml">              &#125;)</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Carousel</span>&gt;</span></span><br>        &lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="自定义按钮"><a href="#自定义按钮" class="headerlink" title="自定义按钮"></a>自定义按钮</h2><p>点击左右两侧的箭头按钮来进行图片的切换<br>此时可以使用 svg 封装的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=<span class="hljs-string">&quot;swiper&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Carousel</span> <span class="hljs-attr">dots</span>=<span class="hljs-string">&#123;false&#125;</span>&gt;</span></span><br><span class="language-xml">    &#123;itemData.picture_urls.map((item) =&gt; &#123;</span><br><span class="language-xml">      return (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      );</span><br><span class="language-xml">    &#125;)&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Carousel</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="动态设置-svg-图片的宽高"><a href="#动态设置-svg-图片的宽高" class="headerlink" title="动态设置 svg 图片的宽高"></a>动态设置 svg 图片的宽高</h3><p>我们可以使用之前的 svg 封装成的 Icon 组件来作为左右两边的按钮使用。<br>但是，svg 的宽高不尽人意，此时需要修改成动态的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; styleStrToObj &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">IconArrowRight</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 接收一个 props，不传则给默认宽高</span><br>  <span class="hljs-keyword">const</span> &#123; width = <span class="hljs-number">12</span>, height = <span class="hljs-number">12</span> &#125; = props;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 18 18&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;next&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">focusable</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styleStrToObj(</span></span></span><br><span class="hljs-tag"><span class="language-xml">        `<span class="hljs-attr">height:</span> $&#123;<span class="hljs-attr">height</span>&#125;<span class="hljs-attr">px</span>; <span class="hljs-attr">width:</span> $&#123;<span class="hljs-attr">width</span>&#125;<span class="hljs-attr">px</span>; <span class="hljs-attr">display:</span> <span class="hljs-attr">block</span>; <span class="hljs-attr">fill:</span> <span class="hljs-attr">currentcolor</span>;`</span></span><br><span class="hljs-tag"><span class="language-xml">      )&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;m4.29 1.71a1 1 0 1 1 1.42-1.41l8 8a1 1 0 0 1 0 1.41l-8 8a1 1 0 1 1 -1.42-1.41l7.29-7.29z&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">fillRule</span>=<span class="hljs-string">&quot;evenodd&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">IconArrowRight</span>;<br></code></pre></td></tr></table></figure><p>left 左侧图片同理设置。</p><h3 id="按钮样式设置"><a href="#按钮样式设置" class="headerlink" title="按钮样式设置"></a>按钮样式设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=<span class="hljs-string">&quot;slider&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Carousel</span> <span class="hljs-attr">dots</span>=<span class="hljs-string">&#123;false&#125;</span>&gt;</span></span><br><span class="language-xml">    &#123;itemData.picture_urls.map((item) =&gt; &#123;</span><br><span class="language-xml">      return (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      );</span><br><span class="language-xml">    &#125;)&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Carousel</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.slider</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-selector-class">.control</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.control</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">display</span>: none;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>    <span class="hljs-selector-class">.btn</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">justify-content</span>: center;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">83px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>        to left,<br>        transparent <span class="hljs-number">0%</span>,<br>        <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>) <span class="hljs-number">100%</span><br>      );<br><br>      <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:right</span> &#123;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>          to right,<br>          transparent <span class="hljs-number">0%</span>,<br>          <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>) <span class="hljs-number">100%</span><br>        );<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="点击按钮图片切换"><a href="#点击按钮图片切换" class="headerlink" title="点击按钮图片切换"></a>点击按钮图片切换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sliderRef = <span class="hljs-title function_">useRef</span>();<br><br><span class="hljs-comment">// 按钮点击事件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">controlClickHandle</span>(<span class="hljs-params">isRight = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-comment">// 右侧 下一章图片  左侧 上一张图片，调用官方给与的方法</span><br>  isRight ? sliderRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">next</span>() : sliderRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">prev</span>();<br>&#125;<br><br>&lt;div className=<span class="hljs-string">&quot;control&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(false)&#125;&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(true)&#125;&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;;<br></code></pre></td></tr></table></figure><h1 id="自定义指示器效果"><a href="#自定义指示器效果" class="headerlink" title="自定义指示器效果"></a>自定义指示器效果</h1><p>效果是：当有多张图片时，点击右侧按钮切换，选中的指示点箱左移动，对应的点移动到中间位置，当图片仅剩几张图片，快要展示完时，来到边缘时，指示点就不会再移动。<br>同时当点击图片查看的时候，下方的圆点指示器会变成 图片指示器。</p><h2 id="测试-demo"><a href="#测试-demo" class="headerlink" title="测试 demo"></a>测试 demo</h2><h3 id="初步实现点击按钮就滚动至中间"><a href="#初步实现点击按钮就滚动至中间" class="headerlink" title="初步实现点击按钮就滚动至中间"></a>初步实现点击按钮就滚动至中间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Indicator</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; selectIndex &#125; = props;<br>  <span class="hljs-keyword">const</span> contentRef = <span class="hljs-title function_">useRef</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1、获取 slectIndex 对应的 item，取其宽度及offsetLeft</span><br>    <span class="hljs-keyword">const</span> selectItemEl = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">children</span>[selectIndex];<br><br>    <span class="hljs-comment">// 2、计算 item 距离左侧的距离和 自身宽度</span><br>    <span class="hljs-keyword">const</span> itemLeft = selectItemEl.<span class="hljs-property">offsetLeft</span>;<br>    <span class="hljs-keyword">const</span> itemWidth = selectItemEl.<span class="hljs-property">clientWidth</span>;<br><br>    <span class="hljs-comment">// 3、content 的宽度</span><br>    <span class="hljs-keyword">const</span> contentWidth = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientWidth</span>;<br><br>    <span class="hljs-comment">// 4、计算移动距离</span><br>    <span class="hljs-keyword">const</span> distance = itemLeft + itemWidth * <span class="hljs-number">0.5</span> - contentWidth * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(distance);<br>    <span class="hljs-comment">// 5、设置移动距离</span><br>    contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;-distance&#125;</span>px)`</span>;<br>  &#125;, [selectIndex]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IndicatorWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;i-content&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;contentRef&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;props.children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">IndicatorWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">Indicator</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">selectIndex</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Indicator</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">IndicatorWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  overflow: hidden;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .i-content &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    transition: transform 200ms ease;</span><br><span class="hljs-string">    &gt; * &#123;</span><br><span class="hljs-string">      flex-shrink: 0;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h3 id="实现在左右两侧时不滚动"><a href="#实现在左右两侧时不滚动" class="headerlink" title="实现在左右两侧时不滚动"></a>实现在左右两侧时不滚动</h3><p>例如：当点击下一页按钮时，如果最左侧的内容是索引为 0 的，那么就不再向右移动。<br>分析：也就是说，移动的距离永远不会是正值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、获取 slectIndex 对应的 item，取其宽度及offsetLeft</span><br><span class="hljs-keyword">const</span> selectItemEl = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">children</span>[selectIndex];<br><span class="hljs-comment">// console.log(selectItemEl);</span><br><span class="hljs-comment">// 2、计算 item 距离左侧的距离和 自身宽度</span><br><span class="hljs-keyword">const</span> itemLeft = selectItemEl.<span class="hljs-property">offsetLeft</span>;<br><span class="hljs-keyword">const</span> itemWidth = selectItemEl.<span class="hljs-property">clientWidth</span>;<br><span class="hljs-comment">// 3、content 的可视宽度  和  实际内容宽度</span><br><span class="hljs-keyword">const</span> contentWidth = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientWidth</span>;<br><span class="hljs-keyword">const</span> contentScroll = contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">scrollWidth</span>;<br><span class="hljs-comment">// 4、滚动距离</span><br><span class="hljs-keyword">let</span> distance = itemLeft + itemWidth * <span class="hljs-number">0.5</span> - contentWidth * <span class="hljs-number">0.5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(distance);<br><span class="hljs-comment">// 左侧特殊情况处理</span><br><span class="hljs-keyword">if</span> (distance &lt; <span class="hljs-number">0</span>) distance = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 右侧特殊情况处理</span><br><span class="hljs-keyword">const</span> totalDistance = contentScroll - contentWidth;<br><span class="hljs-keyword">if</span> (distance &gt; totalDistance) distance = totalDistance;<br><span class="hljs-comment">// 5、设置滚动距离</span><br>contentRef.<span class="hljs-property">current</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;-distance&#125;</span>px)`</span>;<br></code></pre></td></tr></table></figure><h2 id="使用自定义指示器组件"><a href="#使用自定义指示器组件" class="headerlink" title="使用自定义指示器组件"></a>使用自定义指示器组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [selectIndex, setSelectIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 点击事件逻辑</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">controlClickHandle</span>(<span class="hljs-params">isRight = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-comment">// 右侧 下一章图片  左侧 上一张图片，调用官方给与的方法</span><br>  isRight ? sliderRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">next</span>() : sliderRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">prev</span>();<br><br>  <span class="hljs-comment">// 最新的索引</span><br>  <span class="hljs-keyword">let</span> newIndex = isRight ? selectIndex + <span class="hljs-number">1</span> : selectIndex - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> length = itemData.<span class="hljs-property">picture_urls</span>.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">if</span> (newIndex &lt; <span class="hljs-number">0</span>) newIndex = length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (newIndex &gt; length - <span class="hljs-number">1</span>) newIndex = <span class="hljs-number">0</span>;<br>  <span class="hljs-title function_">setSelectIndex</span>(newIndex);<br>&#125;<br><br><span class="hljs-comment">// 内容控制部分</span><br>&lt;div className=<span class="hljs-string">&quot;slider&quot;</span>&gt;<br>  &#123;<span class="hljs-comment">/* 左右两侧按钮组件 */</span>&#125;<br>  &lt;div className=<span class="hljs-string">&quot;control&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn left&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(false)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn right&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(true)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;indicator&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;/* 自定义指示器组件 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Indicator</span> <span class="hljs-attr">selectIndex</span>=<span class="hljs-string">&#123;selectIndex&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;itemData.picture_urls?.map((item, index) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;dot-item&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &quot;<span class="hljs-attr">dot</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">selectIndex</span> === <span class="hljs-string">index</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">              )&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Indicator</span>&gt;</span></span><br><span class="language-xml">    &#123;/* 轮播图组件 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Carousel</span> <span class="hljs-attr">dots</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;sliderRef&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;itemData.picture_urls.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Carousel</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;;<br></code></pre></td></tr></table></figure><p>效果图展示：<br><img src="https://s1.xptou.com/2022/10/13/6347e76424532.png" alt="自定义指示器效果图"></p><h1 id="点击图片跳转详情（redux-数据存储（rtk））"><a href="#点击图片跳转详情（redux-数据存储（rtk））" class="headerlink" title="点击图片跳转详情（redux 数据存储（rtk））"></a>点击图片跳转详情（redux 数据存储（rtk））</h1><p>由于点击项的数据量过于庞大，通过<code>/:id</code>或者<code>query=&#123;&#125;</code>的方式传递不是特别好，所以将当前点击项的数据放入 redux 中。</p><p>新建详情页面的 detail.js 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   src\store\modules\detail.js</span><br><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> detailSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;detail&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">detailInfo</span>: &#123;&#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">changeDetailInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">detailInfo</span> = payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeDetailInfoAction &#125; = detailSlice.<span class="hljs-property">actions</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> detailSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><p>在导出文件 index.js 中合并 reducer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   src\store\index.js</span><br><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> homeReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/home&quot;</span>;<br><span class="hljs-keyword">import</span> entireReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/entire&quot;</span>;<br><span class="hljs-keyword">import</span> detailReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/detail&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">home</span>: homeReducer,<br>    <span class="hljs-attr">entire</span>: entireReducer,<br>    <span class="hljs-attr">detail</span>: detailReducer,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>点击跳转时 dispatch 存储数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; changeDetailInfoAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/detail&quot;</span>;<br><br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br><br><span class="hljs-keyword">const</span> itemClickHandle = <span class="hljs-title function_">useCallback</span>(<br>  <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeDetailInfoAction</span>(item));<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/detail&quot;</span>);<br>    <span class="hljs-comment">// console.log(item);</span><br>  &#125;,<br>  [dispatch, navigate]<br>);<br></code></pre></td></tr></table></figure><p>此时 redux 中就可以存储这条数据了，detail 页面也就可以得到。</p>]]></content>
    
    
    <summary type="html">项目更多页面的搭建：对更多内容进行拆分，并将组件拆分封装使用。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目(爱彼迎)-首页编写</title>
    <link href="https://jsq180.github.io/posts/31336e1b.html"/>
    <id>https://jsq180.github.io/posts/31336e1b.html</id>
    <published>2022-10-06T18:42:03.000Z</published>
    <updated>2022-10-08T22:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>页面的头部组件基本部分已经搭建完成，开始分析首页的结构，并对其进行组件化封装，对部分样式的细化修改，以及解决编写中遇到的问题。</p><h1 id="Home-首页内容起步"><a href="#Home-首页内容起步" class="headerlink" title="Home 首页内容起步"></a>Home 首页内容起步</h1><p>同样的，home 文件夹下创建 style.js 来供该组件使用 css 样式。</p><p>Home 首页的内容繁多，而且很多地方都可以复用，我们可以将其拆分成一个个的组件</p><h2 id="home-banner-组件创建"><a href="#home-banner-组件创建" class="headerlink" title="home-banner 组件创建"></a>home-banner 组件创建</h2><p>该组件就是用来存放首页的图片，封装成组件的目的是，如果后续将静态图片转为轮播图，更易于维护。<br>此时按照老样子新建文件：<br><img src="https://s1.xptou.com/2022/10/06/633ea9726b9d4.png" alt="home文件夹下的目录"></p><h2 id="图片引入问题"><a href="#图片引入问题" class="headerlink" title="图片引入问题"></a>图片引入问题</h2><p>当我们使用模板字符串格式的 css 样式时，不能直接像如下代码一样，直接引入路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">BannerWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  height: 529px;</span><br><span class="hljs-string">  background: url(&quot;../../../../assets/img/cover_01.jpeg&quot;);</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>或者组件中使用 img</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeBanner</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BannerWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../../../assets/img/cover_01.jpeg&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BannerWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong style="color:red;">这种两种写法是都不能生效的。</strong></p><h3 id="图片引入问题分析"><a href="#图片引入问题分析" class="headerlink" title="图片引入问题分析"></a>图片引入问题分析</h3><p>检查 html 结构可知：<br><img src="https://s1.xptou.com/2022/10/06/633eaaa8ba997.png" alt="控制台backgrond用法"><br><img src="https://s1.xptou.com/2022/10/06/633eac77926f9.png" alt="控制台img用法"></p><p>两种路径的引入是根本没有生效的。</p><p><strong>原因：</strong> 我们引入的是<em>字符串</em>，webpack 会对图片等所有引入的文件进行打包，打包之后的路径就不是原来的路径了。这涉及到 webpack 底层打包。</p><h3 id="解决图片引入问题"><a href="#解决图片引入问题" class="headerlink" title="解决图片引入问题"></a>解决图片引入问题</h3><p><strong style="color:red;">1、使用 <code>&lt;img src=&#39;&#39; alt=&#39;&#39;/&gt;</code> 标签用法：将 图片定义成属性变量引入使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> coverImg <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/img/cover_01.jpeg&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeBanner</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BannerWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;coverImg&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BannerWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong style="color:red;">2、使用 <code>background: url()</code>用法：</strong></p><ul><li>使用和方法 1 一样的思路</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> coverImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/assets/img/cover_01.jpeg&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">BannerWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">    height: 529px;</span><br><span class="hljs-string">    background: url(<span class="hljs-subst">$&#123;coverImg&#125;</span>) center/cover;</span><br></code></pre></td></tr></table></figure><ul><li>使用 require 导入：这种方式就不需要 import 导入，直接 require 路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">BannerWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  height: 529px;</span><br><span class="hljs-string">  background: url(<span class="hljs-subst">$&#123;<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@/assets/img/cover_01.jpeg&quot;</span>)&#125;</span>) center/cover;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="首页性价比房源数据获取分析"><a href="#首页性价比房源数据获取分析" class="headerlink" title="首页性价比房源数据获取分析"></a>首页性价比房源数据获取分析</h1><p>获取的很多数据都会放在 redux 中，避免不必要的网络请求。<br>services 中定义请求模块，modules 文件夹用来存放所有的网络请求</p><h2 id="请求封装及-store-编写"><a href="#请求封装及-store-编写" class="headerlink" title="请求封装及 store 编写"></a>请求封装及 store 编写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//    src\services\modules\home.js</span><br><span class="hljs-keyword">import</span> hyRequestuest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;..&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomeGoodPriceData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/goodprice&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>modules 模块中的网络请求 通过 services 出口文件 index.js 导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> hyRequestuest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./request&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> hyRequestuest;<br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/home.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>store 中导入并使用网络请求并存入 redux。home.js 使用的是 rtk，而非传统的 redux 数据管理模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getHomeGoodPriceData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services&quot;</span>;<br><span class="hljs-comment">// createAsyncThunk 专门用来进行异步请求使用的 类似于 redux-thunk</span><br><span class="hljs-keyword">import</span> &#123; createSlice, createAsyncThunk &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-comment">// 首页调用发起请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchHomeDataAction = <span class="hljs-title function_">createAsyncThunk</span>(<span class="hljs-string">&quot;fetchdata&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">getHomeGoodPriceData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">const</span> homeSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-comment">// 高性价比房源数据</span><br>    <span class="hljs-attr">goodPriceInfo</span>: &#123;&#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">changeGoodPriceInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">goodPriceInfo</span> = payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeGoodPriceInfoAction &#125; = homeSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> homeSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><p>在页面中发起请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; fetchHomeDataAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeBanner</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/home-banner&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HomeWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 派发异步事件，发起网络请求 */</span><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchHomeDataAction</span>());<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>此时就可以拿到数据了：<br><img src="https://s1.xptou.com/2022/10/06/633ed2fd04ff3.png" alt="请求数据"></p><h2 id="将数据存入-redux"><a href="#将数据存入-redux" class="headerlink" title="将数据存入 redux"></a>将数据存入 redux</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getHomeGoodPriceData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createSlice, createAsyncThunk &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-comment">// 发起网络请求调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchHomeDataAction = <span class="hljs-title function_">createAsyncThunk</span>(<span class="hljs-string">&quot;fetchdata&quot;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getHomeGoodPriceData</span>();<br>  <span class="hljs-keyword">return</span> res;<br>&#125;);<br><br><span class="hljs-keyword">const</span> homeSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-comment">// 高性价比房源</span><br>    <span class="hljs-attr">goodPriceInfo</span>: &#123;&#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">changeGoodPriceInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">goodPriceInfo</span> = payload;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">extraReducers</span>: &#123;<br>    [fetchHomeDataAction.<span class="hljs-property">fulfilled</span>](state, &#123; payload &#125;) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state, payload);<br>      state.<span class="hljs-property">goodPriceInfo</span> = payload;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeGoodPriceInfoAction &#125; = homeSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> homeSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><p>此时查看 redux，如图所示，有数据，即成功：<br><img src="https://s1.xptou.com/2022/10/06/633ed536abe51.png" alt="goodPrice存入redux成功图"></p><h2 id="home-页获取-redux-数据"><a href="#home-页获取-redux-数据" class="headerlink" title="home 页获取 redux 数据"></a>home 页获取 redux 数据</h2><p>我们将数据存入 redux，但 home 页也需要该数据，所以获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 从 redux 中获取数据 */</span><br><span class="hljs-keyword">import</span> &#123; shallowEqual, useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123; goodPriceInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>  <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">goodPriceInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">goodPriceInfo</span>,<br><br>    <span class="hljs-comment">/*添加 shallowEqual： useSelector将比较对象的内容，如果它们相同，则不会重新呈现 */</span><br>  &#125;),<br>  shallowEqual<br>);<br></code></pre></td></tr></table></figure><h1 id="完善-AppFooter-组件"><a href="#完善-AppFooter-组件" class="headerlink" title="完善 AppFooter 组件"></a>完善 AppFooter 组件</h1><p>Footer 组件的内容，个人认为不应该是写死的，要么是通过网络请求进行渲染，要么是自己写的模拟数据，维护起来也更加方便。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;爱彼迎&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;工作机会&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;爱彼迎新闻&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;政策&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;无障碍设施&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;发现&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;信任与安全&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;旅行基金&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;商务差旅&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;爱彼迎杂志&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Airbnb.org&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;出租&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;为什么要出租&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;待客之道&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;房东义务&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;开展体验&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;资源中心&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;客服支持&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;帮助&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;邻里支持&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FooterWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> footerData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/data/footer.json&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AppFooter</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FooterWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;service&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;footerData.map((item) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.name&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">                  &#123;item.list.map((iten) =&gt; &#123;</span><br><span class="language-xml">                    return (</span><br><span class="language-xml">                      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;iten&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;iten&#125;</span>&gt;</span></span><br><span class="language-xml">                        &#123;iten&#125;</span><br><span class="language-xml">                      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                    );</span><br><span class="language-xml">                  &#125;)&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            );</span><br><span class="language-xml">          &#125;)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;statement&quot;</span>&gt;</span></span><br><span class="language-xml">          © 2022 Airbnb, Inc. All rights reserved.条款 · 隐私政策 · 网站地图 ·</span><br><span class="language-xml">          全国旅游投诉渠道 12301</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FooterWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AppFooter</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">FooterWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  margin-top: 100px;</span><br><span class="hljs-string">  border-top: 1px solid #ebebeb;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .wrapper &#123;</span><br><span class="hljs-string">    width: 1080px;</span><br><span class="hljs-string">    margin: 0 auto;</span><br><span class="hljs-string">    box-sizing: border-box;</span><br><span class="hljs-string">    padding: 48px 24px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .service &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .item &#123;</span><br><span class="hljs-string">      flex: 1;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .name &#123;</span><br><span class="hljs-string">        margin-bottom: 16px;</span><br><span class="hljs-string">        font-weight: 700;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .list &#123;</span><br><span class="hljs-string">        .iten &#123;</span><br><span class="hljs-string">          margin-top: 6px;</span><br><span class="hljs-string">          color: #767676;</span><br><span class="hljs-string">          cursor: pointer;</span><br><span class="hljs-string">          &amp;:hover &#123;</span><br><span class="hljs-string">            text-decoration: underline;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .statement &#123;</span><br><span class="hljs-string">    margin-top: 30px;</span><br><span class="hljs-string">    border-top: 1px solid #ebebeb;</span><br><span class="hljs-string">    padding: 20px;</span><br><span class="hljs-string">    color: #767676;</span><br><span class="hljs-string">    text-align: center;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>此时 Footer 组件基本大功告成！！！<br>效果图：<br><img src="https://s1.xptou.com/2022/10/08/63418024e378b.png" alt="AppFooter组件效果图"></p><h1 id="首页高性价比房源部分组件封装"><a href="#首页高性价比房源部分组件封装" class="headerlink" title="首页高性价比房源部分组件封装"></a>首页高性价比房源部分组件封装</h1><p>复用性比较高，不只在首页使用，所以放在 components 文件夹中。</p><h2 id="section-header-组件"><a href="#section-header-组件" class="headerlink" title="section-header 组件"></a>section-header 组件</h2><p>新建 section-header 文件夹，并创建 index.jsx、style.js。<br>如果创建时想要有 props 类型验证 快捷键：rmcp。用来每一个类别的标题和子标题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HeaderWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionHeader</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 接收大标题和描述标题</span><br>  <span class="hljs-keyword">const</span> &#123; title, subtitle &#125; = props;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      &#123;subtitle &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;subtitle&quot;</span>&gt;</span>&#123;subtitle&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">SectionHeader</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<br>  <span class="hljs-attr">subtitle</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SectionHeader</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  color: #222;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .title &#123;</span><br><span class="hljs-string">    font-size: 22px;</span><br><span class="hljs-string">    font-weight: 700;</span><br><span class="hljs-string">    margin-bottom: 16px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .subtitle &#123;</span><br><span class="hljs-string">    font-size: 16px;</span><br><span class="hljs-string">    margin-bottom: 20px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="section-item-组件"><a href="#section-item-组件" class="headerlink" title="section-item 组件"></a>section-item 组件</h2><p>新建 section-item 文件夹。用来展示每一个类别中的每一项房源数据。</p><h3 id="MUI-安装"><a href="#MUI-安装" class="headerlink" title="MUI 安装"></a>MUI 安装</h3><p>封装该组件时，使用到了 MUI 中的组件，安装 MUI 库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install @mui/material @emotion/react @emotion/styled<br></code></pre></td></tr></table></figure><p>mui 的 css 转 js 依赖于 emotion</p><h3 id="Antd-安装"><a href="#Antd-安装" class="headerlink" title="Antd 安装"></a>Antd 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i antd<br></code></pre></td></tr></table></figure><p>在根目录 index.js 中引入 antd 的 css 样式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果使用的是 less 样式的话，需要将导入的 css 后缀改为 less。并进行配置。<br>找到 配置 webpack 对应的 craco.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>        &#123;<br>            <span class="hljs-attr">plugin</span>: <span class="hljs-title class_">CracoLessPlugin</span>,<br>            <span class="hljs-comment">// 配置 antd 的 less-loader</span><br>            <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-attr">lessLoaderOptions</span>: &#123;<br>                    <span class="hljs-attr">lessOptions</span>: &#123;<br>                        <span class="hljs-attr">modifyVars</span>: &#123; <span class="hljs-string">&#x27;@primary-color&#x27;</span>: <span class="hljs-string">&#x27;#1DA57A&#x27;</span> &#125;,<br>                        <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>                    &#125;,<br>                &#125;,<br>            &#125;,<br>        &#125;,<br>    ],<br></code></pre></td></tr></table></figure><p>重启即可。</p><h3 id="注意：图片大小不一致导致布局问题"><a href="#注意：图片大小不一致导致布局问题" class="headerlink" title="注意：图片大小不一致导致布局问题"></a>注意：图片大小不一致导致布局问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=<span class="hljs-string">&quot;cover&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;itemData.picture_url&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>conetent<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果我们只设置 <code>img&#123; width: 100%; &#125;</code>，那么图片的宽度就会根据长度自适应，这样的话，如果图片大小不一致，很可能会导致<strong>图片展示时，虽然宽度占满，但高度不一致，图片下方的内容也错位的问题。</strong></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.cover</span> &#123;<br>  <span class="hljs-comment">// 相对定位，并设置固定的 padding，将内容撑起来，防止 文字内容部分因定位产生问题，此时就算没有 img ，内容依然是统一在下方的</span><br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">66.66%</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br><br>  <span class="hljs-comment">// img 使用绝对定位，相对父容器，完全撑开</span><br>  <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>每一项房屋信息的组件。itemData 就是当前房源的信数据，该部分使用的是 umi 组件库。</p><p><strong>注意：</strong> <code>value=&#123;itemData.star_rating ?? 5&#125;</code>的写法是用来判断，当第一个值<strong>只为 null || undefined 时</strong> ，会使用第二个值，例如 0，就只会识别为 0 ，不会判断为 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Rating</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@mui/material/Rating&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ItemWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">RoomItem</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; itemData, itemWidth = <span class="hljs-string">&quot;33.3333%&quot;</span> &#125; = props;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">/* 传入想要的宽度，这样设置样式时就是动态的 */</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ItemWrapper</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&#123;itemWidth&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;itemData.picture_url&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>&#123;itemData.verify_info.messages.join(&quot;·&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;itemData.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>¥&#123;itemData.price&#125;/晚<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Rating</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">readOnly</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;itemData.star_rating</span> ?? <span class="hljs-attr">5</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">precision</span>=<span class="hljs-string">&#123;0.1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">sx</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span> &quot;<span class="hljs-attr">12px</span>&quot;, <span class="hljs-attr">color:</span> &quot;#<span class="hljs-attr">00848A</span>&quot;, <span class="hljs-attr">marginRight:</span> &quot;<span class="hljs-attr">-2px</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>&#123;itemData.reviews_count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          &#123;itemData.bottom_info &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>·&#123;itemData.bottom_info.content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ItemWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">RoomItem</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">itemData</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">object</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">RoomItem</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ItemWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  box-sizing: border-box;</span><br><span class="hljs-string">  width: <span class="hljs-subst">$&#123;(props) =&gt; props.itemWidth&#125;</span>;</span><br><span class="hljs-string">  padding: 8px;</span><br><span class="hljs-string">  margin: 8px 0;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .inner &#123;</span><br><span class="hljs-string">    width: 100%;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .cover &#123;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    box-sizing: border-box;</span><br><span class="hljs-string">    padding: 66.66% 8px 0;</span><br><span class="hljs-string">    border-radius: 3px;</span><br><span class="hljs-string">    overflow: hidden;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    img &#123;</span><br><span class="hljs-string">      position: absolute;</span><br><span class="hljs-string">      left: 0;</span><br><span class="hljs-string">      top: 0;</span><br><span class="hljs-string">      width: 100%;</span><br><span class="hljs-string">      height: 100%;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .desc &#123;</span><br><span class="hljs-string">    margin: 10px 0 5px;</span><br><span class="hljs-string">    font-size: 12px;</span><br><span class="hljs-string">    font-weight: 700;</span><br><span class="hljs-string">    color: #39576a;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .name &#123;</span><br><span class="hljs-string">    font-size: 16px;</span><br><span class="hljs-string">    font-weight: 700;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    overflow: hidden;</span><br><span class="hljs-string">    text-overflow: ellipsis;</span><br><span class="hljs-string">    display: -webkit-box;</span><br><span class="hljs-string">    -webkit-line-clamp: 2;</span><br><span class="hljs-string">    -webkit-box-orient: vertical;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .price &#123;</span><br><span class="hljs-string">    margin: 8px 0;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .bottom &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    font-size: 12px;</span><br><span class="hljs-string">    font-weight: 600;</span><br><span class="hljs-string">    color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.textColor&#125;</span>;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .count &#123;</span><br><span class="hljs-string">      margin: 0 2px 0 4px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .MuiRating-decimal &#123;</span><br><span class="hljs-string">      margin-right: -3px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="对房源组件再次封装"><a href="#对房源组件再次封装" class="headerlink" title="对房源组件再次封装"></a>对房源组件再次封装</h1><p>原 home 组件中的代码是这样的：<br>我们不想让循环类似的无意义代码和 css 在根 home 组件显示，就把这一部分也进行封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">HomeWrapper</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;good-price&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;goodPriceInfo?.title&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item-list&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;goodPriceInfo?.list?.slice(0, 8).map((item) =&gt; &#123;</span><br><span class="language-xml">          return <span class="hljs-tag">&lt;<span class="hljs-name">RoomItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> /&gt;</span>;</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">HomeWrapper</span>&gt;<br></code></pre></td></tr></table></figure><p>components 下新建 section-rooms 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">RoomItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../room-item&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RoomWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionRooms</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; roomList, itemWidth &#125; = props;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RoomWrapper</span>&gt;</span></span><br><span class="language-xml">      &#123;roomList.map((item) =&gt; &#123;</span><br><span class="language-xml">        return <span class="hljs-tag">&lt;<span class="hljs-name">RoomItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&#123;itemWidth&#125;</span> /&gt;</span>;</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RoomWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">SectionRooms</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">roomList</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SectionRooms</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RoomWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  flex-wrap: wrap;</span><br><span class="hljs-string">  margin: 0 -8px 0;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>home 页的循环替换掉即可。</p><p>性价比房源组件效果图：<br><img src="https://s1.xptou.com/2022/10/08/634180691d4b6.png" alt="性价比房源组件效果图："></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;good-price&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;goodPriceInfo?.title&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SectionRooms</span> <span class="hljs-attr">roomList</span>=<span class="hljs-string">&#123;goodPriceInfo?.list&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">25</span>%&quot;&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>展示效果图：<br><img src="https://s1.xptou.com/2022/10/07/633fe0e52396b.png" alt="section-room封装展示效果"></p><h1 id="首页高评分房源部分组件封装"><a href="#首页高评分房源部分组件封装" class="headerlink" title="首页高评分房源部分组件封装"></a>首页高评分房源部分组件封装</h1><h2 id="书写网络请求"><a href="#书写网络请求" class="headerlink" title="书写网络请求"></a>书写网络请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   src\services\modules\home.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomeHighScoreData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/highscore&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="redux-中添加该网络请求并重构代码"><a href="#redux-中添加该网络请求并重构代码" class="headerlink" title="redux 中添加该网络请求并重构代码"></a>redux 中添加该网络请求并重构代码</h2><p>原本的写法是使用 async await 请求之后 return 数据，并在 extraReducers 中做 dispatch。<br>但是当数据请求越来越多时，我们可能不需要把所有数据请求回来再展示，可以采用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//    src\store\modules\home.js</span><br><span class="hljs-keyword">import</span> &#123; getHomeGoodPriceData, getHomeHighScoreData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createSlice, createAsyncThunk &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-comment">// 发起网络请求调用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchHomeDataAction = <span class="hljs-title function_">createAsyncThunk</span>(<br>  <span class="hljs-string">&quot;fetchdata&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">payload, &#123; dispatch, getState &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">getHomeGoodPriceData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 直接 diapatch ，不经过额外的 reducer</span><br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeGoodPriceInfoAction</span>(res));<br>    &#125;);<br><br>    <span class="hljs-title function_">getHomeHighScoreData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeHighScoreInfoAction</span>(res));<br>    &#125;);<br>  &#125;<br>);<br><br><span class="hljs-keyword">const</span> homeSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-comment">// 高性价比房源</span><br>    <span class="hljs-attr">goodPriceInfo</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-comment">// 高分房源</span><br>    <span class="hljs-attr">highScoreInfo</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">// 性价比房源数据action</span><br>    <span class="hljs-title function_">changeGoodPriceInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">goodPriceInfo</span> = payload;<br>    &#125;,<br>    <span class="hljs-comment">// 高分房源数据action</span><br>    <span class="hljs-title function_">changeHighScoreInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>      state.<span class="hljs-property">highScoreInfo</span> = payload;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">extraReducers</span>: &#123;<br>    <span class="hljs-comment">/* [fetchHomeDataAction.fulfilled](state, &#123; payload &#125;) &#123;</span><br><span class="hljs-comment">            console.log(payload);</span><br><span class="hljs-comment">            state.goodPriceInfo = payload</span><br><span class="hljs-comment">        &#125; */</span><br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeGoodPriceInfoAction, changeHighScoreInfoAction &#125; =<br>  homeSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> homeSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><p>检查 redux 调试工具<br><img src="https://s1.xptou.com/2022/10/07/633feef6804ab.png" alt="redux控制台显示"></p><h2 id="首页获取"><a href="#首页获取" class="headerlink" title="首页获取"></a>首页获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; shallowEqual, useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; fetchHomeDataAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeBanner</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/home-banner&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HomeWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionRooms</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-rooms&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 从 redux 中获取数据 */</span><br>  <span class="hljs-keyword">const</span> &#123; goodPriceInfo, highScoreInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>    <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>      <span class="hljs-attr">goodPriceInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">goodPriceInfo</span>,<br>      <span class="hljs-attr">highScoreInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">highScoreInfo</span>,<br><br>      <span class="hljs-comment">/*添加 shallowEqual： useSelector将比较对象的内容，如果它们相同，则不会重新呈现 */</span><br>    &#125;),<br>    shallowEqual<br>  );<br><br>  <span class="hljs-comment">/* 派发异步事件，发起网络请求 */</span><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchHomeDataAction</span>());<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;good-price&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;goodPriceInfo?.title&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SectionRooms</span> <span class="hljs-attr">roomList</span>=<span class="hljs-string">&#123;goodPriceInfo?.list&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">25</span>%&quot;&#125; /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;high-score&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;highScoreInfo?.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">subtitle</span>=<span class="hljs-string">&#123;highScoreInfo?.subtitle&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SectionRooms</span> <span class="hljs-attr">roomList</span>=<span class="hljs-string">&#123;highScoreInfo?.list&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><h2 id="home-组件内容抽离封装"><a href="#home-组件内容抽离封装" class="headerlink" title="home 组件内容抽离封装"></a>home 组件内容抽离封装</h2><p>由以上代码可以看出，结构有极为相似的，所以可以把这部分抽离成一个组件。<br>在/home/c-cpns 文件夹下新建 home-section-v1 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import SectionFooter from &#x27;@/components/section-footer&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionRooms</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-rooms&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SectionV1Wrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeSectionV1</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; infoData &#125; = props;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SectionV1Wrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;infoData?.title&#125;</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">&#123;infoData?.subtitle&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionRooms</span> <span class="hljs-attr">roomList</span>=<span class="hljs-string">&#123;infoData?.list&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&quot;25%&quot;</span> /&gt;</span></span><br><span class="language-xml">      &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">SectionFooter</span>/&gt;</span> */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SectionV1Wrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">HomeSectionV1</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">infoData</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">object</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeSectionV1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionV1Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  margin-top: 30px;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>此时 home 组件内部的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; shallowEqual, useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; fetchHomeDataAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeBanner</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/home-banner&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HomeWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeSectionV1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/home-section-v1&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 从 redux 中获取数据 */</span><br>  <span class="hljs-keyword">const</span> &#123; goodPriceInfo, highScoreInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>    <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>      <span class="hljs-attr">goodPriceInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">goodPriceInfo</span>,<br>      <span class="hljs-attr">highScoreInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">highScoreInfo</span>,<br><br>      <span class="hljs-comment">/*添加 shallowEqual： useSelector将比较对象的内容，如果它们相同，则不会重新呈现 */</span><br>    &#125;),<br>    shallowEqual<br>  );<br><br>  <span class="hljs-comment">/* 派发异步事件，发起网络请求 */</span><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchHomeDataAction</span>());<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;goodPriceInfo&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;highScoreInfo&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>此时 home 页的相似内容已经封装完毕</p><p>高评分房源效果图：<br><img src="https://s1.xptou.com/2022/10/08/634181058d049.png" alt="高评分房源效果图"></p><h1 id="首页折扣优惠房源部分组件封装"><a href="#首页折扣优惠房源部分组件封装" class="headerlink" title="首页折扣优惠房源部分组件封装"></a>首页折扣优惠房源部分组件封装</h1><h2 id="网络请求书写"><a href="#网络请求书写" class="headerlink" title="网络请求书写"></a>网络请求书写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomeDiscountData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/discount&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="redux-中添加该网络请求"><a href="#redux-中添加该网络请求" class="headerlink" title="redux 中添加该网络请求"></a>redux 中添加该网络请求</h2><p>之前重复的代码就不写了，只写新增的部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 请求并 dispatch</span><br><span class="hljs-title function_">getHomeDiscountData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeDiscountInfoAction</span>(res))<br>&#125;)<br><br><span class="hljs-comment">// 数据初始化</span><br><span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">discountInfo</span>: <span class="hljs-literal">null</span><br>&#125;,<br><br><span class="hljs-comment">// 在 reducer 中添加该数据的 action</span><br><span class="hljs-attr">reducer</span>:&#123;<br>  <span class="hljs-title function_">changeDiscountInfoAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>        state.<span class="hljs-property">discountInfo</span> = payload<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 暴露该 action</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123;changeDiscountInfoAction&#125; = homeSlice.<span class="hljs-property">actions</span><br></code></pre></td></tr></table></figure><h2 id="首页获取-1"><a href="#首页获取-1" class="headerlink" title="首页获取"></a>首页获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// discountInfo 就是 redux 中存储的数据</span><br><span class="hljs-keyword">const</span> &#123; discountInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>  <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">discountInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">discountInfo</span>,<br>  &#125;),<br>  shallowEqual<br>);<br></code></pre></td></tr></table></figure><h2 id="选项卡点击滚动功能封装（重点逻辑代码）"><a href="#选项卡点击滚动功能封装（重点逻辑代码）" class="headerlink" title="选项卡点击滚动功能封装（重点逻辑代码）"></a>选项卡点击滚动功能封装（重点逻辑代码）</h2><p>在 base-ui 文件下创建 scroll-view 文件夹</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>如果想滚动条滚动，添加 <code>overflow-x: auto</code>，auto 的意思就是长度在显示范围内，正常显示，超出正常宽度，才呈现滚动效果。</p><p>为了可拓展性，在写滚动逻辑时，预留一个 插槽 用来放传入的内容元素（不管是 tab 还是 list 都可以）然后通过<code>props.children</code>进行展示，最后设置左右两边按钮即可。</p><h3 id="右侧按钮逻辑设计分析"><a href="#右侧按钮逻辑设计分析" class="headerlink" title="右侧按钮逻辑设计分析"></a>右侧按钮逻辑设计分析</h3><p><img src="https://s1.xptou.com/2022/10/08/634123a02a1e0.png" alt="右侧按钮状态分析"></p><h3 id="左侧按钮偏移距离分析"><a href="#左侧按钮偏移距离分析" class="headerlink" title="左侧按钮偏移距离分析"></a>左侧按钮偏移距离分析</h3><p><img src="https://s1.xptou.com/2022/10/08/634125f955b34.png" alt="左侧按钮偏移距离分析"></p><h3 id="获取当前元素距离左侧的距离"><a href="#获取当前元素距离左侧的距离" class="headerlink" title="获取当前元素距离左侧的距离"></a>获取当前元素距离左侧的距离</h3><p>我们可以通过 <code>scrollContentRef.current.children</code> 获取到内容的所有 item 项，再使用 index 就可以在点击按钮时，拿到当前首项的元素信息。<br><img src="https://s1.xptou.com/2022/10/08/63412a50ec4e6.png" alt="获取每一项的元素"></p><h3 id="offsetLeft-使用注意之相对定位"><a href="#offsetLeft-使用注意之相对定位" class="headerlink" title="offsetLeft 使用注意之相对定位"></a>offsetLeft 使用注意之相对定位</h3><p>当我们直接点击时，获取到的是当前元素距离 body 的宽度，而非距离上一个元素内容左侧的宽度。为什么呢？</p><p>查找 MDN 可知：当获取元素的 offsetLeft 时，返回的是最近的包含该元素的<strong>相对定位父级</strong>或者<strong>table, td, th, body 元素</strong>。<br>所以，当我们当前元素的父级没有加<strong>相对定位时</strong>，offsetLeft 查找的就是当前元素距离页面 body 的距离。<br><img src="https://s1.xptou.com/2022/10/08/63412d838f977.png" alt=""></p><h3 id="记录当前索引：useRef"><a href="#记录当前索引：useRef" class="headerlink" title="记录当前索引：useRef"></a>记录当前索引：useRef</h3><p>在当前需求中，我们只想记录当前索引，如果使用 useState，当索引改变的话，会导致整个组件重新执行一遍，这与我们的需求有差距。useState 属于记忆函数，useRef 也属于记忆函数，但 useRef 只起到记忆作用，不会像 useState 一样因为数据改变导致组件重新加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconArrowLeft</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-arrow-left&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconArrowRight</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-arrow-right&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ViewWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ScrollView</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/** 定义内部的状态 */</span><br>  <span class="hljs-comment">// 判断何时显示左侧按钮</span><br>  <span class="hljs-keyword">const</span> [showLeft, setShowLeft] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">// 判断何时显示右侧按钮</span><br>  <span class="hljs-keyword">const</span> [showRight, setShowRight] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">// 默认偏移元素是第 0 项</span><br>  <span class="hljs-keyword">const</span> [posIndex, setPosIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> totalDistanceRef = <span class="hljs-title function_">useRef</span>();<br><br>  <span class="hljs-comment">/** 组件渲染完毕, 判断是否显示右侧的按钮 */</span><br>  <span class="hljs-keyword">const</span> scrollContentRef = <span class="hljs-title function_">useRef</span>();<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 内容元素的总宽度</span><br>    <span class="hljs-comment">// 一共可以滚动的宽度</span><br>    <span class="hljs-keyword">const</span> scrollWidth = scrollContentRef.<span class="hljs-property">current</span>.<span class="hljs-property">scrollWidth</span>;<br>    <span class="hljs-comment">// 当前内容占据的宽度</span><br>    <span class="hljs-comment">// 本身占据的宽度</span><br>    <span class="hljs-keyword">const</span> clientWidth = scrollContentRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientWidth</span>;<br>    <span class="hljs-comment">// 内容总宽度 - 内容展示的宽度</span><br>    <span class="hljs-comment">// 如果大于 0，说明有内容展示不完全，一部分未展示出来，此时显示右侧按钮</span><br>    <span class="hljs-keyword">const</span> totalDistance = scrollWidth - clientWidth;<br>    totalDistanceRef.<span class="hljs-property">current</span> = totalDistance;<br>    <span class="hljs-title function_">setShowRight</span>(totalDistance &gt; <span class="hljs-number">0</span>);<br>  &#125;, [props.<span class="hljs-property">children</span>]); <span class="hljs-comment">//当传入的内容发生改变时，重新计算宽度</span><br><br>  <span class="hljs-comment">/** 事件处理的逻辑 */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">controlClickHandle</span>(<span class="hljs-params">isRight</span>) &#123;<br>    <span class="hljs-comment">// 点击的右侧的话，从第 0 项 +1，左侧 -1</span><br>    <span class="hljs-keyword">const</span> newIndex = isRight ? posIndex + <span class="hljs-number">1</span> : posIndex - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> newEl = scrollContentRef.<span class="hljs-property">current</span>.<span class="hljs-property">children</span>[newIndex];<br>    <span class="hljs-keyword">const</span> newOffsetLeft = newEl.<span class="hljs-property">offsetLeft</span>;<br>    scrollContentRef.<span class="hljs-property">current</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate(-<span class="hljs-subst">$&#123;newOffsetLeft&#125;</span>px)`</span>;<br>    <span class="hljs-title function_">setPosIndex</span>(newIndex);<br>    <span class="hljs-comment">// 是否继续显示右侧的按钮</span><br>    <span class="hljs-comment">// 总共未显示的距离 如果大于 最新已经滚动的距离，说明右侧还有内容，就依然显示 右侧按钮</span><br>    <span class="hljs-title function_">setShowRight</span>(totalDistanceRef.<span class="hljs-property">current</span> &gt; newOffsetLeft);<br>    <span class="hljs-title function_">setShowLeft</span>(newOffsetLeft &gt; <span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ViewWrapper</span>&gt;</span></span><br><span class="language-xml">      &#123;showLeft &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control left&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(false)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowLeft</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      &#123;showRight &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;control right&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> controlClickHandle(true)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">IconArrowRight</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;scroll-content&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;scrollContentRef&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;props.children&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ViewWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">ScrollView</span>.<span class="hljs-property">propTypes</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ScrollView</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ViewWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  position: relative;</span><br><span class="hljs-string">  padding: 8px 0;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .scroll &#123;</span><br><span class="hljs-string">    overflow: hidden;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .scroll-content &#123;</span><br><span class="hljs-string">      display: flex;</span><br><span class="hljs-string">      transition: transform 250ms ease;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .control &#123;</span><br><span class="hljs-string">    position: absolute;</span><br><span class="hljs-string">    z-index: 9;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    justify-content: center;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    width: 28px;</span><br><span class="hljs-string">    height: 28px;</span><br><span class="hljs-string">    border-radius: 50%;</span><br><span class="hljs-string">    text-align: center;</span><br><span class="hljs-string">    border-width: 2px;</span><br><span class="hljs-string">    border-style: solid;</span><br><span class="hljs-string">    border-color: #fff;</span><br><span class="hljs-string">    background: #fff;</span><br><span class="hljs-string">    box-shadow: 0px 1px 1px 1px rgba(0, 0, 0, 0.14);</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp;.left &#123;</span><br><span class="hljs-string">      left: 0;</span><br><span class="hljs-string">      top: 50%;</span><br><span class="hljs-string">      transform: translate(-50%, -50%);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp;.right &#123;</span><br><span class="hljs-string">      right: 0;</span><br><span class="hljs-string">      top: 50%;</span><br><span class="hljs-string">      transform: translate(50%, -50%);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="基于选项卡封装高分房源-tab"><a href="#基于选项卡封装高分房源-tab" class="headerlink" title="基于选项卡封装高分房源 tab"></a>基于选项卡封装高分房源 tab</h2><p>在 components 下新建 section-tab<br>当点击 tab 选项时，需要过滤出对应的数据，并将点击项背景色改变，此处使用 classnames 库（不使用也无所谓）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install classnames<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ScrollView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/base-ui/scroll-view&quot;</span>;<br><span class="hljs-keyword">import</span> classNames <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TabsWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionTabs</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; tabNames = [], tabClick &#125; = props;<br>  <span class="hljs-keyword">const</span> [currentIndex, setCurrentIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">itemClickHandle</span>(<span class="hljs-params">index, item</span>) &#123;<br>    <span class="hljs-title function_">setCurrentIndex</span>(index);<br>    <span class="hljs-title function_">tabClick</span>(index, item);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabsWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">        &#123;tabNames.map((item, index) =&gt; &#123;</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classNames(</span>&quot;<span class="hljs-attr">item</span>&quot;, &#123; <span class="hljs-attr">active:</span> <span class="hljs-attr">index</span> === <span class="hljs-string">currentIndex</span> &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> itemClickHandle(index, item)&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              &#123;item&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TabsWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">SectionTabs</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">tabNames</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SectionTabs</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">TabsWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  .item &#123;</span><br><span class="hljs-string">    box-sizing: border-box;</span><br><span class="hljs-string">    flex-basis: 120px;</span><br><span class="hljs-string">    flex-shrink: 0;</span><br><span class="hljs-string">    padding: 14px 16px;</span><br><span class="hljs-string">    margin-right: 16px;</span><br><span class="hljs-string">    border-radius: 3px;</span><br><span class="hljs-string">    font-size: 17px;</span><br><span class="hljs-string">    text-align: center;</span><br><span class="hljs-string">    border: 0.5px solid #d8d8d8;</span><br><span class="hljs-string">    white-space: nowrap;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;(props) =&gt; props.theme.mixin.boxShadow&#125;</span>;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp;:last-child &#123;</span><br><span class="hljs-string">      margin-right: 0;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp;.active &#123;</span><br><span class="hljs-string">      color: #fff;</span><br><span class="hljs-string">      background-color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.secondaryColor&#125;</span>;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="高分房源底部-footer-组件封装"><a href="#高分房源底部-footer-组件封装" class="headerlink" title="高分房源底部 footer 组件封装"></a>高分房源底部 footer 组件封装</h2><p>在 components 下新建 section-footer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconMoreArrow</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-more-arrow&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FooterWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionFooter</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = props;<br><br>  <span class="hljs-keyword">let</span> showMessage = <span class="hljs-string">&quot;显示全部&quot;</span>;<br>  <span class="hljs-keyword">if</span> (name) &#123;<br>    showMessage = <span class="hljs-string">`显示更多<span class="hljs-subst">$&#123;name&#125;</span>房源`</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/** 事件处理的逻辑 */</span><br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">moreClickHandle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/entire&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FooterWrapper</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;name</span> ? &quot;#<span class="hljs-attr">00848A</span>&quot; <span class="hljs-attr">:</span> &quot;#<span class="hljs-attr">000</span>&quot;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;moreClickHandle&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>&#123;showMessage&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">IconMoreArrow</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FooterWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">SectionFooter</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">SectionFooter</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">FooterWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  margin-top: 10px;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .info &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    font-size: 17px;</span><br><span class="hljs-string">    font-weight: 700;</span><br><span class="hljs-string">    color: <span class="hljs-subst">$&#123;(props) =&gt; props.color&#125;</span>;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &amp;:hover &#123;</span><br><span class="hljs-string">      text-decoration: underline;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .text &#123;</span><br><span class="hljs-string">      margin-right: 6px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="高分房源主要组件集合"><a href="#高分房源主要组件集合" class="headerlink" title="高分房源主要组件集合"></a>高分房源主要组件集合</h2><p>在 home/c-cpns 下新建 home-section-v2 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useState, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionRooms</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-rooms&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionTabs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-tabs&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SectionV2Wrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionFooter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-footer&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeSectionV2</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/** 从props获取数据 */</span><br>  <span class="hljs-keyword">const</span> &#123; infoData &#125; = props;<br><br>  <span class="hljs-comment">/** 定义内部的state */</span><br>  <span class="hljs-comment">// 初始默认选中的名字为 城市数组的第一项</span><br>  <span class="hljs-keyword">const</span> initialName = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(infoData?.<span class="hljs-property">dest_list</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(initialName);<br>  <span class="hljs-keyword">const</span> tabNames = infoData?.<span class="hljs-property">dest_address</span>?.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>);<br>  <span class="hljs-comment">// useEffect(() =&gt; &#123;</span><br>  <span class="hljs-comment">//   setName(&quot;xxxxx&quot;)</span><br>  <span class="hljs-comment">// &#125;, [infoData])</span><br><br>  <span class="hljs-comment">/** 事件处理函数 */</span><br>  <span class="hljs-keyword">const</span> tabClickHandle = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index, name</span>) &#123;<br>    <span class="hljs-title function_">setName</span>(name);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SectionV2Wrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;infoData?.title&#125;</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">&#123;infoData?.subtitle&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionTabs</span> <span class="hljs-attr">tabNames</span>=<span class="hljs-string">&#123;tabNames&#125;</span> <span class="hljs-attr">tabClick</span>=<span class="hljs-string">&#123;tabClickHandle&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionRooms</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">roomList</span>=<span class="hljs-string">&#123;infoData?.dest_list?.[name]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&quot;33.33333%&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionFooter</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SectionV2Wrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">HomeSectionV2</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">infoData</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">object</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeSectionV2</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionV2Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  margin-top: 30px;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="home-组件中引入"><a href="#home-组件中引入" class="headerlink" title="home 组件中引入"></a>home 组件中引入</h2><p>把高分房源的组件进行高耦合的封装，可以大大减少 home 组件繁杂的代码逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 对象有值时渲染，此处是吧数据定义为 &#123;&#125;了，定义为 null 更佳 */&#125;</span><br><span class="language-xml">      &#123;isEmptyO(discountInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV2</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;discountInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;isEmptyO(goodPriceInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;goodPriceInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;isEmptyO(highScoreInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;highScoreInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>折扣优惠房源效果图：<br><img src="https://s1.xptou.com/2022/10/08/6341820d92dcc.png" alt="折扣优惠房源效果图"></p><h1 id="首页热门推荐房源部分组件封装"><a href="#首页热门推荐房源部分组件封装" class="headerlink" title="首页热门推荐房源部分组件封装"></a>首页热门推荐房源部分组件封装</h1><h2 id="网络请求书写-1"><a href="#网络请求书写-1" class="headerlink" title="网络请求书写"></a>网络请求书写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   src\services\modules\home.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomeHotRecommendData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/hotrecommenddest&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="redux-中添加该网络请求-1"><a href="#redux-中添加该网络请求-1" class="headerlink" title="redux 中添加该网络请求"></a>redux 中添加该网络请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 热门推荐请求</span><br><span class="hljs-title function_">getHomeHotRecommendData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeHotRecommendAction</span>(res))<br>&#125;)<br><br><span class="hljs-comment">// 定义初始数据</span><br><span class="hljs-attr">initialState</span>: &#123;<br>  <span class="hljs-comment">// 热门推荐</span><br>  <span class="hljs-attr">recommendInfo</span>: &#123;&#125;<br>&#125;,<br><br><span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">// 热门推荐房源action</span><br>    <span class="hljs-title function_">changeHotRecommendAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>        state.<span class="hljs-property">recommendInfo</span> = payload<br>    &#125;<br>&#125;,<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123;<br>    changeHotRecommendAction<br>&#125; = homeSlice.<span class="hljs-property">actions</span><br><br></code></pre></td></tr></table></figure><h2 id="首页获取使用"><a href="#首页获取使用" class="headerlink" title="首页获取使用"></a>首页获取使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 从 redux 中获取数据 */</span><br>  <span class="hljs-keyword">const</span> &#123; goodPriceInfo, highScoreInfo, discountInfo, recommendInfo &#125; =<br>    <span class="hljs-title function_">useSelector</span>(<br>      <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>        <span class="hljs-attr">goodPriceInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">goodPriceInfo</span>,<br>        <span class="hljs-attr">highScoreInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">highScoreInfo</span>,<br>        <span class="hljs-attr">discountInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">discountInfo</span>,<br>        <span class="hljs-attr">recommendInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">recommendInfo</span>,<br>        <span class="hljs-comment">/*添加 shallowEqual： useSelector将比较对象的内容，如果它们相同，则不会重新呈现 */</span><br>      &#125;),<br>      shallowEqual<br>    );<br><br>  <span class="hljs-comment">/* 派发异步事件，发起网络请求 */</span><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchHomeDataAction</span>());<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 对象有值时渲染，此处是吧数据定义为 &#123;&#125;了，定义为 null 更佳 */&#125;</span><br><span class="language-xml">        &#123;isEmptyO(discountInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV2</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;discountInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;isEmptyO(recommendInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV2</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;recommendInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;isEmptyO(goodPriceInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;goodPriceInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;isEmptyO(highScoreInfo) &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HomeSectionV1</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;highScoreInfo&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HomeWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>热门推荐房源效果图：<br><img src="https://s1.xptou.com/2022/10/08/634182b6c0768.png" alt="热门推荐房源效果图"></p><h1 id="首页向往城市部分组件封装"><a href="#首页向往城市部分组件封装" class="headerlink" title="首页向往城市部分组件封装"></a>首页向往城市部分组件封装</h1><h2 id="网络请求书写-2"><a href="#网络请求书写-2" class="headerlink" title="网络请求书写"></a>网络请求书写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomeLongForData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/longfor&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="redux-中添加该网络请求-2"><a href="#redux-中添加该网络请求-2" class="headerlink" title="redux 中添加该网络请求"></a>redux 中添加该网络请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getHomeLongForData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeLongForAction</span>(res))<br>&#125;)<br><span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-comment">// 高性价比房源</span><br>    <span class="hljs-attr">goodPriceInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">highScoreInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">discountInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">recommendInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">longForInfo</span>: &#123;&#125;<br>&#125;,<br><span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">// 向往城市数据action</span><br>    <span class="hljs-title function_">changeLongForAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>        state.<span class="hljs-property">longForInfo</span> = payload<br>    &#125;<br>&#125;,<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123;changeLongForAction&#125; = homeSlice.<span class="hljs-property">actions</span><br></code></pre></td></tr></table></figure><h2 id="首页获取-2"><a href="#首页获取-2" class="headerlink" title="首页获取"></a>首页获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; longForInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>  <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">longForInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">longForInfo</span>,<br>  &#125;),<br>  shallowEqual<br>);<br></code></pre></td></tr></table></figure><h2 id="home-组件抽离封装"><a href="#home-组件抽离封装" class="headerlink" title="home 组件抽离封装"></a>home 组件抽离封装</h2><h3 id="数据循环内容封装组件"><a href="#数据循环内容封装组件" class="headerlink" title="数据循环内容封装组件"></a>数据循环内容封装组件</h3><p>在 c-cpns 下新建 home-longfor 文件夹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ScrollView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/base-ui/scroll-view&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LongforItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/longfor-item&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LongForWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeLongFor</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; title, subtitle, <span class="hljs-attr">list</span>: longforList = [] &#125; = props.<span class="hljs-property">infoData</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LongForWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">&#123;subtitle&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;longfor-list&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">          &#123;longforList.map((item) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">LongforItem</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.city&#125;</span> /&gt;</span>;</span><br><span class="language-xml">          &#125;)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">LongForWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeLongFor</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LongForWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  .longfor-list &#123;</span><br><span class="hljs-string">    margin: 0 -8px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h3 id="每一项内容封装"><a href="#每一项内容封装" class="headerlink" title="每一项内容封装"></a>每一项内容封装</h3><p>在 components 下新建 lonfor-item 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ItemWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LongforItem</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; itemData &#125; = props;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ItemWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;itemData.picture_url&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-cover&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span>&#123;itemData.city&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>均价 &#123;itemData.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ItemWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">LongforItem</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ItemWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex-shrink: 0;</span><br><span class="hljs-string">  width: 20%;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .inner &#123;</span><br><span class="hljs-string">    position: relative;</span><br><span class="hljs-string">    padding: 8px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .cover &#123;</span><br><span class="hljs-string">    width: 100%;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .bg-cover &#123;</span><br><span class="hljs-string">    position: absolute;</span><br><span class="hljs-string">    left: 8px;</span><br><span class="hljs-string">    right: 8px;</span><br><span class="hljs-string">    bottom: 0;</span><br><span class="hljs-string">    height: 60%;</span><br><span class="hljs-string">    background-image: linear-gradient(</span><br><span class="hljs-string">      -180deg,</span><br><span class="hljs-string">      rgba(0, 0, 0, 0) 3%,</span><br><span class="hljs-string">      rgb(0, 0, 0) 100%</span><br><span class="hljs-string">    );</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .info &#123;</span><br><span class="hljs-string">    position: absolute;</span><br><span class="hljs-string">    left: 8px;</span><br><span class="hljs-string">    right: 8px;</span><br><span class="hljs-string">    bottom: 0;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    flex-direction: column;</span><br><span class="hljs-string">    justify-content: center;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    padding: 0 24px 32px;</span><br><span class="hljs-string">    color: #fff;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .city &#123;</span><br><span class="hljs-string">      font-size: 18px;</span><br><span class="hljs-string">      font-weight: 600;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .price &#123;</span><br><span class="hljs-string">      font-size: 14px;</span><br><span class="hljs-string">      margin-top: 5px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h3 id="home-页使用即可"><a href="#home-页使用即可" class="headerlink" title="home 页使用即可"></a>home 页使用即可</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-title function_">isEmptyO</span>(longForInfo) &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeLongFor</span> <span class="hljs-attr">infoData</span>=<span class="hljs-string">&#123;longForInfo&#125;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>向往城市效果图：<br><img src="https://s1.xptou.com/2022/10/08/63418378c5d36.png" alt="向往城市效果图"></p><h1 id="首页-plus-房源部分组件封装"><a href="#首页-plus-房源部分组件封装" class="headerlink" title="首页 plus 房源部分组件封装"></a>首页 plus 房源部分组件封装</h1><h2 id="网络请求书写-3"><a href="#网络请求书写-3" class="headerlink" title="网络请求书写"></a>网络请求书写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHomePlusData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> hyRequestuest.<span class="hljs-title function_">get</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/plus&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="redux-中添加该网络请求-3"><a href="#redux-中添加该网络请求-3" class="headerlink" title="redux 中添加该网络请求"></a>redux 中添加该网络请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getHomePlusData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changePlusAction</span>(res))<br>&#125;)<br><span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">plusInfo</span>:&#123;&#125;<br><br>&#125;,<br><span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">// 向往城市数据action</span><br>    <span class="hljs-title function_">changePlusAction</span>(<span class="hljs-params">state, &#123; payload &#125;</span>) &#123;<br>        state.<span class="hljs-property">plusInfo</span> = payload<br>    &#125;<br>&#125;,<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123;changePlusAction&#125; = homeSlice.<span class="hljs-property">actions</span><br></code></pre></td></tr></table></figure><h2 id="首页获取-3"><a href="#首页获取-3" class="headerlink" title="首页获取"></a>首页获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; plusInfo &#125; = <span class="hljs-title function_">useSelector</span>(<br>  <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">plusInfo</span>: state.<span class="hljs-property">home</span>.<span class="hljs-property">plusInfo</span>,<br>  &#125;),<br>  shallowEqual<br>);<br></code></pre></td></tr></table></figure><h2 id="home-组件抽离封装-1"><a href="#home-组件抽离封装-1" class="headerlink" title="home 组件抽离封装"></a>home 组件抽离封装</h2><p>在 c-cpns 下新建 home-section-v3</p><p><strong>注意：</strong>因为 flex 布局问题，会导致 RoomItem 每一项内容被压缩，可以在 RoomItem 组件的样式中设置 <code>flex-shrink: 0;</code>，不压缩即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-header&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SectionV3Wrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">RoomItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/room-item&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ScrollView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/base-ui/scroll-view&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SectionFooter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/section-footer&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeSectionV3</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; infoData &#125; = props;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SectionV3Wrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;infoData.title&#125;</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">&#123;infoData.subtitle&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;room-list&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">          &#123;infoData.list.map((item) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">RoomItem</span> <span class="hljs-attr">itemData</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">itemWidth</span>=<span class="hljs-string">&quot;20%&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> /&gt;</span>;</span><br><span class="language-xml">          &#125;)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SectionFooter</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plus&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SectionV3Wrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-title class_">HomeSectionV3</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">infoData</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">object</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeSectionV3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">SectionV3Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  .room-list &#123;</span><br><span class="hljs-string">    margin: 0 -8px;</span><br><span class="hljs-string">    /* display: flex;</span><br><span class="hljs-string">    flex-wrap: wrap; */</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>plus 房源效果图：<br><img src="https://s1.xptou.com/2022/10/08/634183b50c93f.png" alt="plus房源效果图"></p>]]></content>
    
    
    <summary type="html">项目首页搭建：对首页内容进行分析，并将组件拆分封装使用。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目(爱彼迎)-页面搭建</title>
    <link href="https://jsq180.github.io/posts/ecb170f5.html"/>
    <id>https://jsq180.github.io/posts/ecb170f5.html</id>
    <published>2022-10-06T13:15:57.000Z</published>
    <updated>2022-10-06T18:43:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目初始化完毕之后，进入项目第二阶段，对页面进行分析，并适当的进行组件封装。</p><h1 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h1><p>具体页面可以参考 爱彼迎 官网：<a href="http://www.airbnb.com">http://www.airbnb.com</a></p><h2 id="头部页面"><a href="#头部页面" class="headerlink" title="头部页面"></a>头部页面</h2><p>Home 首页部分：首页头部有两种效果，随着页面下滑，呈现出两种不同样式，并固定头部定位。<br><img src="https://s1.xptou.com/2022/10/06/633e65e584609.png" alt="首页头部"></p><p>Entire 全部部分：全部页面的头部是固定定位的。<br><img src="https://s1.xptou.com/2022/10/06/633e6674e22c2.png" alt="全部头部"></p><p>Detail 详情部分：头部随页面下滑而消失，即普通布局。<br><img src="https://s1.xptou.com/2022/10/06/633e6737595ee.png" alt="详情头部"></p><p>分析结果：</p><ol><li>三个页面公用一个头部组件，根据页面不同显示不同的状态和样式</li><li>三个页面分别使用独立的头部组件<br>（此处采用第一种）</li></ol><h2 id="底部页面"><a href="#底部页面" class="headerlink" title="底部页面"></a>底部页面</h2><p>底部页面在每个页面都是固定的内容，所以直接封装成一个 Footer 组件即可。<br><img src="https://s1.xptou.com/2022/10/06/633e653e2338d.png" alt="Footer底部页面"></p><h2 id="其它组件"><a href="#其它组件" class="headerlink" title="其它组件"></a>其它组件</h2><p>这里的每一个详情，城市及标题都可以是一个个组件。<br><img src="https://s1.xptou.com/2022/10/06/633e68f586270.png" alt="其它组件"></p><p>头部组件和底部组件都是所有页面共用，所以直接添加到 App.js 根页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AppFooter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/app-footer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AppHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/app-header&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AppHeader</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span>&#123;useRoutes(routes)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AppFooter</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用-styled-components"><a href="#使用-styled-components" class="headerlink" title="使用 styled-components"></a>使用 styled-components</h1><p><strong>提示：</strong>若使用 styled-components，vscode 可以安装 <span style="color:red;">vscode-styled-components</span><br>安装 styled-components</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install styled-components<br></code></pre></td></tr></table></figure><p>为了避免样式冲突，安装 styled-components，这样每一个文件夹下的 js 文件（js 文件中是 css 的 js 写法），创建出来的样式就可以自由使用。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style.js</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-comment">// 当使用 HeaderWrapper 组件时，就会渲染成一个 div ，内部则有其它样式，复用性更高</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  .left &#123;</span><br><span class="hljs-string">    color: red;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  .center &#123;</span><br><span class="hljs-string">    color: blue;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  .right &#123;</span><br><span class="hljs-string">    color: orange;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 使用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">HeaderWrapper</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/10/06/633e72d267fc8.png" alt="页面效果"></p><h1 id="头部-header-组件二次封装"><a href="#头部-header-组件二次封装" class="headerlink" title="头部 header 组件二次封装"></a>头部 header 组件二次封装</h1><p>如果把 header 的所有内容全部放在 header 组件中，会过于臃肿，此时将其细分。<br>结构目录如下：<br><img src="https://s1.xptou.com/2022/10/06/633e74e08bc64.png" alt="app-header结构目录"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style.js 初始化</span><br>mport styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LeftWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><br><br><span class="hljs-comment">// 页面使用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LeftWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderLeft</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LeftWrapper</span>&gt;</span>HeaderLeft<span class="hljs-tag">&lt;/<span class="hljs-name">LeftWrapper</span>&gt;</span></span><br>    )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderLeft</span><br><span class="hljs-comment">// 其它两个组件同理</span><br></code></pre></td></tr></table></figure><p>左中右三个头部子组件全部完成以后，在 AppHeader 组件中导入即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\components\app-header</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeaderCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/header-center&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeaderLeft</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/header-left&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeaderRight</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./c-cpns/header-right&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HeaderWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AppHeader</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HeaderLeft</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HeaderCenter</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HeaderRight</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HeaderWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AppHeader</span>;<br></code></pre></td></tr></table></figure><h1 id="header-组件样式书写"><a href="#header-组件样式书写" class="headerlink" title="header 组件样式书写"></a>header 组件样式书写</h1><p>实现 中间居中，左右各占两侧的页面布局。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// header 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  height: 80px;</span><br><span class="hljs-string">  border-bottom: 1px solid #eee;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 右侧组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RightWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: flex-end;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 左侧组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LeftWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="svg-图片处理"><a href="#svg-图片处理" class="headerlink" title="svg 图片处理"></a>svg 图片处理</h1><p>当我们去原网页拿 svg 图片时，得到的是如下所示的内容：<br><img src="https://s1.xptou.com/2022/10/06/633e7dd443e0c.png" alt="svg图片"><br>这种格式的图片，我们直接进行粘贴到组件中时非常不好的体验（当然，如果有现成的 svg 更方便），此时我们可以这样解决：</p><p>在 assets 文件夹下新建一个 svg 文件夹，在内部新建一个 icon_logo.jsx。<br><strong>把 svg 图片当做一个组件来使用！</strong><br>但此时有一个问题是：svg 图标内部的 style 样式是字符串，而 jsx 语法规定的是 object，我们还要手动更改 style 格式。当 style 样式非常多时，时非常麻烦的，此时我们可以这样解决：<br><strong>新建一个函数，用来将字符串样式转换成 object 格式</strong></p><h2 id="style-字符串转-Object"><a href="#style-字符串转-Object" class="headerlink" title="style 字符串转 Object"></a>style 字符串转 Object</h2><p>在 svg 文件夹下新建 utils 文件夹，在之下新建 index.js，创建 function 函数用于转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">styleStrToObj</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">const</span> s = str<br>    .<span class="hljs-title function_">toLowerCase</span>()<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-(.)/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">m, g</span>) &#123;<br>      <span class="hljs-keyword">return</span> g.<span class="hljs-title function_">toUpperCase</span>();<br>    &#125;)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/;\s?$/g</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/:|;/g</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i += <span class="hljs-number">2</span>) &#123;<br>    obj[s[i].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&quot;&quot;</span>)] = s[i + <span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+|\s+$/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; styleStrToObj &#125;;<br></code></pre></td></tr></table></figure><p>这部分代码不仅适用于 svg，其它情况下也适用。</p><p>svg 图片使用该函数时 <code>style=&#123;styleStrToObj(&quot;height: 12px; width: 12px; display: block; fill: currentcolor;&quot;)&#125;</code></p><h1 id="CSS-样式不再书写"><a href="#CSS-样式不再书写" class="headerlink" title="CSS 样式不再书写"></a>CSS 样式不再书写</h1><p>CSS 样式改动频繁，非必要则不再书写</p><h1 id="设置全局主题样式"><a href="#设置全局主题样式" class="headerlink" title="设置全局主题样式"></a>设置全局主题样式</h1><ol><li>首先想到的就是在 variables.less 中设置主题样式</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// variables.less</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary-color</span>: #ff385c;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LeftWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  color: var(--primary-color);</span><br><span class="hljs-string">  .logo &#123;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string">    margin-left: 24px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><ol><li>利用 styles-components 进行设置。（采用）</li></ol><p>在 assets 下新建 theme 文件，之下新建 index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> theme = &#123;<br>  <span class="hljs-attr">color</span>: &#123;<br>    <span class="hljs-attr">primaryColor</span>: <span class="hljs-string">&quot;#FF385C&quot;</span>,<br>    <span class="hljs-attr">secondaryColor</span>: <span class="hljs-string">&quot;#00848A&quot;</span>,<br>    <span class="hljs-attr">textColor</span>: <span class="hljs-string">&quot;#484848&quot;</span>,<br>    <span class="hljs-attr">textColorSecondary</span>: <span class="hljs-string">&quot;#222222&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">fontSize</span>: &#123;<br>    <span class="hljs-attr">small</span>: <span class="hljs-string">&quot;12px&quot;</span>,<br>    <span class="hljs-attr">normal</span>: <span class="hljs-string">&quot;14px&quot;</span>,<br>    <span class="hljs-attr">large</span>: <span class="hljs-string">&quot;16px&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">mixin</span>: &#123;<br>    <span class="hljs-attr">boxShadow</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        transition: box-shadow 0.2s ease;</span><br><span class="hljs-string">        &amp;:hover &#123;</span><br><span class="hljs-string">          box-shadow: 0 2px 4px rgba(0,0,0,0.18);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      `</span>,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> theme;<br></code></pre></td></tr></table></figure><p>因为要全局使用，所以在根目录 index.js 中结合 styles-components 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-comment">// 引入 ThemeProvider</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ThemeProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/App&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;normalize.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/css/index.less&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-comment">// 引入 theme 文件的内容</span><br><span class="hljs-keyword">import</span> theme <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./assets/theme&quot;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 传递 theme，这样全局都可以使用 them 的样式 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeProvider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>样式使用：<br>使用模板字符串的写法，接收 props，内含 theme 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LeftWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.primary&#125;</span>;</span><br><span class="hljs-string">  .logo &#123;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string">    margin-left: 24px;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h1 id="头部组件布局及样式修改"><a href="#头部组件布局及样式修改" class="headerlink" title="头部组件布局及样式修改"></a>头部组件布局及样式修改</h1><p>观察到网页的大部分字体以 14px 为主，则 css 文件夹下新建 common.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>并在 index.less 出口文件中引入即可。</p><p>头部组件样式代码和布局内容代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 头部左侧 css</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LeftWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.primaryColor&#125;</span>;</span><br><span class="hljs-string">  .logo &#123;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 头部组件中间 css</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">CenterWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  .search-bar &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    justify-content: space-between;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    width: 300px;</span><br><span class="hljs-string">    height: 48px;</span><br><span class="hljs-string">    box-sizing: border-box;</span><br><span class="hljs-string">    padding: 0 8px;</span><br><span class="hljs-string">    border: 1px solid #ddd;</span><br><span class="hljs-string">    border-radius: 24px;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;(props) =&gt; props.theme.mixin.boxShadow&#125;</span>;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .text &#123;</span><br><span class="hljs-string">      padding: 0 16px;</span><br><span class="hljs-string">      color: #222;</span><br><span class="hljs-string">      font-weight: 600;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .icon &#123;</span><br><span class="hljs-string">      display: flex;</span><br><span class="hljs-string">      align-items: center;</span><br><span class="hljs-string">      justify-content: center;</span><br><span class="hljs-string">      width: 32px;</span><br><span class="hljs-string">      height: 32px;</span><br><span class="hljs-string">      border-radius: 50%;</span><br><span class="hljs-string">      color: #fff;</span><br><span class="hljs-string">      background-color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.primaryColor&#125;</span>;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 头部组件右侧 css</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RightWrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">  flex: 1;</span><br><span class="hljs-string">  display: flex;</span><br><span class="hljs-string">  justify-content: flex-end;</span><br><span class="hljs-string">  align-items: center;</span><br><span class="hljs-string">  color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.textColor&#125;</span>;</span><br><span class="hljs-string">  font-weight: 600;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .btns &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .btn &#123;</span><br><span class="hljs-string">      height: 18px;</span><br><span class="hljs-string">      line-height: 18px;</span><br><span class="hljs-string">      padding: 12px 15px;</span><br><span class="hljs-string">      cursor: pointer;</span><br><span class="hljs-string">      border-radius: 22px;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      &amp;:hover &#123;</span><br><span class="hljs-string">        background-color: #f5f5f5;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  .profile &#123;</span><br><span class="hljs-string">    display: flex;</span><br><span class="hljs-string">    justify-content: space-evenly;</span><br><span class="hljs-string">    align-items: center;</span><br><span class="hljs-string">    width: 77px;</span><br><span class="hljs-string">    height: 42px;</span><br><span class="hljs-string">    margin-right: 24px;</span><br><span class="hljs-string">    box-sizing: border-box;</span><br><span class="hljs-string">    border: 1px solid #ccc;</span><br><span class="hljs-string">    border-radius: 25px;</span><br><span class="hljs-string">    background-color: #fff;</span><br><span class="hljs-string">    cursor: pointer;</span><br><span class="hljs-string">    color: <span class="hljs-subst">$&#123;(props) =&gt; props.theme.color.textColor&#125;</span>;</span><br><span class="hljs-string">    /* transition: box-shadow 0.2s ease;</span><br><span class="hljs-string">    &amp;:hover &#123;</span><br><span class="hljs-string">        box-shadow: 0 2px 4px rgba(0,0,0,0.18);</span><br><span class="hljs-string">    &#125; */</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;(props) =&gt; props.theme.mixin.boxShadow&#125;</span>;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><p>三个组件的页面使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 头部左侧组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderLeft</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LeftWrapper</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;logo&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">IconLogo</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">LeftWrapper</span>&gt;</span></span><br>    )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderLeft</span><br><br><br><span class="hljs-comment">// 头部中间组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderCenter</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CenterWrapper</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;search-bar&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;text&#x27;</span>&gt;</span></span><br><span class="language-xml">                    搜索房源和体验</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;icon&#x27;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">IconSearchBar</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">CenterWrapper</span>&gt;</span></span><br>    )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderCenter</span><br><br><br><span class="hljs-comment">// 头部右侧组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderRight</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RightWrapper</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;btns&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">IconGlobal</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;profile&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">IconProfileMenu</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">IconProfileAvatar</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">RightWrapper</span>&gt;</span></span><br>    )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderRight</span><br></code></pre></td></tr></table></figure><p>头部左中右组件的布局以及样式就已经基本完成！！！<br>结构如图所示：<br><img src="https://s1.xptou.com/2022/10/06/633e98c1915ae.png" alt="header组价结构布局"></p><h1 id="新增右侧点击头像的面板内容"><a href="#新增右侧点击头像的面板内容" class="headerlink" title="新增右侧点击头像的面板内容"></a>新增右侧点击头像的面板内容</h1><p>样式代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.profile</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-evenly;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">77px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">color</span>: $&#123;props =&gt; props.theme.text.primaryColor&#125;;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br><br>    $&#123;<span class="hljs-selector-tag">props</span> =&gt; <span class="hljs-selector-tag">props</span><span class="hljs-selector-class">.theme</span><span class="hljs-selector-class">.mixin</span><span class="hljs-selector-class">.boxShadow</span>&#125;;<br><br>    <span class="hljs-selector-class">.panel</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">54px</span>;<br>        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">2</span>);<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br><br>        <span class="hljs-selector-class">.top</span>, <span class="hljs-selector-class">.bottom</span> &#123;<br>            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-selector-class">.item</span> &#123;<br>                <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">16px</span>;<br><br>                <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>                    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-selector-class">.top</span> &#123;<br>            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>布局逻辑代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconGlobal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-global&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconProfileAvatar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-profile-avatar&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IconProfileMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/svg/icon-profile-menu&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RightWrapper</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderRight</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 定义组件内部的状态 */</span><br>  <span class="hljs-keyword">const</span> [showPanel, setShowPanel] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-comment">/* 副作用代码 */</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setShowPanel</span>(<span class="hljs-literal">false</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-comment">/* 事件处理函数 */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">profileClickHandle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setShowPanel</span>(<span class="hljs-literal">true</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RightWrapper</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btns&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">IconGlobal</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;profile&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;profileClickHandle&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">IconProfileMenu</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">IconProfileAvatar</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;showPanel &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>出租房源<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>开展体验<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>帮助<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RightWrapper</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderRight</span>;<br></code></pre></td></tr></table></figure><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><p>正常来说，useEffect 中的代码本意是：当我们点击 windows 其它地方时，让出现的面板消失，但此时却遇到一个问题：<strong>当我们点击触发 onClick 事件时，虽然会将 showPanel 设置为 true，但是由于 事件冒泡，一直向上，会触发 window 的 设置为 false 的事件</strong><br><strong>解决办法 1：</strong> 禁止 onClick 事件冒泡<br><strong>解决办法 2：</strong> 将 window 监听事件设置为 捕获（采用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 对 window 监听进一步完善，在组件卸载时取消监听</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">windowHandleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setShowPanel</span>(<span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<br>    <span class="hljs-string">&quot;click&quot;</span>,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">windowHandleClick</span>();<br>    &#125;,<br>    <span class="hljs-literal">true</span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, windowHandleClick, <span class="hljs-literal">true</span>);<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>此时实现的效果图：<br><img src="https://s1.xptou.com/2022/10/06/633ea65620ef1.png" alt="右侧点击显示隐藏面板"></p><p>头部组件基础效果截止目前基本完成！！！</p>]]></content>
    
    
    <summary type="html">项目页面搭建：分析项目结构，对项目的公共部分进行组件封装。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React项目(爱彼迎)-项目初始化</title>
    <link href="https://jsq180.github.io/posts/ac517732.html"/>
    <id>https://jsq180.github.io/posts/ac517732.html</id>
    <published>2022-10-05T17:18:14.000Z</published>
    <updated>2022-10-05T23:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对所学的 React 知识，对其进行一个项目练习，本项目参考于 coderwhy 的爱彼迎项目进行的书写。</p><h1 id="项目规范"><a href="#项目规范" class="headerlink" title="项目规范"></a>项目规范</h1><ol><li>文件夹：文件名称统一小写、多个单词以连接符 (-) 连接</li><li>JavaScript 变量名采用小驼峰标识，敞亮全部使用大写字母、组件采用大驼峰</li><li>CSS 采用普通 CSS 和 styled-component 结合来编写（全局采用普通 CSS、局部采用 styled-component）</li><li>整个项目统一使用函数式组件，使用 hooks API。</li><li>所有的函数是组建，为了避免不必要的渲染，全部使用 memo 进行包裹</li><li>组件内部的状态，使用 useState、useReducer；业务数据全部放在 redux 中管理</li><li>函数组件内部基本按照如下编写顺序编写代码：<ul><li>组件内部 state 管理</li><li>redux 的 hooks 代码</li><li>其它 hooks 相关代码（比如自定义 hooks）</li><li>其它逻辑代码</li><li>返回 JSX 代码</li></ul></li><li>redux 代码规范如下：<ul><li>redux 中 react-redux 和 redux 都会使用</li><li>每个模块有自己独立的 reducer 或者 slice，之后合并在一起</li><li>redux 中会存在共享的状态，从服务器获取到的数据状态</li></ul></li><li>网络请求采用 axios<ul><li>对 axios 进行二次封装。</li><li>所有的模块请求都会放到一个文件夹中单独管理</li></ul></li><li>项目使用 AntDesign、MUI<ul><li>两个 UI 组件库都会使用</li><li>多部分组件还是自己进行编写、封装、实现</li></ul></li></ol><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app airbnb<br></code></pre></td></tr></table></figure><h1 id="对项目进行初始化配置"><a href="#对项目进行初始化配置" class="headerlink" title="对项目进行初始化配置"></a>对项目进行初始化配置</h1><p><strong>注意：</strong> rmc 快捷命令 可以直接生成 memo 组件模板</p><ol><li><p>修改标题<br>找到 public 文件夹下的 index.html<br>将 title 标签部分的内容修改</p></li><li><p>修改网站图标<br>引入自己的图标，替换掉原本的 favicon.ico</p></li><li><p>删除无用的文件<br>例如 src 文件夹下的 App.css、App.text.js、index.css、logo.svg、reportWebVitals.js、setupTests.js。<br>只留下 src 文件夹下的 App.js、index.js，并删除无用引入，重新改写 App.js</p></li><li><p>创建 jsconfig.json 文件，便于 vscode 识别引入等，便于开发，比如输入 @ 时，vscode 会去寻找 src 文件夹下的东西。</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;preserve&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dom.iterable&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;scripthost&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>创建项目的目录文件夹，大致结构如图所示<br><img src="https://s1.xptou.com/2022/10/05/633d543b5d4d5.png" alt="初始目录结构创建"></li></ol><h1 id="配置项目别名"><a href="#配置项目别名" class="headerlink" title="配置项目别名"></a>配置项目别名</h1><p>原因：当我们的目录结构比较深的情况下，需要 ‘../../../‘ 类似的<br>而配置好别名之后就可以直接通过 @ 访问 src 目录（大多数都这样配）<br>这种配置是在 webpack 中配置的，而 react 脚手架 默认是把 webpack 隐藏的</p><p><strong>解决方法一：</strong> npm run eject // 导出所有的配置，并进行修改。不足之处是如果修改出错，会导致整个项目无法运行（不建议）</p><p><strong>解决方法二：</strong> craco，即 create-react-app config 缩写。他的使用是将新的配置和原有的 config 配置进行合并</p><span class='p red'>这里也推荐使用 antdesign 官网，也有相关配置：</span><p><a href="https://ant-design.gitee.io/docs/react/use-with-create-react-app-cn">https://ant-design.gitee.io/docs/react/use-with-create-react-app-cn</a></p><h2 id="安装-craco"><a href="#安装-craco" class="headerlink" title="安装 craco"></a>安装 craco</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install @craco/craco<br></code></pre></td></tr></table></figure><p>如果 react-script 使用的是 5 版本的，会报错，告诉我们 craco 只支持到 4 版本<br>此时则需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install @craco/craco@alpha -D<br>-D 是因为该插件只是开发中的依赖，不加也可以，规范情况下，最好加上<br></code></pre></td></tr></table></figure><h2 id="配置-craco"><a href="#配置-craco" class="headerlink" title="配置 craco"></a>配置 craco</h2><p>新建 craco.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-comment">// __dirname 为当前文件所在的路径 和 src 或者 src/components 等等 拼接起来，就是绝对路径</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">pathname</span>) =&gt; path.<span class="hljs-title function_">resolve</span>(__dirname, pathname);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// less</span><br>  <span class="hljs-comment">// webpack 表示对原有的 webpack 进行修改</span><br>  <span class="hljs-attr">webpack</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src&quot;</span>),<br>      <span class="hljs-attr">components</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src/components&quot;</span>),<br>      <span class="hljs-attr">utils</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src/utils&quot;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    alias: &#123;</span><br><span class="hljs-comment">            &quot;@&quot;: &quot;src&quot;,</span><br><span class="hljs-comment">            &quot;components&quot;: &quot;src/components&quot;,</span><br><span class="hljs-comment">            &quot;utils&quot;:&quot;src/utils&quot;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">这是原本的写法，但是 右侧不能是字符串，要求我们传的是绝对路径，此时就需要引入 path</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>此时我们已经把别名配置好了，但是如果 npm start 还是会报错。<br><strong>原因是：</strong>我们启动仍然使用的是 react-script 脚本启动<br><img src="https://s1.xptou.com/2022/10/05/633d79325f806.png" alt="原启动配置"><br>此时我们需要将 react-scripts 改成 craco start</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco start&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;craco test&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eject&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts eject&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>此时使用 npm start 启动时，就会通过 craco 来启动整个项目，此时启动时，craco 就会把配置和原配置进行合并。启动成功！！！</p><h2 id="使用-less-配置"><a href="#使用-less-配置" class="headerlink" title="使用 less 配置"></a>使用 less 配置</h2><p>如果还想是用 less 进行配置的话，需要安装 craco-less。</p><span class='p red'>此处还可以参考 antdesign 相关配置：</span><p><a href="https://ant-design.gitee.io/docs/react/use-with-create-react-app-cn">https://ant-design.gitee.io/docs/react/use-with-create-react-app-cn</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i craco-less<br><br>script 5 版本会报错，此时使用如下安装<br>npm i craco-less@2.1.0-alpha.0 -D<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推荐使用 -D</span><br></code></pre></td></tr></table></figure><p>安装完成之后配置 less，接着找到 craco.config.js 进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">pathname</span>) =&gt; path.<span class="hljs-title function_">resolve</span>(__dirname, pathname);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CracoLessPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;craco-less&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// less</span><br>  <span class="hljs-attr">plugins</span>: [<br>    &#123;<br>      <span class="hljs-attr">plugin</span>: <span class="hljs-title class_">CracoLessPlugin</span>,<br>    &#125;,<br>  ],<br>  <span class="hljs-comment">// webpack 表示对原有的 webpack 进行修改</span><br>  <span class="hljs-attr">webpack</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src&quot;</span>),<br>      <span class="hljs-attr">components</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src/components&quot;</span>),<br>      <span class="hljs-attr">utils</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src/utils&quot;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>配置完成，项目代码中就可以使用 less 语法了。</p><h1 id="CSS-样式重置"><a href="#CSS-样式重置" class="headerlink" title="CSS 样式重置"></a>CSS 样式重置</h1><ol><li>normalize.css 常用的样式重置 css 插件</li><li>reset.css 自己编写的重置样式</li></ol><h2 id="normalize-操作"><a href="#normalize-操作" class="headerlink" title="normalize 操作"></a>normalize 操作</h2><ol><li>安装 normalize.css</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i normalize.css<br></code></pre></td></tr></table></figure><ol><li>index.js 根 js 文件导入 normalize.css</li><li>在 assets/css 文件夹下 创建自定义公共变量样式 variables.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@textColor:</span> <span class="hljs-number">#484848</span>;<br><span class="hljs-variable">@textColorSecondary:</span> <span class="hljs-number">#222</span>;<br></code></pre></td></tr></table></figure><ol><li>在 assets/css 文件夹下 创建自定义重置样式 reset.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./variables.less&quot;</span>;<br><br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">dd</span>,<br><span class="hljs-selector-tag">dl</span>,<br><span class="hljs-selector-tag">dt</span>,<br><span class="hljs-selector-tag">form</span>,<br><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h5</span>,<br><span class="hljs-selector-tag">h6</span>,<br><span class="hljs-selector-tag">hr</span>,<br><span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-tag">li</span>,<br><span class="hljs-selector-tag">ol</span>,<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">pre</span>,<br><span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">textarea</span>,<br><span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@textColor</span>;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在 根目录的 js index.js 中引入<br>基本 css 重置样式设置完毕！！！</li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>如果遇到 less 文件自动编译生成 css 文件的话，引入 less 文件是不生效的。（没有实测）<br>此时，可以关闭 css 文件生成。<br>找到 settings.json 文件，放入以下代码，删除 css 文件，重启项目即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;less.compile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;compress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否压缩</span><br>        <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否生成map文件，有了这个可以在调试台看到less行数</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否输出css文件，false为不输出</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Route-配置"><a href="#Route-配置" class="headerlink" title="Route 配置"></a>Route 配置</h1><h2 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h2><p>安装 react-router-dom 并在 根目录 js index.js 中导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i react-router-dom<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/App&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;normalize.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/css/index.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>创建路由所需要的组件，并配置路由（不直接导入组件，使用懒加载）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /route/index.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-comment">// import Home from &quot;@/views/home&quot;</span><br><span class="hljs-comment">// 懒加载</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;@/views/home&quot;</span>));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Entire</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;@/views/entire&quot;</span>));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Detail</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;@/views/detail&quot;</span>));<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/entire&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Entire</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/deatil&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> /&gt;</span></span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/App.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 引入 useRoutes ，并在 return 结构中使用</span><br><span class="hljs-keyword">import</span> &#123; useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span>&#123;useRoutes(routes)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="懒加载问题"><a href="#懒加载问题" class="headerlink" title="懒加载问题"></a>懒加载问题</h3><p>此时页面路由切换时可能会造成以下问题：<br><img src="https://s1.xptou.com/2022/10/05/633d8dbc133aa.png" alt="路由配置后切换路由"></p><p>这是因为我们的组件是懒加载造成的，此时需要在根目录 js index.js 中导入 Suspense，具体修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/App&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;normalize.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/css/index.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p><strong>注：</strong> Suspense 组件包裹整个路由组件后，内部的 fallback 属性，就是在加载阶段显示的东西，fallback 可以是一个 组件，比如 loading 效果，也可以是字符串。</p><p>此时路由切换就没有问题了！！！</p><h1 id="Redux-搭建"><a href="#Redux-搭建" class="headerlink" title="Redux 搭建"></a>Redux 搭建</h1><p>目前 Redux 状态管理的选择：</p><ol><li>普通方式：目前项目中依然使用率非常高。</li><li>@reduxjs/toolkit 方式：推荐方式，未来的趋势。</li></ol><p>安装 reduxjs/toolkit。现在新版官方推荐安装 reduxjs/toolkit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i @reduxjs/toolkit react-redux<br><span class="hljs-meta prompt_"># </span><span class="language-bash">react-redux 必须安装</span><br></code></pre></td></tr></table></figure><h2 id="store-文件搭建"><a href="#store-文件搭建" class="headerlink" title="store 文件搭建"></a>store 文件搭建</h2><ol><li>在 store 文件夹下创建 index.js<br>内部代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-comment">// xxx: xxx</span><br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><ol><li>创建 modules 文件，用来使用两种不同的 redux 方式。在之下创建 home.js（rkt 方式）、entire 文件夹（普通方式）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// home.js</span><br><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> homeSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;&#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;&#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> homeSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><ol><li>在 store.js 中引入 home 首页的 reducer</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> homeReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/home&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">home</span>: homeReducer,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><ol><li>在 entire 文件夹下添加 js 文件（reducer、createAction 等等），并书写基础代码。<br>此时 store 文件的结构目录如下：<br><img src="https://s1.xptou.com/2022/10/05/633d973957ed7.png" alt="store结构目录"><br>代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /moudles/entire/reducer.js</span><br><span class="hljs-comment">// 初始数据</span><br><span class="hljs-keyword">const</span> initialState = &#123;&#125;;<br><br><span class="hljs-comment">// 如果 上一次数据为空，则使用 初始数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">prevState = initialState, action</span>) &#123;<br>  <span class="hljs-comment">// 根据 type 执行对应的逻辑代码</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&quot;</span>:<br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /moudles/entire/index.js  entire出口文件，用来存放所有的 reducer分支</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/index.js   store 整体配置的出口文件</span><br><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> homeReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/home&quot;</span>;<br><span class="hljs-keyword">import</span> entireReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/entire&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">home</span>: homeReducer,<br>    <span class="hljs-attr">entire</span>: entireReducer,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>此时查看控制台 redux，出现两个 reducer，就说明导入合并成功。<br><img src="https://s1.xptou.com/2022/10/05/633d99f5430bf.png" alt="redux控制台"></p><h1 id="axios-封装"><a href="#axios-封装" class="headerlink" title="axios 封装"></a>axios 封装</h1><p>安装 axios</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i axios<br></code></pre></td></tr></table></figure><ol><li>在 services 文件夹下创建 index.js 出口 js 文件。</li><li>创建 request 文件夹，在之下创建 index.js，用于 axios 请求封装。config.js，用于 baseUrl 等相关配置的书写。</li><li>创建 modules 文件夹，用于存放所有的请求模块</li></ol><p><strong>axios 请求封装代码（简单版）：</strong></p><p>axios 请求配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\services\request\config.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BASE_URL</span> = <span class="hljs-string">&quot;http://codercba.com:1888/airbnb/api&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TIMEOUT</span> = <span class="hljs-number">10000</span>;<br></code></pre></td></tr></table></figure><p>axios 请求封装的主要代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\services\request\index.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">BASE_URL</span>, <span class="hljs-variable constant_">TIMEOUT</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./config&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HYRequest</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">baseURL, timeout</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = axios.<span class="hljs-title function_">create</span>(&#123;<br>      baseURL,<br>      timeout,<br>    &#125;);<br><br>    <span class="hljs-comment">// 响应拦截器</span><br>    <span class="hljs-comment">// 当响应成功，拿到数据 res.data 时，只要 data</span><br>    <span class="hljs-comment">// 响应失败，返回失败结果</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>      <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;<br>      &#125;,<br>      <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> err;<br>      &#125;<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">// request 请求方法</span><br>  <span class="hljs-title function_">request</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-title function_">request</span>(config);<br>  &#125;<br><br>  <span class="hljs-comment">// get 请求</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// post 请求</span><br>  <span class="hljs-title function_">post</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span> &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HYRequest</span>(<span class="hljs-variable constant_">BASE_URL</span>, <span class="hljs-variable constant_">TIMEOUT</span>);<br></code></pre></td></tr></table></figure><p>请求封装的出口导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> hyRequestuest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./request&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> hyRequestuest;<br></code></pre></td></tr></table></figure><p>测试封装结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> hyRequestuest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    hyRequestuest.<span class="hljs-title function_">get</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/highscore&quot;</span> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>打印结果如图所示：<br><img src="https://s1.xptou.com/2022/10/05/633da3a4dd188.png" alt="封装请求打印"></p><p><strong>为什么会打印两次？</strong><br>严格模式下，生命周期会强制性执行两次，来检查代码是否有副作用函数。</p><h2 id="请求结果测试渲染"><a href="#请求结果测试渲染" class="headerlink" title="请求结果测试渲染"></a>请求结果测试渲染</h2><p><strong>需要注意的就是：</strong> 当页面初次渲染时，数据可能并未请请求回来，此时是 undefined，拿 list 肯定会报错。<br><strong>解决方法：</strong> 三目运算 <code>&#123;highScore.list &amp;&amp; highScore.list.map(.....)&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> hyRequestuest <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [highScore, setHighScore] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    hyRequestuest.<span class="hljs-title function_">get</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/home/highscore&quot;</span> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res);</span><br>      <span class="hljs-title function_">setHighScore</span>(res);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;highScore.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;highScore.subtitle&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      &#123;highScore.list &amp;&amp;</span><br><span class="language-xml">        highScore.list.map((item) =&gt; &#123;</span><br><span class="language-xml">          return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>;</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">项目开篇：项目规范以及初始化项目的配置。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React项目实战" scheme="https://jsq180.github.io/tags/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React过渡动画</title>
    <link href="https://jsq180.github.io/posts/9e0b1fdc.html"/>
    <id>https://jsq180.github.io/posts/9e0b1fdc.html</id>
    <published>2022-10-04T20:19:04.000Z</published>
    <updated>2022-10-05T16:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在开发中，我们想要给一个组件的显示和消失添加某种过渡动画，可以很好地增加用户体验。</li><li>当然，我们可以通过原生的 css 来实现这些过渡动画，但是 React 社区为我们提供了 react-transition-group 用来完成过渡动画。</li><li>React 曾为开发者提供过动画插件 react-addons-css-transition-group，后由社区维护，形成了现在的 react-transition-group</li></ul><p>这个库可以帮助我们方便的实现组件的 <span style="color:red" >入场 和 离场</span> 动画，使用时需要注意额外的安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i react-transition-group --save<br></code></pre></td></tr></table></figure><h1 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h1><ul><li>该组件是一个和平台无关的组件（不一定要结合 CSS）</li><li>在前端开发中，我们一般是结合 CSS 来完成样式的，所以比较常用的是 CSSTransition;</li></ul><h1 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h1><ul><li>在前段开发中，通常使用 CSSTransition 来完成过渡动画效果</li></ul><ol><li>CSSTransition 是基于 Transition 组件构建的</li><li>CSSTransition 执行过程中，有三个状态：appear、enter、exit</li><li>它们有三种状态，需要定义对应的 CSS 样式：<ul><li>第一类：<span style="color:red">开始状态</span>：对应的类是 -appear、-enter、-exit</li><li>第二类：<span style="color:red">执行动画</span>：对应的类是 -appear-active、-enter-active、-exit-active</li><li>第三类：<span style="color:red">执行结束</span>：对应的类是 -appear-done、-enter-done、-exit-done</li></ul></li></ol><h2 id="CSSTransition-基本使用"><a href="#CSSTransition-基本使用" class="headerlink" title="CSSTransition 基本使用"></a>CSSTransition 基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入 CSSTransition 组件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CSSTransition</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-transition-group&quot;</span>;<br><br><span class="hljs-comment">// 使用 CSSTransition 将想要实现动画的内容包裹，并添加属性</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">in: 是否显示 true 显示  false 不显示 </span><br><span class="hljs-comment">unmountOnExit: 动画执行完毕时是否卸载 一般为true</span><br><span class="hljs-comment">classNames: 设置 css 样式时的 类名</span><br><span class="hljs-comment">timeout:  动画执行时间</span><br><span class="hljs-comment">*/</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">in</span>=<span class="hljs-string">&#123;isShow&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">unmountOnExit</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;customName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;2000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>啦啦啦啦<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>设置 css 样式时，如果 classNames 为 ‘customName’，则设置的 css 样式时的类名为 <code>.customName-enter</code>、<code>.customName-exit</code>等。即 classNames 的类名 + 规定的过程名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 进入时的初始状态：opacity: 0; */</span><br><span class="hljs-selector-class">.customName-enter</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 进入时的执行状态：2s内 opacit变为1 */</span><br><br><span class="hljs-selector-class">.customName-enter-active</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span> ease;<br>&#125;<br><br><span class="hljs-comment">/* 离开时的初始状态，此时元素的状态还是 opacity: 1; */</span><br><span class="hljs-selector-class">.customName-exit</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 离开时执行的过程动画 */</span><br><span class="hljs-selector-class">.customName-exit-active</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSSTransition-常见对应的属性"><a href="#CSSTransition-常见对应的属性" class="headerlink" title="CSSTransition 常见对应的属性"></a>CSSTransition 常见对应的属性</h2><h3 id="in-触发进入或者退出状态"><a href="#in-触发进入或者退出状态" class="headerlink" title="in: 触发进入或者退出状态"></a>in: 触发进入或者退出状态</h3><ol><li>如果添加了 <code>unmountOnExit=&#123;true&#125;</code>，那么该组件会在执行退出动画结束后被移除掉</li><li><span style="color:red">当 in 为 true 时，触发进入状态</span>，会添加 <code>-enter</code>、<code>-enter-active</code> 的 class，开始执行动画，当进入动画执行结束后，会移除两个 class，并且添加 <code>-enter-done</code> 的 class。</li><li><span style="color:red">当 in 为 false 时，触发退出状态</span>，会添加<code>-exit</code>、<code>-exit-active</code> 的 class，开始执行动画，当动画执行结束后，会移除两个 class，并且添加 <code>-enter-done</code>的 class</li></ol><h3 id="classNames：动画-class-的名称"><a href="#classNames：动画-class-的名称" class="headerlink" title="classNames：动画 class 的名称"></a>classNames：动画 class 的名称</h3><p>决定了在编写 css 是，对应的 class 名称。比如：<code>card-enter</code>、<code>card-enter-active</code>、<code>card-enter-done</code>，该 classNames 为 card</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>过渡动画的执行时间<br><strong>注意：</strong> css 中的过渡时间才是决定<span style="color:red">动画的执行时间</span>，timeout 属性决定的是 <span style="color:red">多久后添加或移除对应的 class 类名</span>，在开发中两者尽量保持一致即可。</p><h3 id="appear"><a href="#appear" class="headerlink" title="appear"></a>appear</h3><p>是否在初次进入时添加动画（需要和 in 同时 为 true）<br>如果页面元素，当页面刷新时为 true，即加载时显示。此时是没有显示动画效果的，如果想让其在元素加载时就显示动画效果，则需要添加 appear 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">CSSTransition</span><br>  <span class="hljs-keyword">in</span>=&#123;<span class="hljs-literal">true</span>&#125;<br>  unmountOnExit=&#123;<span class="hljs-literal">true</span>&#125;<br>  classNames=<span class="hljs-string">&quot;customName&quot;</span><br>  appear=&#123;<span class="hljs-literal">true</span>&#125; <span class="hljs-comment">// 设置 appear 为 true</span><br>  timeout=&#123;<span class="hljs-number">2000</span>&#125;<br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>啦啦啦啦<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">CSSTransition</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 初次加载时的初始状态 */</span><br><span class="hljs-selector-class">.customName-appear</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">150px</span>);<br>&#125;<br><span class="hljs-comment">/* 初次加载时的结束状态，即从举例原位左侧-150px处，移到原位置，动画时间时 2s */</span><br><span class="hljs-selector-class">.customName-appear-active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">2s</span> ease;<br>&#125;<br><br><span class="hljs-comment">/* 当然，也可以和显示动画一致，此时只需将两个类名加到进入状态的css样式上即可 */</span><br><br><span class="hljs-selector-class">.customName-appear</span>,<br><span class="hljs-selector-class">.customName-enter</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.customName-appear-active</span>,<br><span class="hljs-selector-class">.customName-enter-active</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="unmountOnExit：退出后卸载组件"><a href="#unmountOnExit：退出后卸载组件" class="headerlink" title="unmountOnExit：退出后卸载组件"></a>unmountOnExit：退出后卸载组件</h3><h3 id="其它属性参考官网"><a href="#其它属性参考官网" class="headerlink" title="其它属性参考官网"></a>其它属性参考官网</h3><p><a href="https://reactcommunity.org/react-transition-group/transition">https://reactcommunity.org/react-transition-group/transition</a></p><h3 id="CSSTransition-对应的钩子函数"><a href="#CSSTransition-对应的钩子函数" class="headerlink" title="CSSTransition 对应的钩子函数"></a>CSSTransition 对应的钩子函数</h3><p>主要为了检测动画的执行过程，来完成一些 JS 的操作</p><ul><li>进入的钩子：</li></ul><ol><li>onEnter：在进入动画之前被处罚</li><li>onEntering：在应用进入动画时被触发</li><li>onEntered：在应用进入动画结束后被触发</li></ol><ul><li>离开的钩子：</li></ul><ol><li>onExit：在进入动画之前被处罚</li><li>onExiting：在应用进入动画时被触发</li><li>onExited：在应用进入动画结束后被触发</li></ol><h3 id="使用-CSSTransition-开启严格模式报错"><a href="#使用-CSSTransition-开启严格模式报错" class="headerlink" title="使用 CSSTransition 开启严格模式报错"></a>使用 CSSTransition 开启严格模式报错</h3><p>报错是：findDOMNode 已经被弃用，但是该动画组件依旧在使用。<br>原因是 CSSTransition 是一个组件，它在给你内部元素添加 class 类名时，需要拿到 该元素模块，此时 CSSTransition 使用的就是 findDOMNode。</p><h4 id="解决方法-1："><a href="#解决方法-1：" class="headerlink" title="解决方法 1："></a>解决方法 1：</h4><p>关闭严格模式（毫无卵用）</p><h4 id="解决方法-2："><a href="#解决方法-2：" class="headerlink" title="解决方法 2："></a>解决方法 2：</h4><p>修改源码（依旧毫无卵用）</p><h4 id="解决方法-3："><a href="#解决方法-3：" class="headerlink" title="解决方法 3："></a>解决方法 3：</h4><p>真正的解决方法。</p><ol><li>创建一个 ref</li><li>绑定到 过渡元素的最外层上</li><li>给 CSSTransition 添加 nodeRef 属性，并把 ref 同时绑定上去。<br>此时就不需要 CSSTransition 自己去使用 findDOMNode 寻找 过渡元素了。<br>具体代码如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// rpce</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CSSTransition</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-transition-group&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 1、创建 ref 属性</span><br>  sectionRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; isShow &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; isShow: !isShow &#125;)&#125;&gt;点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* &#123;isShow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>啦啦啦啦<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#125; */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span></span><br><span class="hljs-tag"><span class="language-xml">          // <span class="hljs-attr">3</span>、<span class="hljs-attr">将</span> <span class="hljs-attr">ref</span> <span class="hljs-attr">属性绑定到</span> <span class="hljs-attr">CSSTransition</span> <span class="hljs-attr">上</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">nodeRef</span>=<span class="hljs-string">&#123;this.sectionRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">in</span>=<span class="hljs-string">&#123;isShow&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">unmountOnExit</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;customName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">appear</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;2000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> console.log(&quot;开始进入动画&quot;)&#125;</span><br><span class="language-xml">          onEntering=&#123;() =&gt; console.log(&quot;执行进入动画&quot;)&#125;</span><br><span class="language-xml">          onEntered=&#123;() =&gt; console.log(&quot;执行进入结束&quot;)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;/*2、将 ref 属性绑定到 过渡元素 上*/&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.sectionRef&#125;</span>&gt;</span>啦啦啦啦<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h1 id="SwitchTransition"><a href="#SwitchTransition" class="headerlink" title="SwitchTransition"></a>SwitchTransition</h1><p>该组件可以完成两个组件之间切换的炫酷动画</p><ol><li>比如我们有一个按钮需要在 on 和 off 之间切换，我们希望看到 one 先从左侧退出，off 再从右侧进入</li><li>这个动画在 vue 中被称为 vue transition modes</li><li>react-transition-group 中使用 SwitchTransition 来实现该动画</li></ol><h2 id="SwitchTransition-基本使用"><a href="#SwitchTransition-基本使用" class="headerlink" title="SwitchTransition 基本使用"></a>SwitchTransition 基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// mode out-in in-out 两个属性，out-in 隐藏的属性先退出，显示的元素后进来</span><br>&lt;<span class="hljs-title class_">SwitchTransition</span> mode=<span class="hljs-string">&quot;out-in&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span></span><br><span class="hljs-tag"><span class="language-xml">    //   <span class="hljs-attr">key</span> <span class="hljs-attr">的状态必须设置成不同的</span>，<span class="hljs-attr">内容随意设置</span>，<span class="hljs-attr">根据状态不同</span>，<span class="hljs-attr">现实的</span> <span class="hljs-attr">key</span> <span class="hljs-attr">不同即可</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;isLogin</span> ? &quot;<span class="hljs-attr">exit</span>&quot; <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">login</span>&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;login&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;2000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        this.setState(&#123; isLogin: !isLogin &#125;);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      &#123;isLogin ? &quot;退出&quot; : &quot;登录&quot;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">SwitchTransition</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 准备进入时的样式状态 */</span><br><span class="hljs-selector-class">.login-enter</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 进入完成时的样式状态和过渡样式 */</span><br><span class="hljs-selector-class">.login-enter-active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span> ease;<br>&#125;<br><br><span class="hljs-comment">/* 准备退出时的样式状态 */</span><br><span class="hljs-selector-class">.login-exit</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 退出完毕时的样式状态和过渡样式 */</span><br><span class="hljs-selector-class">.login-exit-active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时就大功告成。<br>SwitchTransition 是 结合 CSSTransition 一起使用的</p><h2 id="SwitchTransition-属性"><a href="#SwitchTransition-属性" class="headerlink" title="SwitchTransition 属性"></a>SwitchTransition 属性</h2><ol><li>主要有一个属性：mode</li></ol><ul><li>in-out：表示新组件先进入，旧组件再移除。</li><li>out-in：表示旧组件先移除，新组件再进入。</li></ul><h2 id="如何使用-SwitchTransition"><a href="#如何使用-SwitchTransition" class="headerlink" title="如何使用 SwitchTransition"></a>如何使用 SwitchTransition</h2><ul><li>SwitchTransition 组件里面要有 CSSTransition 或者 Transition 组件，不能直接包裹你想要切换的组件</li><li>SwitchTransition 里面的 CSSTransition 或 Transition 组件不再向以前那样接收 in 属性来判断元素是何种状态，取而代之的是 <span style="color:red">key 属性</span></li></ul><h1 id="TransitionGroup"><a href="#TransitionGroup" class="headerlink" title="TransitionGroup"></a>TransitionGroup</h1><p>该组件是当操作的一组元素之间的动画切换，而非两个切换</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>引入 TransitionGroup, CSSTransition</li><li>将 列表使用 TransitionGroup 包裹起来，TransitionGroup 默认被渲染成 div，component 可以设置 该组件默认渲染的 元素</li><li>将 渲染的 每条元素使用 CSSTransition 包裹起来，并设置 classNames、timeout 等属性</li><li>书写 css 样式即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransitionGroup</span>, <span class="hljs-title class_">CSSTransition</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-transition-group&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">books</span>: [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;《龙族》&quot;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">414</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;《JavaScript百炼成仙》&quot;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">88</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;《游戏人生 no game no life》&quot;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">189</span> &#125;,<br>    ],<br>  &#125;;<br><br>  addNewBook = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> books = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">books</span>];<br>    books.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;欢迎来到实力至上主义的教室&quot;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">46</span> &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      books,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; books &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>书籍列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TransitionGroup</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;books.map((item, index) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> <span class="hljs-attr">classNames</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;2000&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                  &#123;item.name&#125;-&#123;item.price&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">CSSTransition</span>&gt;</span></span><br><span class="language-xml">            );</span><br><span class="language-xml">          &#125;)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">TransitionGroup</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.addNewBook&#125;</span>&gt;</span>添加书籍<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 书本添加时的初始状态 */</span><br><span class="hljs-selector-class">.book-enter</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 书本添加完成时的结束状态 */</span><br><span class="hljs-selector-class">.book-enter-active</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span> ease;<br>&#125;<br></code></pre></td></tr></table></figure><p>React 过渡动画就此结束。</p>]]></content>
    
    
    <summary type="html">学会使用 React 中的过渡动画，以及相关的API。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
    <category term="React知识补充" scheme="https://jsq180.github.io/tags/React%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-Redux、react-redux的使用及原理。</title>
    <link href="https://jsq180.github.io/posts/8582cb39.html"/>
    <id>https://jsq180.github.io/posts/8582cb39.html</id>
    <published>2022-09-30T21:40:48.000Z</published>
    <updated>2022-10-04T17:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，我们经常会遇到组件之间传递数据，因为组建的嵌套层级过高，而导致数据传输麻烦的情况。在学习 redux 之前，如果想要把状态在组件外部进行管理，就需要 React 提供的 <code>React.createContext()</code> 创建上下文，结合 hooks：<code>useContext(GlobalContext)</code>进行数据管理。而实际上 React 的上下文状态树就是参照 redux 实现的。</p><p>此处链接有关文章，以便观看：<a href="/posts/1515f762.html" title="React进阶篇-组件通信">React进阶篇-组件通信</a>、<a href="/posts/e3a9606a.html" title="Reac进阶篇-认识Hooks">Reac进阶篇-认识Hooks</a></p><h1 id="Flux-与-Redux-的介绍"><a href="#Flux-与-Redux-的介绍" class="headerlink" title="Flux 与 Redux 的介绍"></a>Flux 与 Redux 的介绍</h1><p>Flux 是一种架构思想，专门解决软件的结构问题。它跟 MVC 架构是同一类东西，但是更加简单和清晰。Flux 存在多种实现(至少 15 种)<br>基于 Flux 实现的具体第三方框架：<a href="https://github.com/voronianski/flux-comparison">https://github.com/voronianski/flux-comparison</a><br>Facebook Flux 是用来构建客户端 Web 应用的应用架构。它利用单向数据流的方式来组合 React 中的视图组件。它更像一个模式而不是一个正式的框架，开发者不需要太多的新代码就可以快速的上手 Flux。</p><p><img src="https://s1.xptou.com/2022/09/30/6336f671aeb42.png" alt="Flux数据流思想"></p><p>Redux 最主要是用作应用状态的管理。简言之，Redux 用一个单独的常量状态树（state 对象）保存这一整个应用的状态，这个对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用 actions 和 reducers），这样就可以进行数据追踪，实现时光旅行。</p><h1 id="Redux-介绍及设计和使用的三大原则"><a href="#Redux-介绍及设计和使用的三大原则" class="headerlink" title="Redux 介绍及设计和使用的三大原则"></a>Redux 介绍及设计和使用的三大原则</h1><p><img src="https://s1.xptou.com/2022/09/30/6336f8c71782a.png" alt="Redux介绍及设计和使用的三大原则"></p><h1 id="redux-工作流"><a href="#redux-工作流" class="headerlink" title="redux 工作流"></a>redux 工作流</h1><p><img src="https://s1.xptou.com/2022/09/30/6336f945b538a.png" alt="redux工作流"></p><p>便于理解，放一张个人理解的对照图：<br><img src="https://s1.xptou.com/2022/09/30/6336fea5e9cd2.png" alt="redux工作流个人理解"></p><h1 id="redux-使用"><a href="#redux-使用" class="headerlink" title="redux 使用"></a>redux 使用</h1><p><strong>实现功能：</strong>在首页三栏时，显示 tabbar，当点击<em>首页</em> 列表时，跳转<em>详情</em>，tabbar 消失，<em>详情</em>页面返回，tabbar 再次出现。<br><strong>思路：</strong>当页面加载时，订阅者 （App.js） 订阅 store 对象（发布者：detail.js）。<br>detail 页面显示 —&gt; 通知 App 隐藏 tabbar 。detail 页面卸载（消失）—&gt; 通知 App 显示 tabbar<br>安装 redux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i redux<br></code></pre></td></tr></table></figure><p><strong>创建 store 对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、安装 redux</span><br><span class="hljs-comment">// 2、引入 redux</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><br><span class="hljs-comment">// 4、创建一个处理函数并交给 store</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer接收的action&quot;</span>, action);<br>  <span class="hljs-keyword">return</span> prevState; <span class="hljs-comment">// 此时的 reducer 没有做任何操作，即 store 把数据交给 reducer，返回的也是老数据</span><br>&#125;;<br><span class="hljs-comment">// 3、创建 store 对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>此时我们可以看一下导出的 store 是什么？<br><img src="https://s1.xptou.com/2022/10/01/633850a1d35da.png" alt="store打印"><br>在这里面：我们需要使用的就是 dispatch 和 subscribe。</p><p><strong>App 组件订阅，detail 组件发布</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App订阅&quot;</span>);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// Detal.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// store.dispatch  通知：隐藏 tabbar</span><br>  store.<span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;hide-tabbar&quot;</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 销毁时   通知：显示 tabbar</span><br>    store.<span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;show-tabbar&quot;</span>,<br>    &#125;);<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>此时的页面效果：<br><img src="https://s1.xptou.com/2022/10/01/6338540b19484.png" alt="store基础效果"></p><p>既然我们可以接收到 action 的 type 类型，则可以根据 type 执行不同的操作，并返回给 App，让 App 做出相应的指令。<br><strong>基础 store 改进</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、安装 redux</span><br><span class="hljs-comment">// 2、引入 redux</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><br><span class="hljs-comment">// 4、创建一个处理函数并交给 store</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState = &#123; show: <span class="hljs-literal">true</span> &#125;, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 初次加载的时候，preState 为 undefined，那么给一个 默认值，默认展示 tabbar</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer接收的action&quot;</span>, action);<br>  <span class="hljs-keyword">const</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hide-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 3、创建 store 对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>此时 reducer 已经做出了操作并返回了 对应的数据，那我们应该让 订阅者 接收到这个数据并响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">const</span> [isShow, setIsShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 发布者已经把数据给你了，但是你要接收，通过 store.getState() 访问返回的数据</span><br>    <span class="hljs-comment">// 食堂（store）==&gt;营业时间（store.dispatch） ==&gt; 买饭（store.subscribe） ==&gt; 饭做好了通知你（reducer 返回） ==&gt; 你去拿饭（store.getState()）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App订阅&quot;</span>, store.<span class="hljs-title function_">getState</span>()); <span class="hljs-comment">// &#123;show: false&#125;  &#123;show: true&#125;</span><br>    <span class="hljs-title function_">setIsShow</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">show</span>);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// 可以得到 是否隐藏 tabbar 的通知指令</span><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MainIndex</span> /&gt;</span></span><br><span class="language-xml">      &#123;isShow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>此时的效果图：<br><img src="https://s1.xptou.com/2022/10/01/633858d318dfd.png" alt="App得到数据做出响应"></p><p><strong>Action 就是用来生成状态的，当我们的数据是异步请求数据时，可以使用 Action</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// action/tabbar.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hide</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;hide-tabbar&quot;</span>, <span class="hljs-comment">// 当我们请求不同类型的数据时，就可以返回请求结果</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;show-tabbar&quot;</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; show, hide &#125;;<br><br><span class="hljs-comment">// detail.js  使用 action 创建的类型</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// store.dispatch  通知</span><br>  store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">hide</span>()); <span class="hljs-comment">// 就是将 hide 执行，相当于还是派发的 &#123;type:xxxx&#125;</span><br>  <span class="hljs-comment">// console.log(store);</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">show</span>());<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p><strong>redux 的原理也就是 发布订阅者模式</strong></p><div class="note info modern"><p>此案例的 bug 是：detail 页面刷新，tabbar 会重新显示。因为在 detail 刷新的时候，App 没有进行订阅，此时就算把 隐藏指令传递了，App 组件也没有收到。会显示默认状态</p></div><h1 id="redux-原理"><a href="#redux-原理" class="headerlink" title="redux 原理"></a>redux 原理</h1><h2 id="实现简易-redux。"><a href="#实现简易-redux。" class="headerlink" title="实现简易 redux。"></a>实现简易 redux。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 之前的写法中  const store = createStore(reducer)  创建了一个 store 对象</span><br><span class="hljs-comment">// 1、自定义定一个 createStore 架子</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCustomStore</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;&#125;<br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-comment">// 订阅者获取数据</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    subscribe,<br>    dispatch,<br>    getState,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 2、将 订阅回调 放入执行队列，并在 dispatch 发布时依次执行</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCustomStore</span>(<span class="hljs-params">reducer</span>) &#123;<br>  <span class="hljs-comment">// 定义 list 数组，用来存储所有的订阅</span><br>  <span class="hljs-keyword">let</span> list = [];<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// 当有人订阅时，将订阅的回调函数 push 到 list 数组队列中</span><br>    list.<span class="hljs-title function_">push</span>(callback);<br>  &#125;<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 循环派发</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">// callback 没问题就可以调用</span><br>      list[i] &amp;&amp; list[i]();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    subscribe,<br>    dispatch,<br>    getState,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 3、dispatch在使用时接受了一个 action（例如：store.dispatch(hide())） ，并且把处理逻辑交给了 reducer</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCustomStore</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 定义 list 数组，用来存储所有的订阅</span><br>  <span class="hljs-keyword">let</span> list = [];<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// 当有人订阅时，将订阅的回调函数 push 到 list 数组队列中</span><br>    list.<span class="hljs-title function_">push</span>(callback);<br>  &#125;<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-comment">// dispatch 调用时接收 action</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">action</span>) &#123;<br>    <span class="hljs-comment">// reducer执行</span><br>    <span class="hljs-title function_">reducer</span>();<br>    <span class="hljs-comment">// 循环派发</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">// callback 没问题就可以调用</span><br>      list[i] &amp;&amp; list[i]();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    subscribe,<br>    dispatch,<br>    getState,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 4、接收 reducer。 reducer 的作用是在 调用 dispatch 的时候执行的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCustomStore</span>(<span class="hljs-params">reducer</span>) &#123;<br>  <span class="hljs-keyword">let</span> list = [];<br>  <span class="hljs-comment">// 初始化数据，reducer内部就是 switch 语句，当首次加载的时候，内部switch匹配不到，直接返回默认值或undefined</span><br>  <span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reducer</span>();<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    list.<span class="hljs-title function_">push</span>(callback);<br>  &#125;<br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">action</span>) &#123;<br>    <span class="hljs-comment">// reducer执行</span><br>    <span class="hljs-comment">// 这里：初始化时，reducer() 赋给 state 默认值。之后的 dispatch 调用，因为 state 存在了，所以拿到的就是 上一次 的数据</span><br>    state = <span class="hljs-title function_">reducer</span>(state, action); <span class="hljs-comment">// dispatch 接收action，并传给 reducer 函数进行switch匹配，返回新数据</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>      list[i] &amp;&amp; list[i]();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    subscribe,<br>    dispatch,<br>    getState,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 此时，reducer 也可以在dispatch调用的时候执行了，同时已经拿到执行结果，只剩下利用 getState 把结果返回，让订阅者访问。</span><br><span class="hljs-comment">// 数据返回</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> state;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结合案例完整代码"><a href="#结合案例完整代码" class="headerlink" title="结合案例完整代码"></a>结合案例完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// redux 基础源码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCustomStore</span>(<span class="hljs-params">reducer</span>) &#123;<br>  <span class="hljs-comment">// 定义 list 数组，用来存储所有的订阅</span><br>  <span class="hljs-keyword">let</span> list = [];<br>  <span class="hljs-comment">// 初始化数据，reducer内部就是 switch 语句，当首次加载的时候，内部switch匹配不到，直接返回默认值或undefined</span><br>  <span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reducer</span>(<span class="hljs-literal">undefined</span>, &#123;&#125;);<br>  <span class="hljs-comment">// 订阅者订阅调用</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// 当有人订阅时，将订阅的回调函数 push 到 list 数组队列中</span><br>    list.<span class="hljs-title function_">push</span>(callback);<br>  &#125;<br><br>  <span class="hljs-comment">// dispatch 调用时接收 action</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">action</span>) &#123;<br>    <span class="hljs-comment">// reducer执行</span><br>    <span class="hljs-comment">// 把 原本的 state 状态（即 prevState）和 action 传入，调用 reducer函数，返回最新状态，并覆盖掉老状态</span><br>    <span class="hljs-comment">// 此时的 state 就是 reducer switch 匹配操作后的最新状态</span><br>    state = <span class="hljs-title function_">reducer</span>(state, action);<br>    <span class="hljs-comment">// 循环派发</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">// callback 没问题就可以调用</span><br>      list[i] &amp;&amp; list[i]();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 调用时，将最新的 state 状态返回</span><br>    <span class="hljs-keyword">return</span> state;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    subscribe,<br>    dispatch,<br>    getState,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// store.js</span><br><span class="hljs-comment">// reducer 操作函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState = &#123; show: <span class="hljs-literal">true</span> &#125;, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 初次加载的时候，preState 为 undefined，那么给一个 默认值，默认展示 tabbar</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer接收的action&quot;</span>, action);<br>  <span class="hljs-keyword">const</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hide-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 创建 store 对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createCustomStore</span>(reducer);<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br><br><span class="hljs-comment">// detail.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 调用 dispatch，执行 reducer，改变数据状态  通知 tabbar 隐藏</span><br>  store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">hide</span>());<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 通知 tabbar 显示</span><br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">show</span>());<br>  &#125;;<br>&#125;, []);<br><br><span class="hljs-comment">// App.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// subscribe 调用订阅</span><br>  store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 通过 getState() 访问到最新的数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App订阅&quot;</span>, store.<span class="hljs-title function_">getState</span>());<br>    <span class="hljs-title function_">setIsShow</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">show</span>);<br>  &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></figure><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><p>纯函数的概念:相同的输入永远得到相同的输出.且没有任何可观察的副作用.<br>即 输入的内容永远不会被操作，操作的永远是深拷贝的新数据，返回的也是新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pureFunc</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-comment">// 深拷贝，成为全新的数据，此处可借用 lodash 库</span><br>  <span class="hljs-keyword">let</span> newobj = &#123; ...obj &#125;;<br>  newobj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;李四&quot;</span>;<br>  <span class="hljs-keyword">return</span> newobj;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">test</span>(obj)); <span class="hljs-comment">// &#123;name:&quot;李四&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;name:&quot;张三&quot;&#125;</span><br><span class="hljs-comment">// 传入的数据不能被修改，对外界没有任何影响的，就是 纯函数</span><br></code></pre></td></tr></table></figure><h1 id="reducer-扩展-reducer-合并"><a href="#reducer-扩展-reducer-合并" class="headerlink" title="reducer 扩展(reducer 合并)"></a>reducer 扩展(reducer 合并)</h1><p>如果让不同的 action 所处理的属性之间没有联系，我们可以把 Reducer 函数拆分。<br>不同的函数负责处理不同属性，最终把它们合并成一个大的 Reducer 即可。</p><p>原 store 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、安装 redux</span><br><span class="hljs-comment">// 2、引入 redux</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><br><span class="hljs-comment">// 4、创建一个处理函数并交给 store</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState = &#123; show: <span class="hljs-literal">true</span>, cityName: <span class="hljs-string">&quot;北京&quot;</span> &#125;, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 初次加载的时候，preState 为 undefined，那么给一个 默认值，默认展示 tabbar</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer接收的action&quot;</span>, action);<br>  <span class="hljs-keyword">const</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hide-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show-tabbar&quot;</span>:<br>      newState.<span class="hljs-property">show</span> = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;change-cityName&quot;</span>:<br>      newState.<span class="hljs-property">cityName</span> = action.<span class="hljs-property">payload</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 3、创建 store 对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><ol><li>在 redux 文件夹下新建 reducer 文件夹</li><li>根据情况创建 TabbarReducer.js、CityReducer.js</li><li>分别在两个 js 中书写对应的 switch case</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// reducer/TabbarReducer.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabbarReducer</span> = (<span class="hljs-params">prevState = &#123; show: <span class="hljs-literal">true</span> &#125;, action</span>) =&gt; &#123;<br><br>    <span class="hljs-keyword">const</span> newState = &#123; ...prevState &#125;<br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;hide-tabbar&#x27;</span>:<br>            newState.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span><br>            <span class="hljs-keyword">return</span> newState<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;show-tabbar&#x27;</span>:<br>            newState.<span class="hljs-property">show</span> = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">return</span> newState<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> newState<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">TabbarReducer</span><br><br><br><br><span class="hljs-comment">// reducer/CityReducer.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">CityReducer</span> = (<span class="hljs-params">prevState = &#123; cityName: <span class="hljs-string">&quot;北京&quot;</span> &#125;, action</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> newState = &#123; ...prevState &#125;<br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;change-cityName&#x27;</span>:<br>            newState.<span class="hljs-property">cityName</span> = action.<span class="hljs-property">payload</span><br>            <span class="hljs-keyword">return</span> newState<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> newState<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CityReducer</span><br><br><br><br><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> &#123; combineReducers, createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-comment">// 引入两个js中的函数</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">CityReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer/CityReducer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TabbarReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer/TabbarReducer&quot;</span>;<br><br><span class="hljs-comment">// 合并 reducer，将两个分开的 reducer合并为一个整体</span><br><span class="hljs-keyword">const</span> reducer = <span class="hljs-title function_">combineReducers</span>(&#123;<span class="hljs-title class_">CityReducer</span>,<span class="hljs-title class_">TabbarReducer</span>&#125;)<br><span class="hljs-comment">// 3、创建 store 对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><span class="hljs-comment">// 导出 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><ol><li>subscribe 订阅者通过 <code>store.getState().TabbarReducer</code>或者<code>store.getState().CityReducer</code> 访问到数据</li></ol><p>此时，若我们再次使用 store.getState() 输出的就不是一个 数据对象了。而是 以 key：value 格式。合并时的名称：名称对应的最新数据。<br><img src="https://s1.xptou.com/2022/10/02/633961c6ae521.png" alt="reducer合并后的 store.getState()"><br>此时我们使用最新数据时需要再多访问一层。</p><h1 id="redux-中间件"><a href="#redux-中间件" class="headerlink" title="redux 中间件"></a>redux 中间件</h1><h2 id="使用起因"><a href="#使用起因" class="headerlink" title="使用起因"></a>使用起因</h2><p>redux 不希望把数据交互都书写在 UI 页面中，而 redux 提供的书写异步的地方就是 action，在创建 actionCreator 时发起请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// list.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// list 数据为 0，请求，否则用旧数据，不再发请求</span><br>  <span class="hljs-keyword">if</span> (store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// redux 不推荐这种写法</span><br>    <span class="hljs-comment">// axios(&#x27;story.json&#x27;).then(res =&gt; &#123;</span><br><br>    <span class="hljs-comment">//   setList(res.data.list)</span><br>    <span class="hljs-comment">//   store.dispatch(&#123; type: &quot;change-list&quot;, payload: res.data.list &#125;)</span><br>    <span class="hljs-comment">// &#125;)</span><br><br>    <span class="hljs-comment">// action 中写异步 利用 action 来执行异步请求</span><br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">getListAction</span>());<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">setList</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>);<br>  &#125;<br>&#125;, []);<br><br><span class="hljs-comment">// action/getListAction.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getListAction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;story.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;change-list&quot;</span>,<br>      <span class="hljs-attr">payload</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>    &#125;;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getListAction;<br></code></pre></td></tr></table></figure><p>正常思路：action 把函数体创建好 ，当 diapatch 调用时，请求异步数据，并 <code>return &#123;type: &quot;change-list&quot;,payload: res.data.list,&#125;</code>，之后 reducer switch 匹配到 change-list ，把数据进行赋值，之后 store.getState() 就可以访问到了。<br>但是结果却是控制台报错：<br><img src="https://s1.xptou.com/2022/10/03/633ab1c4c6f63.png" alt="action发起异步请求报错"><br>提示报错是：得到的是 undefined。可能需要一个中间件。请使用例如 redux-thunk 来进行派发这些数据。</p><p><strong>为什么是 undefined</strong><br>因为 dispatch 调用 函数时，函数是立即执行的，而 axios 请求是异步的，在函数执行完毕时请求并未执行完。 没有 return，得到的就是 undefined。当请求执行完毕 return 时，函数解析已经早早的执行报错了。</p><h2 id="redux-中间件使用起因"><a href="#redux-中间件使用起因" class="headerlink" title="redux 中间件使用起因"></a>redux 中间件使用起因</h2><p>在 redux 里，action 仅仅是携带了数据的普通 js 对象。action creator 返回的值是这个 action 类型的对象。然后通过 store.dispatch()进行分发。同步的情况下一切都很完美，但是 reducer 无法处理异步的情况。</p><p>那么我们就需要在 action 和 reducer 中间架起一座桥梁来处理异步。这就是 middleware（中间件）。</p><h3 id="中间件的由来与原理、机制"><a href="#中间件的由来与原理、机制" class="headerlink" title="中间件的由来与原理、机制"></a>中间件的由来与原理、机制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">thunkMiddleware</span>(<span class="hljs-params">&#123; dispatch, getState &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">next</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span><br>    <span class="hljs-keyword">typeof</span> action === <span class="hljs-string">&quot;function&quot;</span> ? <span class="hljs-title function_">action</span>(dispatch, getState) : <span class="hljs-title function_">next</span>(action);<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的意思是，中间件这个桥梁接受到的参数 action，如果不是 function 则和过去一样直接执行 next 方法(下一步处理)，相当于中间件没有做任何事。如果 action 是 function，则先执行 action，action 的处理结束之后，再在 action 的内部调用 dispatch。</p><h3 id="常用异步中间件"><a href="#常用异步中间件" class="headerlink" title="常用异步中间件"></a>常用异步中间件</h3><h4 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-thunk&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(fetchReducer, <span class="hljs-title function_">applyMiddleware</span>(thunk));<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getComingSoon</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">//进行异步请求</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch, store</span>) =&gt;</span> &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>store.dispatch 参数可以是一个 function</p><ol><li>安装外挂（redux-thunk）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i redux-thunk<br></code></pre></td></tr></table></figure><p>此时，改写原来的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  2、action/story.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getListAction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// thunk 会传一个参数，用来派发，所以大部分时候写成 dispatch</span><br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;story.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;change-list&quot;</span>,<br>        <span class="hljs-attr">payload</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getListAction;<br><br><span class="hljs-comment">// 3、store.js  redux的数据管理核心</span><br><span class="hljs-keyword">import</span> reduxThunk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-thunk&quot;</span>; <span class="hljs-comment">// 引入 thunk</span><br><br><span class="hljs-comment">// 创建时使用 thunk      applyMiddleware 应用中间件</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer, <span class="hljs-title function_">applyMiddleware</span>(reduxThunk));<br><br><span class="hljs-comment">// 4、list.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 长度为 0，调用 getListAction，请求数据，并派发给 subscribe 订阅者</span><br>  <span class="hljs-keyword">if</span> (store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// action 中写异步</span><br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">getListAction</span>());<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">setList</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>);<br>  &#125;<br>  <span class="hljs-comment">// 订阅</span><br>  store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此时可以拿到 订阅的最新数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;list订阅&quot;</span>, store.<span class="hljs-title function_">getState</span>());<br>    <span class="hljs-title function_">setList</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>);<br>  &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></figure><h4 id="redux-promise"><a href="#redux-promise" class="headerlink" title="redux-promise"></a>redux-promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> promiseMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-promise&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>  fetchReducer,<br>  <span class="hljs-title function_">applyMiddleware</span>(thunk, promiseMiddleware)<br>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getComingSoon</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">//进行异步请求</span><br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`****`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;cominglist&quot;</span>, <span class="hljs-attr">payload</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span> &#125;;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>跟使用 redux-thunk 基本一样，唯一不同的就是原本使用 redux-thunk 的写法，现在改成 redux-promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  action/story.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getListAction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// redux-promise 返回的要求是一个 promise 对象，如果我们想拿到结果，就把结果也 return 出去就好了</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;story.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;change-list&quot;</span>,<br>      <span class="hljs-attr">payload</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>    &#125;;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getListAction;<br></code></pre></td></tr></table></figure><p>store.dispatch 参数可以是一个 promise 对象</p><h1 id="解决重复订阅问题"><a href="#解决重复订阅问题" class="headerlink" title="解决重复订阅问题"></a>解决重复订阅问题</h1><p>当组件 subscribe 订阅之后，进行组件之间的来回切换，会发现，每次组件切换都会触发一次 subscribe 订阅，这就使得组件中相同的订阅越来越多，而这些订阅，我们需要一个就行了，重复的也没有任何意义。<br>所以，为了解决重复订阅的问题，我们应该在组件销毁的时候，取消订阅，这样下次组件显示时，重新订阅才不会使该组建的订阅越来越多。<br><strong>取消订阅</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将 订阅赋值给 变量</span><br><span class="hljs-keyword">let</span> unsubscribe = store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Community订阅&quot;</span>, store.<span class="hljs-title function_">getState</span>());<br>  <span class="hljs-title function_">setList</span>(store.<span class="hljs-title function_">getState</span>().<span class="hljs-property">CommunityListReducer</span>.<span class="hljs-property">list</span>);<br>&#125;);<br><br><span class="hljs-comment">// 组件卸载执行</span><br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 取消订阅</span><br>  <span class="hljs-title function_">unsubscribe</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="redux-调试工具"><a href="#redux-调试工具" class="headerlink" title="redux 调试工具"></a>redux 调试工具</h1><p>可以去谷歌商店搜索 redux，安装即可。<br>安装完成之后，在控制台我们可以看到有 Redux 这一栏。点开之后我们可以发现，出现如图所示的页面：<br><img src="https://s1.xptou.com/2022/10/03/633acbb861881.png" alt="未配置代码的redux控制台"><br>但此时我们是无法使用的，因为 redux 只有进行代码配置了才能生效。<br>打开 store 文件。即创建 store 的 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// applyMiddleware：应用中间件</span><br><span class="hljs-comment">// combineReducers：合并每个 reducer 模块</span><br><span class="hljs-comment">// createStore：创建 store 调用</span><br><span class="hljs-comment">// compose：增强 store 的</span><br><span class="hljs-keyword">import</span> &#123; applyMiddleware, combineReducers, createStore, compose &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><br><span class="hljs-comment">// 官方源码，除了变量名以外，不可更改</span><br><span class="hljs-keyword">const</span> composeEnhancers = <span class="hljs-variable language_">window</span>.<span class="hljs-property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;<br><br><span class="hljs-comment">// 创建 store，使用 composeEnhancers 将内部的中间件应用包裹</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>  reducer,<br>  <span class="hljs-title function_">composeEnhancers</span>(<span class="hljs-title function_">applyMiddleware</span>(reduxThunk))<br>);<br></code></pre></td></tr></table></figure><p>此时刷新页面再次查看：<br><img src="https://s1.xptou.com/2022/10/03/633ace9903348.png" alt="配置代码的redux控制台"></p><h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redux 是使用纯 js 的写法，实际上不光可以应用于 react，vue、jquery 都可以使用。这需要组件自己订阅、发布、取消订阅等。<br>而 react-redux 则是专门服务于 react 的数据管理模式<br><img src="https://s1.xptou.com/2022/10/03/633ade4beb3f4.png" alt="关系"><br>github 链接：<a href="https://github.com/reduxjs/react-redux">https://github.com/reduxjs/react-redux</a></p><h2 id="容器组件与-UI-组件"><a href="#容器组件与-UI-组件" class="headerlink" title="容器组件与 UI 组件"></a>容器组件与 UI 组件</h2><p>（1）UI 组件</p><ul><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用 this.state 这个变量）</li><li>所有数据都由参数（this.props）提供</li><li>不使用任何 Redux 的 API<br>（2）容器组件</li><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>带有内部状态</li><li>使用 Redux 的 API</li></ul><h2 id="react-redux-使用"><a href="#react-redux-使用" class="headerlink" title="react-redux 使用"></a>react-redux 使用</h2><ol><li>安装 react-redux</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i react-redux<br></code></pre></td></tr></table></figure><ol><li>在 App 根组件 引入 Provider 并使用，使整个 App 成为一个供应商，并向下派发 store 管理的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-comment">// store 就是 需要统一管理的数据状态</span><br><span class="hljs-keyword">import</span> &#123; store &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./06-react-redux/redux/store&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><ol><li>利用 connect 拿到相应的数据，并传递给当前被 connext 调用后执行的组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入 connect</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;props&quot;</span>, props); <span class="hljs-comment">// 打印 props</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MainIndex</span> /&gt;</span></span><br><span class="language-xml">        &#123;props.isShow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// connect的返回必须是一个 function connect()，执行完毕后再调用 App connect()(App)</span><br><span class="hljs-comment">// connect 内部第一个参数必须是回调函数，且必须要有返回值 return</span><br><span class="hljs-comment">// connect(组件需要的属性 || null，组件需要的方法)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;state&quot;</span>, state);<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-comment">// state是所有数据的集合，那我们只需要拿到当前组件需要的数据即可</span><br>    <span class="hljs-attr">isShow</span>: state.<span class="hljs-property">TabbarReducer</span>.<span class="hljs-property">show</span>,<br>  &#125;;<br>&#125;)(<span class="hljs-title class_">App</span>);<br></code></pre></td></tr></table></figure><p>此时的打印如图所示：<br><img src="https://s1.xptou.com/2022/10/03/633aed478a8cd.png" alt="打印结果"></p><p>connect 有两个参数，第一个参数接收组件需要的属性，第二个参数接收组件需要的方法：<br><code>connect(()=&gt;&#123;retun &#125;,&#123;&#125;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;&#125;,<br>&#125;,<br>&#123;   <span class="hljs-comment">// 这两个是控制 tabbar 显示隐藏的 action 函数</span><br>   hide, show<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>完整代码：</strong></p><ol><li>App.js 控制 Tabbar 显示隐藏</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Tabbar&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MainIndex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./routes&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./assets/css/custom.css&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./redux/store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-comment">// store.subscribe 订阅</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-comment">// props可以得到由 connect 传递过来的 isShow</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MainIndex</span> /&gt;</span></span><br><span class="language-xml">        &#123;props.isShow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state</span>) =&gt; &#123;<br>  <span class="hljs-comment">// state 就是完整的 store 数据集合</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isShow</span>: state.<span class="hljs-property">TabbarReducer</span>.<span class="hljs-property">show</span>,<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps)(<span class="hljs-title class_">App</span>);<br></code></pre></td></tr></table></figure><ol><li>Deatil.js 进入详情，隐藏 tabbar，离开显示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; hide, show &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../redux/action/tabbar&quot;</span>;<br><span class="hljs-comment">// import store from &quot;../../redux/store&quot;;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Deatil</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [hide, show] = props;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 加载，通知隐藏</span><br>    <span class="hljs-title function_">hide</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 离开，通知显示</span><br>      <span class="hljs-title function_">show</span>();<br>    &#125;;<br>  &#125;, [hide, show]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>详情页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-comment">// 把 store 中的状态映射成属性传递给 组件</span><br><span class="hljs-keyword">const</span> mapDispatchToProps = &#123;<br>  hide,<br>  show,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<span class="hljs-literal">null</span>, mapDispatchToProps)(<span class="hljs-title class_">Deatil</span>);<br></code></pre></td></tr></table></figure><h1 id="HOC-与-context-通信在-react-redux-底层中的应用"><a href="#HOC-与-context-通信在-react-redux-底层中的应用" class="headerlink" title="HOC 与 context 通信在 react-redux 底层中的应用"></a>HOC 与 context 通信在 react-redux 底层中的应用</h1><p>(1) connect 是 HOC， 高阶组件<br>(2) Provider 组件，可以让容器组件拿到 state ， 使用了 context</p><h1 id="高阶组件构建与应用"><a href="#高阶组件构建与应用" class="headerlink" title="高阶组件构建与应用"></a>高阶组件构建与应用</h1><p>HOC 不仅仅是一个方法，确切说应该是一个组件工厂，获取低阶组件，生成高阶组件。</p><p>(1)代码复用，代码模块化<br>(2)增删改 props<br>(3) 渲染劫持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Child.js</span><br><span class="hljs-comment">//高阶函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Control</span>(<span class="hljs-params">wrappedComponent</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">wrappedComponent</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.props.data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Control</span>(<span class="hljs-title class_">MyComponent</span>);<br><span class="hljs-comment">//高阶组件 //Parent.js import MyControlComponent from &quot;./Child&quot; &lt;MyControlComponent data=&#123;this.state.value&#125;/&gt;</span><br><span class="hljs-comment">//在父级传入data是null的时候，这一块儿就只会显示loading..., //不会显示组件的具体内容，如果data不为null, 就显示真实组件信息。</span><br></code></pre></td></tr></table></figure><h1 id="Redux-持久化"><a href="#Redux-持久化" class="headerlink" title="Redux 持久化"></a>Redux 持久化</h1><ol><li>安装 redux-persist</li><li>store.js 中的修改及配置，其它相关配置请看 github 仓库：<a href="https://github.com/rt2zz/redux-persist">https://github.com/rt2zz/redux-persist</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 应用中间件、合并reducer、compose包装、创建 store</span><br><span class="hljs-keyword">import</span> &#123; applyMiddleware, combineReducers, compose, createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-comment">// reducer 合并需要的各个 reducer 分支</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">CityReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer/CityReducer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TabbarReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer/TabbarReducer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">CommunityListReducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer/CommunityListReducer&quot;</span>;<br><span class="hljs-comment">// 异步中间件</span><br><span class="hljs-keyword">import</span> reduxThunk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-thunk&quot;</span>;<br><br><span class="hljs-comment">// 导入 persist 的相关属性</span><br><span class="hljs-keyword">import</span> &#123; persistStore, persistReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-persist&quot;</span>;<br><span class="hljs-keyword">import</span> storage <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-persist/lib/storage&quot;</span>; <span class="hljs-comment">// defaults to localStorage for web</span><br><br><span class="hljs-comment">// redux 调试工具使用的代码</span><br><span class="hljs-keyword">const</span> composeEnhancers = <span class="hljs-variable language_">window</span>.<span class="hljs-property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;<br><br><span class="hljs-comment">// 合并 reducer</span><br><span class="hljs-keyword">const</span> reducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-title class_">CityReducer</span>,<br>  <span class="hljs-title class_">TabbarReducer</span>,<br>  <span class="hljs-title class_">CommunityListReducer</span>,<br>&#125;);<br><br><span class="hljs-comment">// persist 配置</span><br><span class="hljs-keyword">const</span> persistConfig = &#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;reactKey&quot;</span>, <span class="hljs-comment">// 存储时的 key</span><br>  storage, <span class="hljs-comment">// 存储在本地的 localstrage 中</span><br>&#125;;<br><br><span class="hljs-comment">// 对 reducer 进行相关配置</span><br><span class="hljs-keyword">const</span> persistedReducer = <span class="hljs-title function_">persistReducer</span>(persistConfig, reducer);<br><br><span class="hljs-comment">// const store = createStore(reducer, composeEnhancers(applyMiddleware(reduxThunk)));</span><br><span class="hljs-comment">// 原本接收的 reducer，经过配置之后，传递新配置好的 变量属性</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>  persistedReducer,<br>  <span class="hljs-title function_">composeEnhancers</span>(<span class="hljs-title function_">applyMiddleware</span>(reduxThunk))<br>);<br><br><span class="hljs-comment">// 普通的 store 升级加强版（先这么理解）</span><br><span class="hljs-keyword">let</span> persistor = <span class="hljs-title function_">persistStore</span>(store);<br><br><span class="hljs-comment">// 导出</span><br><span class="hljs-keyword">export</span> &#123; store, persistor &#125;;<br></code></pre></td></tr></table></figure><ol><li>修改 根组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./06-react-reduxTest/App&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-comment">// 引入 store.js 中导出的 store、persistor</span><br><span class="hljs-keyword">import</span> &#123; store, persistor &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./06-react-redux/redux/store&quot;</span>;<br><span class="hljs-comment">// 引入 PersistGate</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PersistGate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-persist/integration/react&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PersistGate</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">&#123;null&#125;</span> <span class="hljs-attr">persistor</span>=<span class="hljs-string">&#123;persistor&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">PersistGate</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span> */&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>此时就大功告成，我们就可以在本地存储中看到 store 管理的数据都被缓存下来了。<br><img src="https://s1.xptou.com/2022/10/04/633bf6c3ac75d.png" alt="persist持久缓存"></p><p>但是如果我们不想把所有数据都存储下来，指向存储部分，或者部分不存储，则可以进行如下设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// BLACKLIST</span><br><span class="hljs-keyword">const</span> persistConfig = &#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>  <span class="hljs-attr">storage</span>: storage,<br>  <span class="hljs-attr">blacklist</span>: [<span class="hljs-string">&quot;nopersist&quot;</span>], <span class="hljs-comment">// navigation will not be persisted（凡是放在黑名单中的就不会存储）</span><br>&#125;;<br><br><span class="hljs-comment">// WHITELIST</span><br><span class="hljs-keyword">const</span> persistConfig = &#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>  <span class="hljs-attr">storage</span>: storage,<br>  <span class="hljs-attr">whitelist</span>: [<span class="hljs-string">&quot;persist&quot;</span>], <span class="hljs-comment">// only navigation will be persisted（放在白名单中的才会进行存储）</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>React 常用知识已记录完毕，后续的扩展知识会在 React 知识补充中继续书写</strong></p>]]></content>
    
    
    <summary type="html">了解Redux工作流，Redux的使用和原理，以及react-redux的使用等状态管理。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Router 6 快速上手</title>
    <link href="https://jsq180.github.io/posts/7eac1738.html"/>
    <id>https://jsq180.github.io/posts/7eac1738.html</id>
    <published>2022-09-27T21:28:06.000Z</published>
    <updated>2022-09-30T21:45:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习完 react-router-dom@之后，因为 react-router-dom@6 与@5 的使用差别还是有点大的，为了防止在遇到路由版本不一致的情况下导致的各种问题，故在此记录一下路由 v6 版本的使用以及相较于 v5 版本的区别。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p><ul><li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li><li><strong style="color:#dd4d40">react-router-dom:&lt;/strong &gt; <strong style="color:#dd4d40">包含 react-router 所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li><li>react-router-native: 包括 react-router 所有内容，并添加一些专门用于 ReactNative 的 API，例如:<code>&lt;NativeRouter&gt;</code>等。</li></ul></li><li><p>与 React Router 5.x 版本相比，改变了什么？</p><ul><li>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</li><li>语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。</li><li>新增多个 hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code> 等。</li><li><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong><br>….</li></ul></li></ol><p>详情可参考官网：<a href="https://reactrouter.com/en/main">https://reactrouter.com/en/main</a></p><h1 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h1><p><strong>1、使用 <code>HashRouter</code>或<code>BrowserRouter</code>将 App 根组件包裹起来。</strong><br>目的就是使用这两个路由模式将整个大组件包裹起来就 OK。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// **注：App.js 是所有组件的根组件；；index.js 是注册 根组件的地方**</span><br><br><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Tabbar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">//  ###or</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-comment">/* ReactDOM.render(</span><br><span class="hljs-comment">  &lt;HashRouter&gt;</span><br><span class="hljs-comment">    &lt;App /&gt;</span><br><span class="hljs-comment">  &lt;/HashRouter&gt;,</span><br><span class="hljs-comment">  document.getElementById(&quot;root&quot;) */</span><br></code></pre></td></tr></table></figure><p><strong>2、编写页面组件</strong><br><strong>3、创建 路由 tabbar 导航链接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Tabbar.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Tabbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">position:</span> &quot;<span class="hljs-attr">fixed</span>&quot;, <span class="hljs-attr">bottom:</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时点击路由就可以发生变化，但是由于未注册路由组件，所以没有内容。</p><p><strong>4、注册路由组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// V6 写法  Route 必须和 Routes 搭配使用，缺一不可</span><br><span class="hljs-comment">// /route/index.js</span><br>&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Community</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MyCenter</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br><br><span class="hljs-comment">// V5 写法 Route 外部可以不写 Switch，那样路由会向下匹配到最后一个模糊路由</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/myCenter&#x27;</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span>&#123;return true? <span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span> /&gt;</span>&#125;&#125; /&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Login&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/detail&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Detail&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><span class='p red'>V6版本的写法上，由全新的属性 Routes 代替 Switch 来包裹 Route。且在V5中，只写 Route 不写 Switch 是可以的，只不过路由会向下继续匹配，但V6中，Route 必须要和 Routes 一起使用，不然会直接报错</span><p><strong>了解：</strong>V6 中的 Route，新增了一个 caseSensitive 属性，是否区分大小写，不写该属性默认是 false，不区分大小写。<code>&lt;Route caseSensitive=&#123;true&#125; path=&quot;/MyCenter&quot; element=&#123;&lt;MyCenter /&gt;&#125; /&gt;</code>，如果设置为 true，以该例子来说：之前用 /mycenter 能访问到的，现在访问不到，必须使用 /MyCenter。</p><p><strong>5、引入路由组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Tabbar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IndexRoute</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./route&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">IndexRoute</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">IndexRoute</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的效果图如下：<br><img src="https://s1.xptou.com/2022/09/27/63330e3fb8c35.png" alt="v6路由基本效果图"></p><span class='p red'>Routes 的作用和 Switch 基本一致，只不过 Routes 必须搭配 Route 使用，和用 Switch 一样，当匹配到一个之后，就 break 不往下匹配了。</span><h1 id="lt-Routes-gt-与-lt-Route-gt"><a href="#lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="&lt;Routes/&gt; 与 &lt;Route/&gt;"></a><code>&lt;Routes/&gt;</code> 与 <code>&lt;Route/&gt;</code></h1><ol><li>v6 版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</li><li><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</li><li><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</li><li><code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。</li><li>当 URL 发生变化时，<code>&lt;Routes&gt;</code>都会查看其所有子<code>&lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</li><li><code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合 useRoutes() 配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</li></ol><h1 id="路由重定向-Navigate"><a href="#路由重定向-Navigate" class="headerlink" title="路由重定向 Navigate"></a>路由重定向 Navigate</h1><p>在 之前的代码中，虽然我们定义好了路由，但是控制台有一个警告。<br><img src="https://s1.xptou.com/2022/09/27/63331293796ba.png" alt="/没有匹配规则"><br>意思就是：path 名为 / 的路由没有匹配到。<br>在 V5 版本中我们通过 Redirect 重定向，将 / 重定向到 /home 路由上。<br><strong>在 V6 中，React 废弃掉了 Redirect，使用了 Navigate 来进行重定向</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// V5 写法</span><br>&lt;<span class="hljs-title class_">Redirect</span> <span class="hljs-keyword">from</span>=<span class="hljs-string">&quot;/&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span> exact /&gt;;<br><br><span class="hljs-comment">// V6 写法</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Routes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span>&#125; /&gt;</span>;<br></code></pre></td></tr></table></figure><p>小案例：<br>当 sum 变为 2 的时候，跳转 mycenter 页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>Home 首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><br>  &#123;count === <span class="hljs-number">2</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>初始值：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>&#125;<br>  &lt;button<br>    onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>    &#125;&#125;<br>  &gt;<br>    点击+<span class="hljs-number">1</span><br>  &lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>综上可以看出，Navigate 就是用来跳转的，其中的 to 就是跳转的路由。<br><code>&lt;Route path=&quot;/&quot; element=&#123;&lt;Navigate to=&quot;/home&quot; /&gt;&#125; /&gt;</code> 的意思就是：当路由为 / 时，渲染 Navigate，而 Navigate 组件就是用来跳转到某个路由的。</p><p><strong>注意：</strong> Navigate 中有两个属性：to 和 replace。to 即为跳转的页面，replace 则是跳转的模式，replace = {true/false}。默认是 false，即 push。<br><code>&lt;Navigate to=&quot;/home&quot; replace=&#123;true&#125; /&gt;</code>，设置为 true 时，不会在浏览器留下痕迹。</p><h1 id="路由点击高亮显示"><a href="#路由点击高亮显示" class="headerlink" title="路由点击高亮显示"></a>路由点击高亮显示</h1><p>在 V5 版本中，NavLink 会自动给 点击的路由标签加上 .active 类名，如果想自定义类名，在 NavLink 内部加上 activeClassName=’customActivexxxx’ 类似。</p><p>在 V6 版本中，<strong>activeClassName 已经不能使用了。改为了 <code>className=&#123;(state)=&gt;&#123; retuen state.isActive: &#39;customActive&#39; : &#39;&#39; &#125;&#125;</code>的格式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// className 内部的回调函数可以默认接收一个参数</span><br>&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(a)</span> =&gt;</span> &#123;</span><br><span class="language-xml">      console.log(666, a);</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>我们可以看一下默认接收的参数是什么？<br><img src="https://s1.xptou.com/2022/09/28/633444ee1ddbf.png" alt="className回调函数的默认参数"><br>React 17 版本中，是只有一个 <strong>isActive</strong> 参数的，在 18 中，才新加了 <strong>isPending</strong> 参数。<br>而我们需要 return 数据，才能设置自定义类名<br><strong>具体使用方法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">      return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br><br><span class="hljs-comment">// 每个 路由标签 都需要加上这个，点击切换时才能实现颜色切换效果，我们可以对他稍微封装一下</span><br>setClassActiveName (isActive) =&gt;&#123;<br>  <span class="hljs-keyword">return</span> isActive ? <span class="hljs-string">&quot;customActive&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 此时的内部就可以这样写：</span><br>&lt;li&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123; setClassActiveName(state.isActive) &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    首页</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>函数内部的写法很简单，根据三目运算，判断当前的 isActive 是否为 true，(true 就是点击项)，点击是将 自定义类名返回，设置 css 样式就行了。<br><img src="https://s1.xptou.com/2022/09/28/633446cd1df40.png" alt="高亮效果图"><br><span class='p red'>NavLink 的作用和 Link 基本一致，但是 Link 不会动态添加高亮标签</span></p><h1 id="useRoutes-路由表"><a href="#useRoutes-路由表" class="headerlink" title="useRoutes 路由表"></a>useRoutes 路由表</h1><p>相当于把路由整和成一个数组，react 提供的这个 hooks 直接就可以把路由渲染出来<br>在之前，我们注册路由是这样子的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Community</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mycenter&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">MyCenter</span> /&gt;</span>&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span>&#125; /&gt;</span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><p>每个 Route 的相似度比较高，那么我们能不能抽离成一个数组呢？此时可以使用 useRoutes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 引入 useRoutes</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/Community&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/myCenter&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexRoute</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// useRoute 内部是一个 [&#123;&#125;,&#123;&#125;......]</span><br>  <span class="hljs-comment">// 每个对象有两个属性：&#123;path:&#x27;/home&#x27;,element:&lt;Home /&gt;&#125;</span><br>  <span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>([<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span></span> &#125;,<br>  ]);<br><br>  <span class="hljs-comment">// 定义好的 路由数组，直接使用就可以了</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;element&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useRoutes 就是把路由变成一个数组，交给 useRoutes 来渲染路由，不用再每一个路由都定义了</strong><br>这种写法和 vue 中的定义路由基本一样了，相互借鉴（bushi）。</p><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>V6 版本的 嵌套路由和 V5 区别还是不算小的。<br>V5 版本嵌套路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是 最外层的路由 和 路由标签</span><br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">flex</span>&#x27;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;, <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br><br><br><span class="hljs-comment">// 这是 Home 组件内部的嵌套路由 和路由标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">lightcoral</span>&#x27; &#125;&#125;&gt;</span>已看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span>在看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span>&quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span>想看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&#123;<span class="hljs-comment">/* 路由配置  嵌套路由 */</span>&#125;<br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br>    &#123;<span class="hljs-comment">/* 内部子路由重定向，也需要加 Switch，不然 从上到下都可以匹配到 /home ，最终一定会匹配到重定向 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* 写 Switch ，让他匹配到就停止，不再继续匹配 */</span>&#125;<br>    &lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&#x27;/home/watched&#x27;</span> component=&#123;<span class="hljs-title class_">Watched</span>&#125; /&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/watching&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watching&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/wantwatch&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;WantWatch&#125;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home/watched&#x27;</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><p>V6 版本嵌套路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// routes.js  定义路由的数组集合</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/watching&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watching</span> /&gt;</span></span> &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/watched&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watched</span> /&gt;</span></span> &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/wantwatch&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WantWatch</span> /&gt;</span></span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watching&quot;</span> /&gt;</span></span> &#125;,<br>];<br><br><span class="hljs-comment">// 注册路由组件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;/routes.js&quot;</span>;<br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>(routes);<br><br><span class="hljs-comment">// 渲染路由根组件</span><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;element&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-comment">// 根组件的 路由标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      首页</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      动漫区</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mycenter&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(state)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return state.isActive ? &quot;customActive&quot; : &quot;&quot;;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      个人中心</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br><br><span class="hljs-comment">// --------------注册 Home 组件下的子组件---------------</span><br><span class="hljs-comment">// Home.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span>, <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>Home 首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">lightcoral</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;watched&#x27;</span>&gt;</span>已看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;watching&#x27;</span>&gt;</span>在看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;wantwatch&#x27;</span>&gt;</span>想看<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 指定路由组件呈现的位置 */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>当 /home 对象下，有 <strong>children</strong> 属性时，说明 /home 路由下有子路由，即嵌套路由。<br><strong>在 Home 组件中注册使用嵌套路由</strong></p><ol><li><strong>引入一个名为 Outlet 的属性</strong><code>import &#123; Outlet &#125; from &#39;react-router-dom&#39;</code>。</li><li><strong>在合适的位置插入<code>&lt;Outlet/&gt;</code>即可</strong>，相当于一个插槽，把路由对应的组件放入这个位置</li><li>V6 版本的嵌套路由<strong>甚至可以不带该路由的 父级路径，但是不写父级路径时一定不能写 /，不然就是直接以 / 作为根路径开始进行匹配路由</strong></li></ol><p>Outlet 就是一个 function 函数。<br><img src="https://s1.xptou.com/2022/09/28/633456bb8de7b.png" alt="Outlet打印"><br><strong>了解：</strong>嵌套路由显示时，它对应的父级路由自然也会高亮，如果不想让父级高亮，可以在他的父级 NavLink 标签上加上 end 属性即可。</p><h1 id="路由-params-传参"><a href="#路由-params-传参" class="headerlink" title="路由 params 传参"></a>路由 params 传参</h1><p>如图所示：<br>我们想点击左侧链接的时候，右侧显示 detail 详情页面，即三级路由。<br><img src="https://s1.xptou.com/2022/09/28/633462445802e.png" alt="实现三级路由并携带参数"><br>代码实现方式和 实现 二级路由基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// route.js</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;watching&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watching</span> /&gt;</span></span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;watched&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Watched</span> /&gt;</span></span>,<br>        <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;detail/:id&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> /&gt;</span></span> &#125;], <span class="hljs-comment">// params传参，同样接收一个动态参数</span><br>      &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;wantwatch&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WantWatch</span> /&gt;</span></span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/community&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Community</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mycenter&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> /&gt;</span></span> &#125;,<br>  &#123; <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NotFound</span> /&gt;</span></span> &#125;,<br>]);<br><br><span class="hljs-comment">// watched 组件页面：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">borderTop:</span> &quot;<span class="hljs-attr">2px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">000</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> &quot;<span class="hljs-attr">1</span>&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightyellow</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    &#123;watched.map((item) =&gt; (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;/*动态路由参数*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">detail</span>/$&#123;<span class="hljs-attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> &quot;<span class="hljs-attr">1</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>此时可以显示 detail 页面了，但是 props 为空，因为 detail 不是路由组件。按照 V5 的写法，我们可以使用 withRouter 包裹，给组件 location、params 等属性。<br>但是现在使用的是 路由表，无法使用 withRouter 了，就需要使用一个新的东西来获取 params 参数 <strong>useParams</strong></p><h1 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h1><p>useParams 就是用来接收 params 参数用的，V5 中还需要 props.match.params，使用 useParams，就可以直接拿到 params 参数对象了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br><span class="hljs-comment">// params 是一个对象 &#123;id: &#x27;e553b56278076626007905060928f8bc&#x27;&#125;</span><br><span class="hljs-comment">// 如果动态路由是：detail/:id/:name/:age 这种格式，则获取到的参数为：&#123; id:xx, name:xx, age:xx &#125;</span><br></code></pre></td></tr></table></figure><h1 id="useMatch（了解）"><a href="#useMatch（了解）" class="headerlink" title="useMatch（了解）"></a>useMatch（了解）</h1><p>V5 版本中，访问 params 参数是通过 match， this.props.match.params 来访问。<br>V6 版本中 可以使用 useParams 这个 hooks 来访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useMatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-comment">// useMatch 的参数是 path，必须写完整的路径</span><br><span class="hljs-keyword">const</span> match = <span class="hljs-title function_">useMatch</span>(<span class="hljs-string">&quot;/home/watched/detail/:id&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/29/633594ef59dda.png" alt="useParams和useMatch打印"></p><p>useMatch 用的不多，大部分时候使用 useParams 就可以了。</p><p class='p red'>使用动态路由站位，例如：/:id、/:name。类似的，获取参数是使用的 params 属性。不使用占位，直接通过 ? 传参的，是使用 search 属性来获取参数的，不过 search 拿到的是字符串，而不是 参数对象</p><h1 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h1><p>通过 ? 拼接的参数，是用 search 来获取的。V5 中使用 location.search，获取到的是字符串参数。<br>V6 中 useSearchParams 解构出 参数对象，并调用对象身上的 get() 方法，就可以获取到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">const</span> [search,setSearch]= <span class="hljs-title function_">useSearchParams</span>()<br></code></pre></td></tr></table></figure><p>useSearchParams 不同于 useParams 和 useMatch，它定义出来的是一个数组，一个参数对象，一个 function 函数。<br><img src="https://s1.xptou.com/2022/09/29/633598ea53a52.png" alt="useSearchParams打印结果"><br><strong>使用 useSearchParams</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 点击跳转的路由链接 ，通过 ? 传递了一个 id 参数</span><br>&lt;div style=&#123;&#123; <span class="hljs-attr">flex</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;lightyellow&quot;</span> &#125;&#125;&gt;<br>  &#123;watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">detail</span>?<span class="hljs-attr">id</span>=<span class="hljs-string">$&#123;item.id&#125;</span>`&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ))&#125;<br>&lt;/div&gt;<br><br><span class="hljs-comment">// detail 页面 获取参数</span><br><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">const</span> [search,setSearch]= <span class="hljs-title function_">useSearchParams</span>()<br><span class="hljs-comment">// 调用 search 上的 get 方法，想获取哪个参数就传哪个参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br><br><br><span class="hljs-comment">/*********** setSearch **********/</span><br><span class="hljs-comment">// setSearch 顾名思义，更改 search 参数</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;setSearch(&#x27;id=1&amp;name=张三&#x27;)&#125;&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h1 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useSearchParams, useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/29/63359e710692a.png" alt="useLocation的数据"><br>同样和 V5 一样，使用 location.search 访问 search 参数。</p><h1 id="state-参数"><a href="#state-参数" class="headerlink" title="state 参数"></a>state 参数</h1><p>V5 写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义路由连接</span><br>&lt;div style=&#123;&#123; <span class="hljs-attr">flex</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;lightyellow&quot;</span> &#125;&#125;&gt;<br>  &#123;watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">pathname:</span> &quot;<span class="hljs-attr">detail</span>&quot;, <span class="hljs-attr">state:</span> &#123; <span class="hljs-attr">id:</span> <span class="hljs-attr">item.id</span> &#125; &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ))&#125;<br>&lt;/div&gt;;<br><span class="hljs-comment">// ## or    onClick=&#123;()=&gt;&#123; props.history.push(&#123; pathname: &quot;/detail&quot;, state: &#123; id: item.id &#125;&#125;) &#125;&#125;</span><br><br><span class="hljs-comment">// 获取 state 参数</span><br>props.<span class="hljs-property">location</span>.<span class="hljs-property">state</span>;<br></code></pre></td></tr></table></figure><p>V6 写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义路由链接</span><br>&lt;div style=&#123;&#123; <span class="hljs-attr">flex</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;lightyellow&quot;</span> &#125;&#125;&gt;<br>  &#123;watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;detail&quot;</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">id:</span> <span class="hljs-attr">item.id</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ))&#125;<br>&lt;/div&gt;;<br><br><span class="hljs-comment">// detail 页面获取 参数</span><br><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">state</span>);<br></code></pre></td></tr></table></figure><p>V6 中定义导航链接，不再采用 V5 的写法：<code>&lt;Link to=&quot;detail&quot; state=&#123;&#123; id: item.id &#125;&#125;&gt;点我跳转detail页面并传id参数&lt;/Link&gt;</code><br>V6 中获取 state 参数，需要使用 <code>useLocation</code>，解构出来 location，通过 location.state 获取。<br><img src="https://s1.xptou.com/2022/09/29/6335a1712301f.png" alt="useLocation获取state参数"></p><h1 id="V6-中的编程式导航-useNavigate"><a href="#V6-中的编程式导航-useNavigate" class="headerlink" title="V6 中的编程式导航 useNavigate"></a>V6 中的编程式导航 useNavigate</h1><p><strong>V6 中的编程式导航跳转</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// V5编程式跳转</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">id</span>: xxx &#125; &#125;);<br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: xxx &#125; &#125;);<br><br><span class="hljs-comment">// V6 编程式导航</span><br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><span class="hljs-comment">// 点击跳转</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">jumpDetail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;detail&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>navigate 可以传两个参数，一个 path 路径，一个 对象。对象可以传 replace 跳转模式，state 参数（使用 navigate 只能携带 state 参数跳转，search 和 params 参数都不行，这两个参数尽量直接拼接在路径上）</p><p><strong>useNavigate 前进后退</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br><span class="hljs-comment">// 后退</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">back</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>);<br>&#125;;<br><br><span class="hljs-comment">// 前进</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">forward</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">navigate</span>(<span class="hljs-number">1</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><div class="tip warning"><p>V6 版本中，如果是嵌套路由跳转，不管是 声明式导航，还是 编程式导航，路径要么写全称，要么简写的时候不能写 /，一旦写 /，react 会默认为根路径。</p></div><h1 id="不常用路由-hooks"><a href="#不常用路由-hooks" class="headerlink" title="不常用路由 hooks"></a>不常用路由 hooks</h1><h2 id="useInRouterContext"><a href="#useInRouterContext" class="headerlink" title="useInRouterContext"></a>useInRouterContext</h2><p>作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。<br>什么意思？就比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">HashRouter</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IndexRoute</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">HashRouter</span>&gt;<br><span class="hljs-comment">// #### or</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>被 HashRouter 或 BrowserRouter 包裹的组件，就可以说：该组件连同它内部的所有子组件都是处于路由的上下文环境中。<br><code>const a = useInRouterContext()</code>打印的是 true/false，true 就证明处于该组件处于路由的上下文组件中。（该组件是被 HashRouter/BrowserRouter 包裹的）</p><h2 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType"></a>useNavigationType</h2><ol><li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li><li>返回值：POP、PUSH、REPLACE。即用户是通过哪种方式来到当前组件的</li><li>备注：POP 是指在浏览器中直接打开了这个路由组件（刷新页面）。</li></ol><p>页面加载的时候打印该 hooks 的调用：<code>const u = useNavigationType()</code>，打印为 PUSH/REPLACE/POP 中的一个，大多数不特意设置跳转模式 replace，默认为 PUSH。刷新页面为 POP。</p><h2 id="useOutlet"><a href="#useOutlet" class="headerlink" title="useOutlet()"></a>useOutlet()</h2><p>作用：用来呈现当前组件中渲染的嵌套路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home 组件下 有三个 嵌套的路由子组件 在Home 组件中使用</span><br><span class="hljs-keyword">import</span> &#123; useOutlet &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result&quot;</span>, <span class="hljs-title function_">useOutlet</span>());<br></code></pre></td></tr></table></figure><p>如果嵌套路由没有挂载,则 result 为 null。<br><img src="https://s1.xptou.com/2022/09/29/6335ae3f03a5b.png" alt="嵌套路由未挂载状态"></p><p>如果嵌套路由已经挂载,则展示嵌套的路由对象<br><img src="https://s1.xptou.com/2022/09/29/6335aebd76c98.png" alt="嵌套路由挂载"></p><h2 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath()"></a>useResolvedPath()</h2><p>作用：给定一个 URL 值，解析其中的：path、search、hash 值。<br>例如：<code>const a = useResolvedPath(&#39;/user?id=0001&amp;name=张三#qwe&#39;)</code>打印出的就是：<br><img src="https://s1.xptou.com/2022/09/29/6335b0228a8f2.png" alt="useResolvedPath解析url"><br>这个 hooks 就是接收一个 url，并把该 url 的 path、search、hash 解析成一个对象。</p><p>#</p>]]></content>
    
    
    <summary type="html">详细讲解一下react-router-dom@6版本的路由模式、用法以及与 @5 的区别</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
    <category term="React知识补充" scheme="https://jsq180.github.io/tags/React%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React路由的基本使用</title>
    <link href="https://jsq180.github.io/posts/a3c44df5.html"/>
    <id>https://jsq180.github.io/posts/a3c44df5.html</id>
    <published>2022-09-23T21:03:45.000Z</published>
    <updated>2022-09-30T21:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h1><ul><li>一个路由就是一个映射关系(key:value) 。</li><li>一个针对 React 而设计的路由解决方案、可以友好的帮你解决 React components 到 URl 之间的同步映射关系。key 为路径, value 可能是 function 或 component</li><li><strong>本篇章使用 V5 版本的路由</strong></li></ul><p>V6 篇章请看：<a href="/posts/7eac1738.html" title="React Router 6 快速上手">React Router 6 快速上手</a></p><h1 id="路由安装"><a href="#路由安装" class="headerlink" title="路由安装"></a>路由安装</h1><p>官方链接：<a href="https://reacttraining.com/react-router/web/guides/quick-start">https://reacttraining.com/react-router/web/guides/quick-start</a></p><p>本篇章讲解 V5 版本，但是默认安装 V6，所以指定版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install react-router-dom@5<br></code></pre></td></tr></table></figure><h1 id="路由使用"><a href="#路由使用" class="headerlink" title="路由使用"></a>路由使用</h1><h2 id="路由方法导入"><a href="#路由方法导入" class="headerlink" title="路由方法导入"></a>路由方法导入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h2><p>每个路由要有与其映射的组件。<br>新建 pages 文件夹，用于存放视图组件。创建 Home、Community、MyCenter 组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/Community&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/MyCenter&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 使用 HashRouter，路由会出现 #</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基本写法：</span><br><span class="hljs-comment">     &lt;HashRoute&gt;</span><br><span class="hljs-comment">        &lt;Route path=&quot;/path1&quot; component=&#123;Path1&#125;&gt;路由一&lt;/Route&gt;</span><br><span class="hljs-comment">        &lt;Route path=&quot;/path2&quot; component=&#123;Path2&#125;&gt;路由二&lt;/Route&gt;</span><br><span class="hljs-comment">     &lt;/HashRoute&gt;</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span class='p red'>path定义路径，一定不能忘记写 /</span><p>此时我们可以通过 /home 路由来访问 Home 组件。<br>但是 如果是一个很大的项目，一级路由一级多级路由就会很多，全部存储在 App.js 中略显臃肿，所以我们通常把路由的部分抽离出来：<br>创建 route 文件夹，在里边创建 index.js。<br>把 App.js 中的路由代码转移到 /route/index.js 中，此时两部分的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// /route/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Community</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Community&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyCenter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/MyCenter&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IndexRoute</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/wantWatch&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Redirect 的 from 是模糊匹配，以上方代码为例。当路由为 &quot;/myCenter&quot; 时，刷新会再次重定向到 &quot;/home&quot;。</span><br><span class="hljs-comment">原因如下：</span><br><span class="hljs-comment">Route 从上到下匹配，当匹配到 /community 时，原本应该加载 Community 组件，但是接着往下走，再次匹配到了 &quot;/&quot;，所以又再次重定向到 &quot;/home&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这时，就会造成一个问题：不管从哪个页面刷新，都会匹配到 /，就会重定向到指定页面，这是一个严重的 bug，此时需要用到 Switch</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">IndexRoute</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./route&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;textAlign:</span>&quot;<span class="hljs-attr">center</span>&quot;&#125;&#125;&gt;</span>App组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">IndexRoute</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">IndexRoute</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h1><p>例如：<code>path=&quot;/film/filmlist&quot;</code> <code>path=&quot;film/filmlist/detail&quot;</code><br>并不只有一级路由，这些就是多级路由</p><h1 id="路由重定向以及精确匹配"><a href="#路由重定向以及精确匹配" class="headerlink" title="路由重定向以及精确匹配"></a>路由重定向以及精确匹配</h1><p>重定向精确匹配：<code>&lt;Redirect from=&#39;&#39; to=&#39;&#39; exact&gt;&lt;/Redirect&gt;</code>，路由精确匹配：<code>&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; exact /&gt;</code><br>from to，就是表面意思：从 … 到 …<br>exact：该匹配为精确匹配，加上这个参数，只有 from 完全匹配的情况下，才重定向。不加 exact，是模糊匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">HashRouter</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">    &#123;/* 模糊匹配，当路由中含有 / 的时候，就可以匹配上 */&#125;</span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">exact</span> /&gt;</span> */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">    &#123;/* 精确匹配 exact */&#125;</span><br><span class="language-xml">    &#123;/* 只有当路由为 / 的时候，才重定向，其余时候接着往下走 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">    &#123;/*前面几个都不匹配，加载 404 页面*/&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">HashRouter</span>&gt;<br></code></pre></td></tr></table></figure><span class='p red'>1、 exact 精确匹配 (Redirect 即使使用了exact</span><span class='p red'>2、 Warning: Hash history cannot PUSH the same path; a new entry will not be added to the history stack</span><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>什么是嵌套路由？<br>以下方图片为例：<br><img src="https://s1.xptou.com/2022/09/22/632c73c2b9cd3.png" alt="嵌套路由举例"><br>导航的切换并不是组件的显示与隐藏，而是路由的变化引起的组件切换。但这些组件又有公共的 Home 组件的信息，是属于 Home 组件的下级。<br>是 嵌套在 Home 组件内部的子组件，这就是路由嵌套。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该组件为 Home 组件 ，把公共部分写在 Home 组件中，再在 Home 组件内部写 子路由</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Redirect</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watching</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/Watching&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watched</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/Watched&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">WantWatch</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./homes/WantWatch&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">height:</span> &quot;<span class="hljs-attr">50px</span>&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        Home页轮播图</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcoral</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          已看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          在看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightgray</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          想看</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;/* 路由配置  嵌套路由 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 内部子路由重定向，也需要加 Switch，不然 从上到下都可以匹配到 /home ，最终一定会匹配到重定向 */&#125;</span><br><span class="language-xml">        &#123;/* 写 Switch ，让他匹配到就停止，不再继续匹配 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watched&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/watching&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Watching&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/wantwatch&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;WantWatch&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/watched&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的效果图：<br><img src="https://s1.xptou.com/2022/09/22/632c84899fdb9.png" alt="嵌套路由效果图"><br><div class="tip warning"><p>注意：当一个路由内部需要嵌套子路由的话，该路由一定不能是精确匹配 ，一定不能写 exact ！！！ </p></div></p><h1 id="路由跳转方式"><a href="#路由跳转方式" class="headerlink" title="路由跳转方式"></a>路由跳转方式</h1><p>在次之前，我们的路由映射的组件都是通过导航栏输入对应路由才显示的，正常使用中，则是点击某一项就会跳转显示对应的组件，此时就需要导航。</p><p>原生跳转页面的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明式跳转</span><br>&lt;a href=<span class="hljs-string">&quot;/index.html&quot;</span>&gt;&lt;<span class="hljs-regexp">/a&gt;; /</span><span class="hljs-regexp">/已经提前写好的链接就叫声明式</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 编程式跳转</span><br><span class="hljs-regexp">location.href = &quot;/i</span>ndex.<span class="hljs-property">html</span><span class="hljs-string">&quot;; // 通过 js 实现跳转</span><br></code></pre></td></tr></table></figure><p>了解原生写法之后，就可以在 React 中尝试使用：<br>定义一个 Tabbae 组件，点击 首页，路由为”/home”，跳转 Home 组件。动漫区 “/community” Community 组件。个人中心 “/myCenter” MyCenter 组件。</p><p>这是利用原生 a 链接跳转，功能也可以实现，唯一需要注意的是 要加 #</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">position:</span> &quot;<span class="hljs-attr">fixed</span>&quot;, <span class="hljs-attr">bottom:</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> <span class="hljs-attr">50</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p>原生的写法固然可以实现，但我们怎么在点击之后让他高亮呢？<br>原生 js 写法：window.onhashchange 监听路由的改变—&gt;location.href 拿到当前路由，再去匹配，符合之后该选项高亮<br>而 React 已经提供好了一个声明式导航跳转：<strong>NavLink</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/community&quot;</span>&gt;</span>动漫区<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/myCenter&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用之后发现控制台报错：<br><img src="https://s1.xptou.com/2022/09/25/632ff776b4f31.png" alt="NavLink单独使用报错"><br>此时检查代码可以看到：<br>Tabbar.js<br><img src="https://s1.xptou.com/2022/09/25/632ff7f0ed9ca.png" alt="Tabbar组件"><br>App.js<br><img src="https://s1.xptou.com/2022/09/25/632ff85cd2ca3.png" alt="App组件"><br>App 组件中使用了 Tabbar 组件，但外部并没有 Route，所以报错。此时我们改进一下：<br><strong>方法一：利用插槽</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br>&lt;<span class="hljs-title class_">IndexRoute</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tabbar</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">IndexRoute</span>&gt;<br><br><br><span class="hljs-comment">// route.js  即 IndexRoute组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">  &#123;props.children&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/community&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Community&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/myCenter&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MyCenter&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>既然 Tabbar 需要一个 Router，而 IndexRouter 中有 HashRouter，那么我们大可以把 Tabbar 组件利用插槽放入 IndexRouter 组件内部。此时 Tabbar 外部就是 Router 了，完全满足需求。</p><h3 id="点击字体高亮"><a href="#点击字体高亮" class="headerlink" title="点击字体高亮"></a>点击字体高亮</h3><p>其实 React 已经贴心的把高亮的情况给监听到了，我们只需要写 css 样式即可。<br><img src="https://s1.xptou.com/2022/09/25/632ffbc050362.png" alt="点击NavLink链接"><br>既然如此，我们只需要设置 css 样式： <code>.active&#123; color:red &#125;</code> 即可。</p><span class='p red'>如果你不喜欢 active class类名，也可以自定义高亮类名。写法：<NavLink to=/home activeClassName=customActive>首页</NavLink>。必须使用 activeClassName， 是固定的</span><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>写法：<code>this.props.history.push( &quot;/detail/&quot; + id )</code></p><p>React 的编程式导航，其实就是在原生 js 的基础上进行了一次封装。<br>我们可以看一下 组件 身上的 props 究竟有什么：<br><img src="https://s1.xptou.com/2022/09/25/63300341083bf.png" alt="组件props的属性"><br>组件的 props 身上 自带 history、location、match 三个属性。我们的编程式路由跳转就是依赖于 history。</p><p>为什么之前的代码中 props 都为 {} 呢？</p><p>因为 现在的组件是写在 Route 里面的：<code>&lt;Route path=&#39;/home/watched&#39; component=&#123;Watched&#125; /&gt;</code>，看似只是传递了组件，实际上 Route 再一次将一些属性传递到了 组件身上。此时的组件的父组件其实是 Route。<strong>莫名其妙得到的 props 其实就是 Route 父组件将一些属性传递给了子组件。</strong><br><strong>列表页跳转详情页，编程式导航写法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setList</span>(res.<span class="hljs-property">data</span>);<br>  &#125;);<br>&#125;, [list]);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">jumpDetail</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 原生 js 编程式跳转</span><br>  <span class="hljs-comment">// window.location.href=`#/detail/$&#123;id&#125;`</span><br><br>  <span class="hljs-comment">// React 编程式跳转</span><br>  <span class="hljs-comment">/*this.*/</span> props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>&#125;;<br><br>&#123;<br>  list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        jumpDetail(item.id);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      &#123;item.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><p>我们也可以写成声明式导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">detail</span>/$&#123;<span class="hljs-attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hooks-中的另一种编程式写法：useHistory"><a href="#hooks-中的另一种编程式写法：useHistory" class="headerlink" title="hooks 中的另一种编程式写法：useHistory"></a>hooks 中的另一种编程式写法：useHistory</h3><p>useHistory 的引用相当于 props.history</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入 useHistory</span><br><span class="hljs-keyword">import</span> &#123; useHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-comment">// useHistory 引用</span><br><span class="hljs-keyword">const</span> history = <span class="hljs-title function_">useHistory</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">click</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 普通 React 编程式写法</span><br>  <span class="hljs-comment">// props.history.push(`/detail/$&#123;id&#125;`)</span><br><br>  <span class="hljs-comment">// useHistory</span><br>  history.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="动态路由以及获取路由参数"><a href="#动态路由以及获取路由参数" class="headerlink" title="动态路由以及获取路由参数"></a>动态路由以及获取路由参数</h2><h3 id="动态路由-params-传参"><a href="#动态路由-params-传参" class="headerlink" title="动态路由 params 传参"></a>动态路由 params 传参</h3><p><code>&lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125; /&gt;</code></p><p>通常我们获取传递过来的参数是使用 props 中的 match.params<br><img src="https://s1.xptou.com/2022/09/25/633015048b9e6.png" alt="match属性"><br>什么情况下 params 才能接收到值呢？<br>在定义该路由的时候，在 路径后面加上 /:id，即将其改写成<strong>动态路由</strong>。<br>此时的路径则为 /detail/1111 /detail/2222 等等<br>此时的 params:{id:5789} ，可以通过 <strong>props.match.params</strong> 拿到参数</p><h3 id="query-传参和-state-传参"><a href="#query-传参和-state-传参" class="headerlink" title="query 传参和 state 传参"></a>query 传参和 state 传参</h3><p>这两种写法是编程式写法，在这两种写法下:/id 这种格式就不用写了，直接通过 history.push({})的格式传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一：query 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5739</span> &#125; &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span>.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br><br><span class="hljs-comment">// 方法二：state 传参</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/detail&quot;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5783</span> &#125; &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span>.<span class="hljs-property">state</span>.<span class="hljs-property">id</span>;<br></code></pre></td></tr></table></figure><h3 id="query-传参的缺点："><a href="#query-传参的缺点：" class="headerlink" title="query 传参的缺点："></a>query 传参的缺点：</h3><p>query 传递的参数，<strong>只有首次进入页面的时候可以获取到</strong>。<br><strong>当页面刷新的时候，location 中也不存在 query 这个属性了，数据已经完全丢失。</strong><br>而使用 state 传参就不会造成页面刷新，参数丢失的问题了。</p><h2 id="三种传参方式的不同："><a href="#三种传参方式的不同：" class="headerlink" title="三种传参方式的不同："></a>三种传参方式的不同：</h2><p><strong>动态路由 params 传参：</strong><br>写法：<code>&lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125; /&gt;</code><br>跳转的页面获取参数：<code>props.match.params</code><br>特点：参数直接作为路由路径在 url 上显现：/detail/1111，页面刷新参数依旧存在。</p><p><strong>query 传参：</strong><br>写法：<code>props.history.push(&#123; pathname: &quot;/detail&quot;, query: &#123; id: 5739 &#125; &#125;);</code><br>跳转的页面获取参数：<code>props.location.query</code><br>特点：参数不会在 url 显示，页面刷新参数就会失效。</p><p><strong>state 传参：</strong><br>写法：<code>props.history.push(&#123; pathname: &quot;/detail&quot;, state: &#123; id: 5739 &#125; &#125;);</code><br>跳转的页面获取参数：<code>props.location.state</code><br>特点：参数不会在 url 显示，页面刷新参数依旧存在。</p><h2 id="补充：location-search"><a href="#补充：location-search" class="headerlink" title="补充：location.search"></a>补充：location.search</h2><p>location.search 是用来获取 url ?后面的参数，且这些参数是以字符串的格式拼接而成的。</p><h4 id="search-获取多个参数"><a href="#search-获取多个参数" class="headerlink" title="search 获取多个参数"></a>search 获取多个参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面跳转</span><br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>?name=张三&amp;age=12`</span>);<br><br><span class="hljs-comment">// 跳转页面接收</span><br>props.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>;<br></code></pre></td></tr></table></figure><p>此时我们可以看到：<br><img src="https://s1.xptou.com/2022/09/25/633023cc19996.png" alt="获取search值"><br><strong>问题:</strong> 路由跳转时, 页面接收的参数打印了两次，发出了两次一模一样的网络请求, 但是当前页刷新时, 仅发出一次请求.</p><p><strong>问题条件说明:</strong> 在跳转路由上带参数, 且参数中包含中文</p><p><strong>问题分析:</strong> 浏览器对中文参数进行转码导致组件加载两次</p><p><strong>解决方案:</strong>在传递参数时, 对参数用 encodeURI 进行转码, 接收参数时用 decodeURI 解码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取props.location.search中的参数值</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getQuery</span> = (<span class="hljs-params">search</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">if</span> (search) &#123;<br>    <span class="hljs-keyword">let</span> params = search.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; params.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> param = params[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>      obj[param[<span class="hljs-number">0</span>]] = <span class="hljs-built_in">decodeURI</span>(param[<span class="hljs-number">1</span>]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;;<br><br><span class="hljs-comment">// 把参数对象转换为search字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getSearch</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    str = <span class="hljs-string">&quot;?&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (obj[i]) &#123;<br>        str = str + i + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURI</span>(obj[i]) + <span class="hljs-string">&quot;&amp;&quot;</span>;<br>      &#125;<br>    &#125;<br>    str = str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, str.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> str;<br>&#125;;<br></code></pre></td></tr></table></figure><p>getSearch 应用场景：可以把 ? 拼接的参数当做一个对象，通过 getSearch 转换成 ?name=a&amp;age=10 的这种格式。当然如果参数不多，直接写成这种格式也没有问题。不过 getSearch 最大的好处是：<strong>提前将参数的中文转义，在跳转的页面上，就只会有一次请求！</strong></p><h4 id="search-传递的参数中文转义"><a href="#search-传递的参数中文转义" class="headerlink" title="search 传递的参数中文转义"></a>search 传递的参数中文转义</h4><p>上一小节我们可以知道，传递的参数有中文会被转义，此时 getQuery 函数就派上用场了。进行转义，并把 search 字符串参数转化为对象格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面跳转</span><br><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;;<br>props.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/detail/<span class="hljs-subst">$&#123;id&#125;</span>`</span> + <span class="hljs-title function_">getSearch</span>(data));<br><br><span class="hljs-comment">// 跳转页面接收</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props, <span class="hljs-title function_">getQuery</span>(props.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>));<br></code></pre></td></tr></table></figure><p>此时的页面打印：<br><img src="https://s1.xptou.com/2022/09/25/63302843f2fdf.png" alt="search参数转为对象"></p><p><strong>使用场景：</strong><br><div class="note info simple"><p>a. 当需要使用 ? 进行参数拼接的情况下，接收页面可以使用 getQuery 函数对参数进行处理，整合成一个对象，便于使用。<br>b. 当使用 ? 拼接的参数中有中文时，可以使用 getSearch 函数提前将中文转义，再使用 getQuery 方法整合成对象的同时，在把转义的中文恢复原样。</p></div></p><h1 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h1><p>这种常用于登录和未登录的状态，登录了可以显示个人信息以及浏览内容，未登录则跳转登录页面，不能浏览网站信息。</p><h2 id="认识路由拦截的基本写法"><a href="#认识路由拦截的基本写法" class="headerlink" title="认识路由拦截的基本写法"></a>认识路由拦截的基本写法</h2><p>我们普通情况下路由是这样写的：<code>&lt;Route path=&quot;/myCenter&quot; component=&#123;MyCenter&#125; /&gt;</code><br>另一种写法：<code>&lt;Route path=&quot;/myCenter&quot; render = ()=&gt; &lt;MyCenter /&gt; /&gt;</code>。这两种写法是等价关系，实现的效果是一样的。<strong>这种写法常用于路由拦截</strong></p><p>我们可以在 render 中编写部分逻辑来显示不同的组件。</p><p>实现极简版登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 是否登录？登录进入个人中心，否则，重定向到登录页面，显示 Login 组件</span><br>&lt;<span class="hljs-title class_">Route</span><br>  path=<span class="hljs-string">&quot;/myCenter&quot;</span><br>  render=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> isLogin ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> /&gt;</span></span>;<br>  &#125;&#125;<br>/&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Login&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h1><h2 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h2><p><BrowserRouter/> ：h5 路由(不带 #)</p><p><HashRouter>：hash 路由(带 #)</p><h2 id="路由重命名"><a href="#路由重命名" class="headerlink" title="路由重命名"></a>路由重命名</h2><p>{HashRouter as Router}<br>使用时，原本的<code>&lt;HashRouter&gt;&lt;/HashRouter&gt;</code> 或者<code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code> 就可以写成 <code>&lt;Router&gt;&lt;/Router&gt;</code></p><p><strong>注意：</strong><br>BrowserRouter 没有 # 路径，但在请求页面的时候，如果向后端页面请求失败，会直接 404，</p><h1 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h1><p>在之前的代码中，我们在个人中心 MyCenter 组件中添加两个点击标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// MyCenter</span><br>&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span>MyCenter 个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      props.history.push(&quot;/shopping&quot;);</span><br><span class="language-xml">    &#125;&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    会员购</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>客服<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// route.js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/myCenter&#x27;</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span>&#123;return true? <span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> /&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span> /&gt;</span>&#125;&#125; /&gt;</span><br></code></pre></td></tr></table></figure><p>按照以上代码的写法，正常情况下，点击 会员购 可以跳转到 shopping 页面，就算没有创建 Shopping 组件，也应该显示 404 页面。<br>但实际情况是报错 。<br><img src="https://s1.xptou.com/2022/09/26/6331c41b5e9c2.png" alt="跳转的错误打印"><br>图中可以看到，props 的打印变成了 {}，为什么？MyCenter 组件明明在 Route 中，正常来说，Route 会把 history 等属性传递给 MyCenter，这是怎么回事呢？</p><span class='p red'>原因：MyCenter 的这种写法，是将组件实例化了，而 一般的写法 component={Home}，这种才是通过 component ，把 Home 组件传给 Route。将组件当做 Route 的子组件了，所以 MyCenter 接收不到 Route 的属性。</span><p>解决方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// react 既然支持 render 写法，那就肯定有提供 history、params、location 这些属性，</span><br><span class="hljs-comment">// 这些属性可以通过回调函数接收，并解构赋值主动传递给 MyCenter 组件，此时就可以在 MyCenter 组件中通过 props 访问到</span><br>&lt;<span class="hljs-title class_">Route</span><br>  path=<span class="hljs-string">&quot;/myCenter&quot;</span><br>  render=&#123;<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCenter</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> /&gt;</span></span>;<br>  &#125;&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><p>这种类似于依赖父组件的 route 属性，通过 props 传值，那么如果子组件内部又嵌套了多层子组件呢？这样传 route 属性是非常麻烦的。</p><p><strong>使用 withRouter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MySonComponent</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onCLick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;props.history.push(&#x27;/detail/&#x27; + item.id)&#125;&#125;&gt;MySonComponent<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WithMySonComponent</span> = <span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">MySonComponent</span>)<br><span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">MySonComponent</span>);<br><span class="hljs-title function_">withRouter</span>(<span class="hljs-title function_">connect</span>(...)(<span class="hljs-title class_">MyComponent</span>))<br></code></pre></td></tr></table></figure><p>如果在组件路由跳转时，通过父子组件传递 route 属性比较麻烦，可以使用 withRouter 将组件进行包裹，组件就可以得到 route 属性。<strong>withRouter 的作用就是给组件给予 route 属性</strong>。</p><h1 id="项目注意"><a href="#项目注意" class="headerlink" title="项目注意"></a>项目注意</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>通常在开发情况下，为了保证安全，后端通常不会让开放接口让前端访问，而前端项目例如在 <a href="http://localhost:3000/">http://localhost:3000/</a> 下运行，只能请求 <a href="http://localhost:3000/">http://localhost:3000/</a> 下的资源及数据，请求其它端口会发生跨域问题。此时我们就需要反向代理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>这是一条很正常的网络请求，但此时控制台报错。<br><img src="https://s1.xptou.com/2022/09/27/6332a8034a0f1.png" alt="react跨域错误"><br>大致意思就是被 CORS 同源策略阻止了。页面在 3000 服务器上，数据在饿了么服务器上。这是浏览器不允许的，有跨域限制。</p><p><strong>在造成跨域情况下，就需要反向代理</strong></p><p>文档参考地址：<a href="https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development">https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development</a></p><p>安装代理插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install http-proxy-middleware --save<br><span class="hljs-meta prompt_">#</span><span class="language-bash">or</span><br>yarn add http-proxy-middleware<br></code></pre></td></tr></table></figure><p>安装完成后，在 src 目录下新建一个 setupProxy.js。<strong>名字一定是 setupProxy</strong></p><p><strong>写法一：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><br><span class="hljs-comment">/* 饿了么接口举例</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/bgs/poi/reverse_geo_coding</span><br><span class="hljs-comment">  https://h5.ele.me/restapi/shopping/v2/foods_page/sift_factors</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/restapii&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me&quot;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 一般设置为 true，这样服务器接收到的就是 https://h5.ele.me 开头的请求，设为 false，服务器收到的请求头就是 http://localhost:3000/ 等本地 host 地址</span><br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 请求.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// 这种写法下，当我们的请求地址中出现 /restapii 时，会在 /restapii 前方拼接上 target 中的地址</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios(&#x27;/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;) 等价于</span><br><span class="hljs-comment">  axios(&#x27;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>此时我们通过反向代理就可以拿到数据了<br><img src="https://s1.xptou.com/2022/09/27/6332b1c0a87cc.png" alt="反向代理成功请求数据"></p><p><strong>写法二：使用 pathWrite 重定向</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me/restapi&quot;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&quot;^/api&quot;</span>: <span class="hljs-string">&quot;&quot;</span> &#125;, <span class="hljs-comment">// 替换为 target 时的替换内容</span><br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 请求.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">// 这种写法下，当我们的请求地址中出现 /api 时，将 /api 本身被重写为 &quot;&quot;， 再拼接上 target 地址 https://h5.ele.me/restapi，而</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios(&#x27;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;) 等价于</span><br><span class="hljs-comment">  axios(&#x27;https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&#x27;)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果上方对 pathRewrite: { “^/api”: “” } 的使用有问题，请看下面这个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// setupProxy.js</span><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http-proxy-middleware&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-title function_">createProxyMiddleware</span>(&#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://h5.ele.me&quot;</span>, <span class="hljs-comment">// 配置转发目标地址（能返回数据的服务器地址）</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 控制服务器接收到的请求头中host字段的值</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&quot;^/api&quot;</span>: <span class="hljs-string">&quot;/restapi&quot;</span> &#125;,<br>    &#125;)<br>  );<br>&#125;;<br><br><span class="hljs-comment">// 页面.js</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">axios</span>(<br>    <span class="hljs-string">&quot;/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20&quot;</span><br>  ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;);<br>&#125;, []);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  axios 请求的地址为：/api/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">  此时代理经历的过程为：</span><br><span class="hljs-comment">  1、遇到 /api 就重写成 /restapi ，此时为：/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">  2、在 /api 前边拼接上 target 地址，而此时 /api 已被重写，那么此时为：https://h5.ele.me/restapi/bgs/poi/search_poi_nearby_alipay?keyword=北京市&amp;offset=0&amp;limit=20</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong>写 pathRewrite 的时候，可以自定义 开头 例如：/api /post /get /a 等等。使用 pathRewrite 时命名自由度更高。<br>但是如果不写 pathRewrite 时，请求的地址就必须要有一个统一的 开头，例如例子中的 /restapi。</p><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><p>因为 React 是单页面应用，所以在引入 css 样式的时候，如果有同名的 css 类名，后者会把前者覆盖掉，造成<strong>样式污染</strong></p><p>如果该 css 的样式只想在某个组件内部生效，需要将 css 命名为 <strong>xxx.module.css</strong>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./css/Films.module.css&quot;</span>;<br><span class="hljs-comment">// 输出的是一个对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;style&quot;</span>, style); <span class="hljs-comment">//style &#123;active: &#x27;use_active__TAu6v&#x27;&#125;</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/films/nowplaying&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&#123;style.active&#125;</span>&gt;</span></span><br><span class="language-xml">      正在热映</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/films/comingsoon&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&#123;style.active&#125;</span>&gt;</span></span><br><span class="language-xml">      即将上映</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这样每个 css 就是自己组件独有的样式。</p><p>如果想使用全局样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 全局作用 */</span><br>:<span class="hljs-title function_">golbal</span>(<span class="hljs-params">.box</span>) &#123;<br>    <span class="hljs-attr">background</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>尽量少使用标签选择器。<br>因为标签选择器不会添加后缀<br>如 ul{}, div{}<br>最好是 .box ul{} .cont div{} 这样的。</p>]]></content>
    
    
    <summary type="html">认识React路由，以及安装、基本使用、重定向等功能。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>useCallback和useMemo的使用指南</title>
    <link href="https://jsq180.github.io/posts/cf797f35.html"/>
    <id>https://jsq180.github.io/posts/cf797f35.html</id>
    <published>2022-09-17T23:15:56.000Z</published>
    <updated>2022-09-25T18:19:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上个章节：认识 Hooks 中，useCallback 和 useMemo 的相似度很高，例子使用较为模糊，故单设一个章节，来记录 useCallback 和 useMemo 的使用和区别。</p><p>文章参考链接:<a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/">https://www.joshwcomeau.com/react/usememo-and-usecallback/</a></p><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p>本篇文章也是详细区分 useCallback 和 useMemo，区分的过程不一定必须了解，所以将最后的总结部分提到了文章开篇。<br><div class="note info simple"><ul><li>useMemo 缓存的结果是回调函数中 return 回来的值，主要用于缓存计算结果的值，应用场景如需要计算的状态</li><li>useCallback 缓存的结果是函数，主要用于缓存函数，应用场景如需要缓存的函数，因为函数式组件每次任何一个 state 发生变化，会触发整个组件更新，一些函数是没有必要更新的，此时就应该缓存起来，提高性能，减少对资源的浪费。</li><li>另外还需要注意的是，<strong>useCallback 应该和 React.memo 配套使用，缺了一个都可能导致性能不升反而下降</strong>。</li></ul></div></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在介绍一下这两个 hooks 的作用之前，我们先来回顾一下 react 中的性能优化。在 hooks 诞生之前，如果组件包含内部 state，我们都是基于 class 的形式来创建组件。当时我们也知道，react 中，性能的优化点在于：<br>1、调用 setState，就会触发组件的重新渲染，无论前后的 state 是否不同<br>2、父组件更新，子组件也会自动的更新</p><p>基于上面的两点，我们通常的解决方案是：<br>1、使用 immutable 进行比较，在不相等的时候调用 setState；（immutable.js 不作为讲解点）<br>2、在 shouldComponentUpdate 中判断前后的 props 和 state，如果没有变化，则返回 false 来阻止更新。</p><p>在 hooks 出来之后，我们能够使用 function 的形式来创建包含内部 state 的组件。<br>但是，使用 function 的形式，失去了上面的 shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。<br>而且，在函数组件中，react 不再区分 mount 和 update 两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此 <strong>useMemo</strong> 和 <strong>useCallback</strong> 就是解决性能问题的杀手锏。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>根据 React 官网示例代码：<br>useMemo：<code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code> 返回一个 memoized 值。<br>useCallback：<code>const memoizedCallback = useCallback(() =&gt; &#123; doSomething(a, b); &#125;, [a, b],);</code> 返回一个 memoized 回调函数。</p><p>useCallback 和 useMemo 的参数跟 useEffect 一致，他们之间最大的区别有是 useEffect 会用于处理副作用，而前两个 hooks 不能。<br>useMemo 和 useCallback 都会在组件第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行；<br>并且这两个 hooks 都返回缓存的值，useMemo 返回<strong>缓存的变量</strong>，useCallback 返回<strong>缓存的函数</strong>。</p><h1 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h1><p>在使用之前，先看一个案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setNumber(e.target.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例比较简单，实现一个计时器，每秒钟都更改 time，实现一个受控的输入框，ok 了！<br>此时的界面结果如图所示：<br><img src="https://s1.xptou.com/2022/09/24/632f053cb9ba4.png" alt="moreWork函数执行结果"><br><span class='p cyan'>由图可以看出：虽然 number 没有变化，但是 moreWork 函数却在每一秒都在打印，同时返回一个恒定不变的值，这就引申出性能问题了。</span><br><span class='p red'>明明 number 没有变化，为什么每次更新 time 还要再把 number 也重新执行一遍？如果类似的函数很多逻辑很复杂，每次 time 更改都会执行这些计算逻辑，会变得很卡，此时性能优化就需要登场了。</span></p><h2 id="useMemo-和-memo-使用"><a href="#useMemo-和-memo-使用" class="headerlink" title="useMemo 和 memo 使用"></a>useMemo 和 memo 使用</h2><p>useMemo 需要接收两个参数：</p><ul><li>a. 第一个参数是函数，函数内部是通常情况下都是进行大量的逻辑计算，并 return 这个计算结果。</li><li>b. 第二个参数就是依赖项。</li><li>c. <code>const result = useMemo(()=&gt;&#123; ...大量的逻辑计算 &#125;,[])</code></li></ul><p>了解 useMemo 的基本使用之后，就可以对 原来的代码进行性能优化了。<br><strong>解决方法一：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-keyword">const</span> moreWork = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;, [number]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setNumber(e.target.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>此时性能优化后的打印：<br><img src="https://s1.xptou.com/2022/09/24/632f0875ddadd.png" alt="使用useMemo后的结果"><br>这种情况下，只有当我们改变输入框的值，即 number 的时候，才会再执行一次 moreWork 函数。</p><p><strong>useMemo 本质上就像一个 缓存，依赖项是缓存失效策略。</strong><br>在这种情况下，我们本质上是在说：“仅在 number 发生变化时重新计算并执行函数”。当组件由于其他原因（例如 time 状态变量更改）重新渲染时，useMemo 忽略该函数并传递缓存的值。</p><p><strong>解决方法二：</strong><br>把 time 抽离出来，将其分为 time 组件和 input 组件，这样就不会影响到 input 组件。<strong>这种策略叫做状态下沉</strong></p><p>如果抽离出来的组件，不得不进行状态提升，此时我们遇到最初的情况，time 的数据每次更改都会使子组件重新渲染，内部函数也重新执行。这时使用第三种方法。<br><strong>解决方法三：</strong><br>使用 memo 将一个组件转变成 缓存函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>); <span class="hljs-comment">// 也可以在 Foo 组件导出的时候直接 export default React.memo(Foo)，这样就不用在别的组件中使用时 memo 了。</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>  <span class="hljs-comment">// 计时器，每秒钟更改 time</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-comment">// 返回 number ，通过打印，便于观察性能</span><br>  <span class="hljs-comment">// const moreWork = useMemo(() =&gt; &#123;</span><br>  <span class="hljs-comment">//     console.log(&#x27;正在执行大量工作&#x27;);</span><br>  <span class="hljs-comment">//     return number</span><br>  <span class="hljs-comment">// &#125;, [number])</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>React.memo 会告诉父组件，Foo 是纯组件函数，当输入和输出相同时，就不要再改变 Foo，使用之前缓存的就好。</p><p><strong>方法一和方法三的区别：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一</span><br><span class="hljs-keyword">const</span> moreWork = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>  <span class="hljs-keyword">return</span> number;<br>&#125;, [number]);<br><br><span class="hljs-comment">// 方法三</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br></code></pre></td></tr></table></figure><p>区别：方法一缓存的是<strong>一个计算函数</strong>，方法三<strong>缓存整个组件</strong><br>memo 是对整个组件的优化，useMemo 是对某个函数甚至某一行代码的优化，两者并无好坏之分，取决于使用场景</p><h2 id="useMemo-保留的引用"><a href="#useMemo-保留的引用" class="headerlink" title="useMemo 保留的引用"></a>useMemo 保留的引用</h2><p>子组件使用引用类型的数据造成 useMemo 失效</p><p>先来看改进的 js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  <span class="hljs-keyword">const</span> [newData, setNewData] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> arr = [newData];<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arr&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码，在<strong>解决方案三</strong>的基础上添加了 newData 参数—&gt;创建 arr 数组，数组内部为 newData—&gt;将 arr 传给 Foo 组件。<br>此时，原本已经优化解决过的代码，又一次出现了最初的问题：<br><img src="https://s1.xptou.com/2022/09/24/632f1455838ab.png" alt="引用下的问题"><br>优化不管用了？为什么？<br><p class='p red'>arr 是引用数据类型，time 每更新一次，触发一次组件的重新加载，此时，虽然 arr 和原来的值没有变化，但其实引用地址已经改变</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNumbers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">const</span> firstResult = <span class="hljs-title function_">getNumbers</span>();<br><span class="hljs-keyword">const</span> secondResult = <span class="hljs-title function_">getNumbers</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstResult === secondResult); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>这种情况下该怎么解决呢？<br>很简单，既然每次更新都会重新创建一个新的 arr，那不让你重新创建不就好了？用 useMemo 把 arr 也缓存下来就 OK 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> [newData];<br>&#125;, [newData]);<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arr&#125;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这样优化就又可以使用了。</p><h1 id="useMemo-总结"><a href="#useMemo-总结" class="headerlink" title="useMemo 总结"></a>useMemo 总结</h1><p>解决了两个问题：</p><ul><li>减少了大量的运算，当依赖的数据不发生变化的时候，就使用缓存的数据，而不去重新进行无意义的大量运算。</li><li>解决引用类型的地址发生变化的问题。</li></ul><h1 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h1><p>简单来说，useCallback 和 useMemo 是完全一样的。<br>区别在于：useMemo 是保持一个 值/数组/对象.. 的不变，而 useCallback 是保持一个 function 函数 的不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect, useCallback, useMemo, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 将 Foo 函数进行 memo 缓存，number 值不变，Foo 组件就不会重新渲染</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurFoo</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Foo</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [time, setTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  <span class="hljs-keyword">const</span> [newData, setNewData] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> arrResult = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> [newData];<br>  &#125;, [newData]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;, [time]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">badFunc</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我每次加载的地址都不一样&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">textAlign:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> &quot;<span class="hljs-attr">100px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time.getSeconds()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PurFoo</span> <span class="hljs-attr">arr</span>=<span class="hljs-string">&#123;arrResult&#125;</span> <span class="hljs-attr">badFunc</span>=<span class="hljs-string">&#123;badFunc&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">&#123; arr, badFunc &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">moreWork</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在执行大量工作&quot;</span>);<br>    <span class="hljs-keyword">return</span> number;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;number&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setNumber(e.target.value);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;moreWork()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，之前的优化叒一次作废了。Foo 组件还是会每秒渲染一次，原因是 badFunc 在每次重新加载的时候生成的 function 函数地址发生了变化，导致 Foo 组件每次都重新渲染。性质和 useMemo 引用基本一样。<br>之前的缓存用的是 useMemo，而 useMemo 缓存的是值，函数怎么缓存呢？此时就需要用到 <strong>useCallback</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 和 useMemo 不一样，useCallback 不需要 return</span><br><span class="hljs-keyword">const</span> badFunc = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我每次加载的地址都不一样&quot;</span>);<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>用 useCallback 将函数包住，例子中没有依赖项，传 []</p><h1 id="什么时候使用这两个-hooks"><a href="#什么时候使用这两个-hooks" class="headerlink" title="什么时候使用这两个 hooks"></a>什么时候使用这两个 hooks</h1><p>我们已经看到了 useMemo useCallback 允许我们跨多个渲染线程化引用，重用复杂的计算或避免破坏纯组件。<strong>问题是：我们应该多久使用一次？</strong></p><p>在我个人看来，将每个对象/数组/函数包装在这些钩子中是浪费时间。<br>在大多数情况下，这些好处可以忽略不计；React 是高度优化的，并且重新渲染通常并不像我们通常认为的那样缓慢或昂贵！</p><p>使用这些钩子的最佳方式是响应问题。<br><strong>如果你发现你的应用程序变得有点迟钝，你可以使用 React Profiler 来寻找缓慢的渲染。在某些情况下，您可以通过重构应用程序来提高性能。在其他情况下，useMemo 和 useCallback 帮助加快速度。</strong></p><h1 id="context-上下文中的-缓存"><a href="#context-上下文中的-缓存" class="headerlink" title="context 上下文中的 缓存"></a>context 上下文中的 缓存</h1><p>当我们通过上下文在应用程序中共享数据时，通常会传递一个大对象作为 value 属性。<br>缓存这个对象通常是个好主意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">AuthContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">AuthProvider</span>(<span class="hljs-params">&#123; user, status, forgotPwLink, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      user,<br>      status,<br>      forgotPwLink,<br>    &#125;;<br>  &#125;, [user, status, forgotPwLink]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AuthContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;memoizedValue&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">AuthContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法，即使父组件发生更改，只要子组件的 useMemo 中依赖不变，子组件就不会重新渲染</p><h1 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h1><ol><li>useMemo 存 memoized 数据， useCallback 存 memoized function definition.</li><li>这两个 hooks 都需要在末尾添加 dependencies, react 用以判断存的数据/function def 是否需要重新计算/定义</li><li>useMemo 甚至可以替代 useCallback, useMemo(() =&gt; fn, [dep]) 等价于 useCallback(fn, [dep])</li><li>PureFoo = react.memo(Foo) 包裹后导出得 PureFoo 是纯组件, 如果纯组件没有 props 输入，则父组件更新不会引起该纯 ​ 子组件 PureFoo 更新，如果纯组件有 props 输入, 且 props 中不仅限于 基本数据类型值。则 props 更新依然会更新 PureFoo( totally make sense, 因为纯函数的输入变化必然引起输出变化), 如果对 输入的 props 在父组件包裹一层 useMemo, 则 props 的 deps 没有变化的情况下，该父组件其它 state 变化 不会引起 PureFoo 的重新渲染</li><li>useMemo 和 useCallback 一定要关注 Eslint 的报错，如果 deps 没有补全 大概率会产生 bug。​</li></ol>]]></content>
    
    
    <summary type="html">针对 useCallback 和 useMemo 的使用进行进一步详解和区分。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
    <category term="React知识补充" scheme="https://jsq180.github.io/tags/React%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-认识React Hooks</title>
    <link href="https://jsq180.github.io/posts/e3a9606a.html"/>
    <id>https://jsq180.github.io/posts/e3a9606a.html</id>
    <published>2022-09-16T21:53:45.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么使用 Hooks？<br>1、高阶组件为了复用性，导致代码层级复杂。<br>2、生命周期的复杂。<br>3、写成 function 组件，无状态组件，因为又需要状态，又改成 class 成本较高。</p><h1 id="useState-保存组件状态"><a href="#useState-保存组件状态" class="headerlink" title="useState(保存组件状态)"></a>useState(保存组件状态)</h1><p>useState 相当于 在 state 中定义变量 和 this.setState({修改当前变量}) 的集合<br><strong><code>const [state, setstate] = useState(initialState)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用方法</span><br>  <span class="hljs-comment">// name 相当于 state 中的变量，setName 相当于 this.setState(&#123;name:...&#125;)</span><br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值1&quot;</span>);<br><br>  <span class="hljs-comment">//可以查看 obj 究竟是什么</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;初始值2&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-comment">//  [&#x27;初始值2&#x27;, ƒ]</span><br><br>  <span class="hljs-keyword">const</span> [age, setAge] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">18</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 通过 setName 改变 name 的值；通过 setAge 改变 age 的值 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;改变值1&quot;);</span><br><span class="language-xml">          setAge(16);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        点击</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> &#123;name&#125;-&#123;age&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useState 是什么？</strong><br><img src="https://s1.imagehub.cc/images/2022/09/16/Snipaste_2022-09-16_22-22-38.png" alt="useState打印结果"><br><div class="note info simple"><p>由上图可知：<br>useState 的打印结果是一个数组，第 0 项是设置的初始值，第一项是 function 函数。<br>所以 <code>[name,setname] = useName(&#39;初始值&#39;)</code>，相当于数组的解构赋值：<code>const name = &quot;初始值&quot;，const setName = function 函数</code></p></div></p><h1 id="useEffect-处理副作用"><a href="#useEffect-处理副作用" class="headerlink" title="useEffect(处理副作用)"></a>useEffect(处理副作用)</h1><p>useEffect(回调函数，依赖的状态)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//effect</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//cleanup</span><br>    &#125;;<br>&#125;, [依赖的状态;空数组,表示不依赖])<br></code></pre></td></tr></table></figure><p>不要对 Dependencies 撒谎, 如果你明明使用了某个变量，却没有申明在依赖中，你等于向 React 撒了谎。<br>后果就是，当依赖的变量改变时，useEffect 也不会再次执行, eslint 会报警告</p><p><strong>useEffect 没有依赖的情况下，可以传空数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-comment">// 不能直接在 function 中进行 axios 请求，会一直请求，造成死循环</span><br><br>  <span class="hljs-comment">// 使用 useEffect，执行一次</span><br>  <span class="hljs-comment">// useEffect 传递两个参数，第一个参数必须是 回调函数，</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/text.json&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-title function_">setList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []); <span class="hljs-comment">// 如果传空数组，该回调函数就仅仅会执行一次</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map((item) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>useEffect 内部有依赖的变量，但没有在第二个参数中传入该依赖的变量：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;APPLE&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 大写转小写</span><br>    <span class="hljs-keyword">let</span> a = name.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-title function_">setName</span>(a);<br>  &#125;, [name]); <span class="hljs-comment">// 第一次执行一次，之后依赖的参数更新，useEffect也会再次执行</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      name-&#123;name&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setName(&quot;BANANER&quot;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/17/63257b7e6faf6.png" alt="useEffect使用变量操作但不依赖"><br>vscode 语法也会进行提示：<br><img src="https://s1.xptou.com/2022/09/17/63257c5aa2caa.png" alt="vscode警告提示"><br>以上警告翻译过来就是：React Hook useEffect 缺少一个依赖项:’name’。包括它或删除依赖数组</p><p><strong>适用场景举例如下：</strong><br>页面的数据，由按钮组件点击下一页，从 id=1 切换到 id=2，id 改变，执行参数 id 相关依赖的 useEffect 获取最新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> id = props.<span class="hljs-property">myid</span>;<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/articles/<span class="hljs-subst">$&#123;id&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">settitle</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>    <span class="hljs-title function_">setcontent</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">content</span>);<br>    <span class="hljs-title function_">setcategory</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">category</span>);<br>  &#125;);<br>&#125;, [id]);<br></code></pre></td></tr></table></figure><p><strong>Hooks 没有生命周期，那么当组件销毁时，内部的计时器，监听器等如何移除？</strong><br>怎么在 useEffect 中销毁 监听和计时器<br>写法：在 useEffect 内部进行 return function(){}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              isCreated: !this.state.isCreated,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          销毁Child组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Child 子组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 注册 resize 监听</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-comment">// 注册 计时器</span><br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件销毁&quot;</span>);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-comment">// 这个 useEffect 如果内部写成 rentun 的格式，则在加载阶段，log不会打印，销毁阶段打印</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// return ()=&gt;&#123;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二个useEffect&quot;</span>);<br>    <span class="hljs-comment">// &#125;</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>useEffect 中销毁组件解除监听：<br><img src="https://s1.xptou.com/2022/09/17/632586b2404ca.png" alt="useEffect中销毁组件解除监听"><br>为什么写成 return function 的格式<br><img src="https://s1.xptou.com/2022/09/17/632589392b470.png" alt="useEffect内部写成回调函数原理"></p><div class="note info modern"><p>综上所述：<br>useEffect 可以模拟 Class 组件的 加载、更新和销毁阶段</p></div><div class="note warning modern"><p>警告：<br>在 useEffect 作为销毁阶段时，依赖项<strong>必须为空数组</strong></p></div><h1 id="useLayoutEffect-同步执行处理副作用-与-useEffect-的区别"><a href="#useLayoutEffect-同步执行处理副作用-与-useEffect-的区别" class="headerlink" title="useLayoutEffect(同步执行处理副作用)与 useEffect 的区别"></a>useLayoutEffect(同步执行处理副作用)与 useEffect 的区别</h1><p><strong>官方建议使用 useEffect</strong><br>两者的执行时机不同：</p><ul><li>useEffect 是会在整个页面渲染完才会调用的代码。</li><li>useLayoutEffect 和原来 componentDidMount &amp; componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。<br>官方建议优先使用 useEffect<br><img src="https://s1.xptou.com/2022/09/17/632596f70dfa9.png" alt="执行时机不同"><div class="note info modern"><p>在实际使用时如果想避免页面抖动（在 useEffect 里修改 DOM 很有可能出现）的话，可以把需要操作 DOM 的代码放在 useLayoutEffect 里。<br>在这里做点 dom 操作，这些 dom 修改会和 react 做出的更改一起被一次性渲染到屏幕上，只有一次回流、重绘的代价。<br>即若要在渲染阶段操作 DOM，建议使用 useLayoutEffect</p></div></li></ul><h1 id="useCallback-记忆函数"><a href="#useCallback-记忆函数" class="headerlink" title="useCallback(记忆函数)"></a>useCallback(记忆函数)</h1><p>在讲什么是 记忆函数之前，先实现一个功能：计数器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">//   useState 本身就属于记忆函数，记住状态</span><br>  <span class="hljs-keyword">var</span> mycount = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(count + 1); //状态改变，整个函数重新执行</span><br><span class="language-xml">          mycount++;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        click</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;--&#123;mycount&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，点击 add，count+1，count 会一直点一直加，但 mycount 一直都是 0，因为 每点击一次，useState 就会把 count 的数值进行记忆保存，下次执行就会+1 之后的数据。所以才称 useState 也是属于记忆函数。<br>而 mycount 没有任何保存的方式，每点击一次，App 函数会从上至下执行一遍。此时，虽然点击之后让 mycount+1，但是由于 App 函数重新执行，同时 mycount 变量无法被保存状态，导致 mycount 又一次被重置为 0，所以 mycount 一直为 0。<br><p class='p red'>如果 App 内部有很多 点击事件，在 点击某个按钮，更改状态之后，App 组件重新从上至下执行，这些 点击事件会再次被注册，在性能方面不好。但是我们又无法阻止，因为 App 组件的状态更改，就是要重新渲染，而由此出现的解决方案，就是 useCallback 函数</p></p><div class="note danger simple"><p>而 useCallback 就是防止因为组件重新渲染，导致方法被重新创建 ，起到缓存作用; 只有第二个参数（依赖项） 变化了，才重新声明一次</p></div><p><strong>那么怎么将 mycount 记忆状态呢？</strong><br>基本写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;, [name]);<br><span class="hljs-comment">//只有name改变后， 这个函数才会重新声明一次，</span><br><span class="hljs-comment">//如果传入空数组， 那么就是第一次创建后就被缓存， 如果name后期改变了,拿到的还是老的name。</span><br><span class="hljs-comment">//如果不传第二个参数，每次都会重新声明一次，拿到的就是最新的name.</span><br></code></pre></td></tr></table></figure><p>useCallback 使用注意事项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 原本的正常写法</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><br>  <span class="hljs-comment">// 进行 useCallback 包裹，后续重新渲染不会被重新注册</span><br>  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 1、如果不写依赖，定义为空数组，那么无论点击多少次，count永远为 10，因为缓存的初始状态就是 0, 0 + 10 一直都是 10</span><br>      <span class="hljs-comment">// 2、如果写了依赖，那么缓存的就是上一次的 count 值</span><br>      <span class="hljs-comment">// 3、如果不想麻烦，就不要写 第二个参数，空数组都不要写，这样 useCallback 自动缓存的就是上一次的最新状态</span><br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>    &#125;,<br>    [count] <span class="hljs-comment">// 如果内部使用了状态，要么写依赖项，要么直接不写第二个参数</span><br>    <span class="hljs-comment">/* 如果函数内部使用了 状态 或者其它的数据而没有进行依赖，传了一个空数组</span><br><span class="hljs-comment">      那么 useCallback 缓存的永远是 初始状态，因为没人告诉它需要缓存的 状态 是什么</span><br><span class="hljs-comment">      跟 useEffect 的第二个参数的作用 基本一样</span><br><span class="hljs-comment">      */</span><br><br>    <span class="hljs-comment">// 这样不写的第二个参数，拿到的依然是最新状态，跟写了 依赖项 的作用是一毛一样的</span><br>    <span class="hljs-comment">/* () =&gt; &#123;</span><br><span class="hljs-comment">      setCount(count + 10);</span><br><span class="hljs-comment">    &#125;, */</span><br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleChange&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useMemo-记忆组件"><a href="#useMemo-记忆组件" class="headerlink" title="useMemo 记忆组件"></a>useMemo 记忆组件</h1><p>useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的（类似于 Vue 中的 computed）<br><code>useCallback(fn,inputs) is equivalent to useMemo(()=&gt;fn,inputs)</code></p><p>写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// useCallback 写法</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>&#125;, [count]);<br><br><span class="hljs-comment">// useMemo</span><br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-title function_">useMemo</span>(<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">10</span>);<br>  &#125;,<br>  [count]<br>);<br><br><span class="hljs-comment">// 以上两个 虽然写法不同，但属于 等于 关系</span><br></code></pre></td></tr></table></figure><div class="note success simple"><p>唯一的区别是：<br>useCallback 不会执行第一个参数函数，而是将它返回给你，<br>而 useMemo 会执行第一个函数并且将函数执行结果返回给你。<br>所以在前面的例子中，可以返回 handleChange 来达到存储函数的目的。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// const [searchVal, setsearchVal] = useState(&#x27;&#x27;)</span><br>  <span class="hljs-keyword">const</span> [videoList, setvideoList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [searchVal, setsearchVal] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [searchList, setsearchList] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res.data.watching);</span><br>      <span class="hljs-title function_">setvideoList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>      <span class="hljs-title function_">setsearchList</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">searchIpt</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setsearchVal</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-comment">// searchTitle(e.target.value)</span><br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 正常思路：</span><br><span class="hljs-comment">   * 1、定义一个搜索结果变量 searchList，搜索时，拷贝一份完整的 videoList</span><br><span class="hljs-comment">   * 2、根据搜索内容 searchVal ，检索出符合条件的数据:[.....]</span><br><span class="hljs-comment">   * 3、将数据赋值给 搜索结果数组 searchList，并且，在页面渲染时，就需要将 searchList 赋值：res.data.watching，map循环的也是 searchList</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 普通思路写法：</span><br>  <span class="hljs-comment">/*   const searchTitle = (searchVal) =&gt; &#123;</span><br><span class="hljs-comment">    // 搜索结果</span><br><span class="hljs-comment">    let searchList = videoList.filter((item) =&gt; &#123;</span><br><span class="hljs-comment">      return item.title.includes(searchVal.toUpperCase()) || item.title.includes(searchVal.toLowerCase())</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">    // 赋值</span><br><span class="hljs-comment">    setsearchList(searchList)</span><br><span class="hljs-comment">    console.log(searchList);</span><br><span class="hljs-comment">  &#125; */</span><br><br>  <span class="hljs-comment">// 返回的就是一个数组，当搜索内容（依赖）变化的时候，直接执行该 函数</span><br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;searchIpt&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入搜索关键词&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>动漫列表<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;searchTitle /* searchList */</span><br><span class="language-xml">        .map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useCallback-和-useMemo-的使用区别"><a href="#useCallback-和-useMemo-的使用区别" class="headerlink" title="useCallback 和 useMemo 的使用区别"></a>useCallback 和 useMemo 的使用区别</h1><p>单独开一篇文章：<a href="/posts/cf797f35.html" title="useCallback和useMemo的使用指南">useCallback和useMemo的使用指南</a></p><h1 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h1><p>useRef 和 React.createRef() 几乎是没什么区别的，连创建的对象都是一样的。唯一的区别就是 定义时的写法不同.<br>useRef：<code>const myRef = useRef(initialValue); 默认为null</code>；createRef：<code>const myRef = React.createRef();</code><br>同时 useRef 也和 useState 一样，具有保存变量的功能，即记忆函数。<br>例如：<code>let count = useRef(0)</code><br>案例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useRef, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [count, setcount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> myRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>  <span class="hljs-comment">// 和 useState 相似效果，不过访问方式稍微不同</span><br>  <span class="hljs-keyword">let</span> mycount = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此时可以打印出一个 ref 对象，可以通过 myRef.current 拿到 DOM元素输入框</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myRef); <span class="hljs-comment">// &#123;current: input&#125;</span><br>    <span class="hljs-comment">// 通过 mycount.current 可以访问到设置的值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mycount); <span class="hljs-comment">// &#123;current: 0&#125;</span><br>  &#125;, []);<br><br>  <span class="hljs-comment">// 添加按钮</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> addVal = myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">let</span> newList = [...list];<br>    newList.<span class="hljs-title function_">push</span>(addVal);<br>    <span class="hljs-comment">// 输入框的值给list列表进行渲染</span><br>    <span class="hljs-title function_">setList</span>(newList);<br>    <span class="hljs-comment">// 重置输入框的值</span><br>    myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;<br>  &#125;;<br><br>  <span class="hljs-comment">// 删除按钮</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDel</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>    <span class="hljs-comment">// console.log(index);</span><br>    <span class="hljs-keyword">let</span> newList = [...list];<br>    <span class="hljs-comment">// 删除点击项</span><br>    newList.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">setList</span>(newList);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;myRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span>添加数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setcount(count + 1);</span><br><span class="language-xml">          // 这里不能单独使用 mycount.current++ ，因为只有搭配 useState 等数据更改时，ref才能执行，内有状态更改，React监听不到，不会更新</span><br><span class="language-xml">          // 搭配 secount 使用的主要目的是：为了证明 useRef 也可以保存变量值，不会和普通的定义变量一样，重新渲染就被重置，useRef 也相当于一个记忆函数，可以保存数据</span><br><span class="language-xml">          mycount.current++;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        +1</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;count&#125;---&#123;mycount.current&#125;</span><br><span class="language-xml">      &#123;list.map((item, index) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;item&#125;---</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              handleDel(index);</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            删除数据</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h1><p>在 说明使用 useContext 之前，请先熟悉 context 状态树传参 的写法，这会使你在了解使用这个 hooks 时更加通俗易懂：<a href="/posts/1515f762.html" title="React进阶篇-组件通信">React进阶篇-组件通信</a><br><code>const context = useContext(GlobalContext)</code>打印，其中 GlobalContext 为 React.createContext()<br><img src="https://s1.xptou.com/2022/09/19/6328705163adb.png" alt="useContext(GlobalContext)的值"><br>由上图可知：context 的打印结果，就是 供应商 Provider 中的 value 值，这使得我们可以直接使用这些数据，而不必再使用 Consumer 那种复杂的写法。<br>案例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 第一步，定义一个 全局对象：GlobalContext</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [des, setDes] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 第二步，GlobalContext.Provider ，将父组件改写成 供应商</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">call:</span> &quot;<span class="hljs-attr">打电话</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">sms:</span> &quot;<span class="hljs-attr">发短信</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">des:</span> <span class="hljs-attr">des</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">changeDes:</span> (<span class="hljs-attr">des</span>) =&gt;</span> &#123;</span><br><span class="language-xml">          // 第五步：接收 Child1 传递过来的内容详情，转化为自身的数据，并将该数据广播</span><br><span class="language-xml">          console.log(des);</span><br><span class="language-xml">          setDes(des);</span><br><span class="language-xml">        &#125;,</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 第三步，在子组件中使用 useContext 定义</span><br>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">const</span> [list, setlist] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-comment">// 初始化请求列表数据</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res);</span><br>      <span class="hljs-title function_">setlist</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">50</span>%&quot; &#125;&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                // 第四步，向父组件传当前点击项的值</span><br><span class="language-xml">                context.changeDes(item.des);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              查看详情</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      动漫详情：&#123;context.des&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info simple"><p>让子组件使用 useContext 而不使用 <code>&lt;GlobalContext.Consumer&gt;&lt;/GlobalContext.Consumer&gt;</code> 的原因是：</p><ul><li>GlobalContext.Consumer 的写法复杂，不美观，写法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Consumer</span>&gt;<br>  &#123;<span class="hljs-function">(<span class="hljs-params">context</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;&#125;<br>&lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Consumer</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>而使用 useContext，写法非常简便，写法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>两者的写法复杂度相差很大，但效果都一样，所以在 hooks 中更偏向使用 useContext</p></div><h1 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h1><p>在了解 useReducer 之前，可以先看两张图：<br><img src="https://s1.xptou.com/2022/09/19/63287a861ba23.png" alt="普通的数据传输"><br>普通的数据传输方式，不管是 中间人模式，context 状态树，还是父子通信的方式，都不可避免的需要父组件担负起数据传输的责任，而父组件中既需要处理自身内部的 state 和 方法，也要负责 子组件传递的数据等，会造成父组件的代码过于臃肿，不易于维护。<br><img src="https://s1.xptou.com/2022/09/19/63287c9452594.png" alt="状态管理"><br>使用状态管理，将原本在父组件中处理的数据抽离出来，单独作为一个状态管理模块，是结构更加清晰，父组件也可以专心于自身内部的数据。<br>以上就是使用 useReducer 的目的，也是该 hooks 的作用。</p><p>useReducer 写法：<code>const [state, dispatch] = useReducer(reducer, initialArg, init);</code></p><ul><li>第一个参数：reducer 函数。</li><li>第二个参数：初始化的 state。返回值为最新的 state 和 dispatch 函数（用来触发 reducer 函数，计算对应的 state）。</li></ul><h5 id="基础写法认识："><a href="#基础写法认识：" class="headerlink" title="基础写法认识："></a>基础写法认识：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;;<br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">// list:[] ......</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;, [data]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>老规矩，先来看看 useReducer 的打印结果：<br><img src="https://s1.xptou.com/2022/09/20/6329be7f74bfd.png" alt="useReducer的打印结果"><br>由此可见，useReducer 也是一个数组，第一个值就是 useReducer 的第二个参数 initialState，用来定义变量的地方。第二个是 function 函数。</p><h5 id="dispatch-使用："><a href="#dispatch-使用：" class="headerlink" title="dispatch 使用："></a>dispatch 使用：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 减 按钮</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 使用 dispatch，内部</span><br>  <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用 dispatch，<strong>内部的 type 是必填项</strong><br>当点击 减号按钮时，会触发 reducer，此时控制台会有打印 “reducer”</p><h5 id="reducer-函数内部参数："><a href="#reducer-函数内部参数：" class="headerlink" title="reducer 函数内部参数："></a>reducer 函数内部参数：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br>&#125;;<br><br><span class="hljs-comment">// 减 按钮</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 使用 dispatch</span><br>  <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>reducer 函数内部是可以接收两个参数的。第一个参数 prevState：老的状态，action：dispatch 传递过来的 对象。<br>点击 减号按钮，执行 dispatch，调用 reducer 函数，其参数打印结果如下：<br><img src="https://s1.xptou.com/2022/09/20/6329c2d20398c.png" alt="reducer执行并接收的两个参数结果"></p><h5 id="使用-reducer-函数的参数：prevState-和-action"><a href="#使用-reducer-函数的参数：prevState-和-action" class="headerlink" title="使用 reducer 函数的参数：prevState 和 action"></a>使用 reducer 函数的参数：prevState 和 action</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// prevState：老的状态   action：dispatch 内部传递的 对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br><br>  <span class="hljs-comment">// 先对 老状态 进行复制，switch匹配操作完毕后，返回新状态</span><br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br><br>  <span class="hljs-comment">// action.type 就是 dispatch 传递的对象的 type，</span><br>  <span class="hljs-comment">// 可根据 type 不同，执行不同的状态修改</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countMinus&quot;</span>:<br>      newState.<span class="hljs-property">count</span>--;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countAdd&quot;</span>:<br>      newState.<span class="hljs-property">count</span>++;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>: <span class="hljs-comment">// 当以上 type 都不匹配，即写错的情况下，返回老状态</span><br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>既然 action 为点击项传递的 对象，根据 action.type，通过 switch/if 等方式匹配（推荐使用 switch），可以知道当前点击的是什么，需要执行什么样的操作。就可以在 case 中改写状态，并把 最新状态 return。</p><h5 id="完整使用代码"><a href="#完整使用代码" class="headerlink" title="完整使用代码"></a>完整使用代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// prevState：老的状态   action：dispatch 内部传递的 对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reducer&quot;</span>, prevState, action);<br><br>  <span class="hljs-comment">// 先对 老状态进行复制，switch匹配操作完毕后，返回新状态</span><br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br><br>  <span class="hljs-comment">// action.type 就是 dispatch 传递的对象的 type，</span><br>  <span class="hljs-comment">// 可根据 type 不同，执行不同的状态修改</span><br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countMinus&quot;</span>:<br>      newState.<span class="hljs-property">count</span>--;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countAdd&quot;</span>:<br>      newState.<span class="hljs-property">count</span>++;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>: <span class="hljs-comment">// 当以上 type 都不匹配，即写错的情况下，返回老状态</span><br>      <span class="hljs-keyword">return</span> prevState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-comment">// list:[] ......</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br><br>  <span class="hljs-comment">// 减</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchMinus</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 使用 dispatch</span><br>    <span class="hljs-comment">// 当调用 dispatch 时，会触发 reducer</span><br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countMinus&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>    &#125;);<br>  &#125;;<br>  <span class="hljs-comment">// 加</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatchAdd</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;countAdd&quot;</span>, <span class="hljs-comment">// 必须写 type</span><br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;dispatchMinus&#125;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;state.count&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;dispatchAdd&#125;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>纵观完整代码，可以发现：App 组件没有自己的状态，只有外部状态影响 App</p><h5 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> initalState = &#123;<br>  <span class="hljs-attr">A</span>: <span class="hljs-string">&quot;初始化的A&quot;</span>,<br>  <span class="hljs-attr">B</span>: <span class="hljs-string">&quot;初始化的B&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changeA&quot;</span>:<br>      newState.<span class="hljs-property">A</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changeB&quot;</span>:<br>      newState.<span class="hljs-property">B</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Child 组件要使用 dispatch，但是不需要每个 Child 组件都定义一个 useReducer，因为 useReducer 每次返回的都是一个全新的对象，组件之间互不影响</span><br>  <span class="hljs-comment">// useReducer 不能在外部调用，只能在 hooks函数中使用</span><br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initalState);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 使用 useReducer 的话，就不用在父组件中传递各组件的方法和状态，只需要传递一个  state 和 dispatch，供 每个 Child 组件使用</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">state</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">dispatch</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child3</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// useContext(GlobalContext) 得到的就是 provider 的 value，解构出来</span><br>  <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">changA</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changeA&quot;</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;dispatch改变的A&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeB</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changeB&quot;</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;dispatch改变的B&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changA&#125;</span>&gt;</span>改变A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changeB&#125;</span>&gt;</span>改变B<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcoral</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      state.A：&#123;state.A&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightcyan</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">15</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      state.B：&#123;state.B&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例中，我们可见：不管是 App 组件，还是 Child 组件，他们的组件内部都没有所谓的 state，就是把 状态单独抽离出来，进行操作。这使得视图逻辑更加简洁明了（高耦合，低内聚）</p><h5 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h5><p>左侧组件为动漫名称列表展示，点击详情，可在右侧组件内部显示点击项的介绍详情。</p><p>对比可参考 <strong>useContext</strong> 示例代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useReducer, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">des</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">watchList</span>: [],<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;initList&quot;</span>:<br>      newState.<span class="hljs-property">watchList</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;setDes&quot;</span>:<br>      newState.<span class="hljs-property">des</span> = action.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">return</span> newState;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">state</span>, <span class="hljs-attr">dispatch</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-around</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; state, dispatch &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><br>  <span class="hljs-comment">// 初始化请求列表数据</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;text.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;initList&quot;</span>,<br>        <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">watchDes</span> = (<span class="hljs-params">des</span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setDes&quot;</span>,<br>      <span class="hljs-attr">value</span>: des,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;state.watchList.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">50</span>%&quot; &#125;&#125;&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                watchDes(item.des);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              查看详情</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; state &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &quot;<span class="hljs-attr">100</span>%&quot;, <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      动漫详情：&#123;state.des&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义-hooks"><a href="#自定义-hooks" class="headerlink" title="自定义 hooks"></a>自定义 hooks</h1><p><strong>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中</strong><br>必须以“use”开头吗？<br>必须如此。这个约定非常重要。不遵循的话，由于无法判断某个函数是否包含对其内部 Hook 的调用，React 将无法自动检查你的 Hook 是否违反了 Hook 的规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 这是正常定义在 hooks 内部的方法</span><br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br><br>  <span class="hljs-comment">// 渲染部分</span><br>  &#123;<br>    searchTitle.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    ));<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/********如果该方法在很多地方使用，可能不是一个组件，此时可以将这个方法抽离出来，自定义hooks**********/</span><br><span class="hljs-comment">// 改写成 hooks 格式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useFilter</span>(<span class="hljs-params">videoList, searchVal</span>) &#123;<br>  <span class="hljs-keyword">const</span> searchTitle = <span class="hljs-title function_">useMemo</span>(<br>    <span class="hljs-function">() =&gt;</span><br>      videoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toUpperCase</span>()) ||<br>          item.<span class="hljs-property">title</span>.<span class="hljs-title function_">includes</span>(searchVal.<span class="hljs-title function_">toLowerCase</span>())<br>        );<br>      &#125;),<br>    [searchVal, videoList]<br>  );<br>  <span class="hljs-keyword">return</span> searchTitle;<br>&#125;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用 自定义 hooks</span><br>  <span class="hljs-keyword">let</span> searchTitle = <span class="hljs-title function_">useFilter</span>(videoList, searchVal);<br><br>  <span class="hljs-comment">// 渲染部分</span><br>  &#123;<br>    searchTitle.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;item.title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    ));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义 hooks 可以理解为函数封装的进阶版。使用起来也大致差不多。更多的意义是多组件使用，且在函数外部定义，将逻辑抽离出来，视图层面的代码更加简洁。</p><h1 id="useContext-useReducer-和-Context-状态树"><a href="#useContext-useReducer-和-Context-状态树" class="headerlink" title="useContext useReducer 和 Context 状态树"></a>useContext useReducer 和 Context 状态树</h1><p>useContext useReducer 为 hooks 中使用的 ，而 Context 状态树是 class 组件中使用的。<br>因为三者的功能大致差不多，所以做一个总结，来看看使用区别和哪个使用更方便。<br><strong>Context 状态树</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a. 先定义全局context对象</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">GlobalContext</span><br><br><br><span class="hljs-comment">// b. 根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br><span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br>&lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span> value=&#123;&#123;<br>    <span class="hljs-attr">call</span>: <span class="hljs-string">&quot;打电话&quot;</span>,<br>    <span class="hljs-attr">sms</span>: <span class="hljs-string">&quot;发短信&quot;</span>,<br>    <span class="hljs-attr">des</span>: des,  <span class="hljs-comment">// des 为 父组件 将子组件的值转化为自身的，在派发给其它子组件</span><br>    <span class="hljs-attr">changeDes</span>: <span class="hljs-function">(<span class="hljs-params">des</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setDes</span>(des); <span class="hljs-comment">// 子组件通过 子传父，将值传递给父组件</span><br>    &#125;,<br>  &#125;&#125;<br>&gt;<br>&lt;之前的根组件&gt;&lt;/之前的根组件&gt;<br>&lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span>&gt;<br><br><br><span class="hljs-comment">// c. 任意组件引入GlobalContext并调用context，使用GlobalContext.Consumer（消费者）</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">&#123; context =&gt; &#123;</span><br><span class="language-xml">  this.myshow = context.show; //可以在当前组件任意函数触发</span><br><span class="language-xml">  this.myhide = context.hide;//可以在当前组件任意函数触发</span><br><span class="language-xml">  return (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;context.call&#125;-&#123;context.sms&#125;-&#123;context.des&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Consumer</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>useContext</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// a. 先定义全局context对象</span><br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">GlobalContext</span><br><br><br><br>  <span class="hljs-comment">// b. 根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br>  <span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br>  &lt;<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span> value=&#123;&#123;<br>      <span class="hljs-attr">call</span>: <span class="hljs-string">&quot;打电话&quot;</span>,<br>      <span class="hljs-attr">sms</span>: <span class="hljs-string">&quot;发短信&quot;</span>,<br>      <span class="hljs-attr">des</span>: des,  <span class="hljs-comment">// des 为 父组件 将子组件的值转化为自身的，在派发给其它子组件</span><br>      <span class="hljs-attr">changeDes</span>: <span class="hljs-function">(<span class="hljs-params">des</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">setDes</span>(des); <span class="hljs-comment">// 子组件通过 子传父，将值传递给父组件</span><br>      &#125;,<br>    &#125;&#125;<br>  &gt;<br>  &lt;之前的根组件&gt;&lt;/之前的根组件&gt;<br>  &lt;/<span class="hljs-title class_">GlobalContext</span>.<span class="hljs-property">Provider</span>&gt;<br><span class="hljs-comment">/*********在这之前，useContext 和 Context 状态数没有一点区别，优势是：子组件接收参数更加方便**************/</span><br><br><br><br><span class="hljs-comment">// c. 任意组件使用 useContext（消费者）</span><br><span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;context.call&#125;-&#123;context.sms&#125;-&#123;context.des&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>)<br><br></code></pre></td></tr></table></figure><p><strong>useReducer</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a. 先定义全局context对象,初始化数据：initalState，reducer函数</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GlobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// 注意此时的reduecer 返回值是一个对象 &#123;isShow:false,list:[]&#125;</span><br><br><span class="hljs-keyword">const</span> initalState = &#123;<br>  <span class="hljs-attr">initdata</span>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">prevState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newState = &#123; ...prevState &#125;;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#x27;</span>:<br>      <span class="hljs-keyword">return</span> newState;<br><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> newState;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// b.根组件引入GlobalContext，并使用GlobalContext.Provider（生产者）</span><br><span class="hljs-comment">//重新包装根组件 class App &#123;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GlobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">state</span>,  // <span class="hljs-attr">只需派发</span> <span class="hljs-attr">state</span> <span class="hljs-attr">和</span> <span class="hljs-attr">dispatch</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">dispatch</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">之前的根组件</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">之前的根组件</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">GlobalContext.Provider</span>&gt;</span></span>;<br><br><span class="hljs-comment">// c. 任意组件使用 useContext（消费者）</span><br><span class="hljs-keyword">const</span> &#123;state,dispatch&#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">GlobalContext</span>);<br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:&quot;click&quot;&#125;)&#125;&#125;&gt;&#123;state.initdata&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>)<br></code></pre></td></tr></table></figure><p>Context 状态树的写法过于复杂，自然不必多说。<br>useContext 和 useReducer 之间的区别：</p><ul><li>useContext 在写法上，还是利用了 子传父，父在向下级派发，这使得 需要子传父的自定义事件和派发的数据都需要父组件定义，如果数据传输过多，就会导致父组件臃肿不堪，不仅要处理各个组件之间的数据传输，还要处理自身的数据，这对于视图来说，是不美观的。</li><li>useReducer 将状态提升至外部进行统一管理，这使得 不管是父组件还是子组件，内部除了自身自身必须的数据，其它数据都交由状态管理来维护，视图层面的代码会变得很简洁。</li></ul><span class='p red'>useReducer 通常情况下都是搭配 useContext 使用的</span>]]></content>
    
    
    <summary type="html">对React Hooks即函数组件进行基础的认识和使用。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期简括及简单性能优化</title>
    <link href="https://jsq180.github.io/posts/f56cbe58.html"/>
    <id>https://jsq180.github.io/posts/f56cbe58.html</id>
    <published>2022-09-15T22:16:19.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>结合之前文章的生命周期，将父子组件挂载即更新时，生命周期的执行顺序进行了简单的罗列，并简述 React 中基础的性能优化</p><h1 id="一、生命周期概括"><a href="#一、生命周期概括" class="headerlink" title="一、生命周期概括"></a>一、生命周期概括</h1><h2 id="1、老生命周期"><a href="#1、老生命周期" class="headerlink" title="1、老生命周期"></a>1、老生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextProps</span>) &#123;<br>    <span class="hljs-comment">// 已过时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillReceiveProps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233a7a2254b.png" alt="父子组件老生命周期打印顺序"></p><h2 id="2、新生命周期"><a href="#2、新生命周期" class="headerlink" title="2、新生命周期"></a>2、新生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>    <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-comment">// 返回 true：更新     返回 false：阻止更新</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-comment">// getSnapshotBeforeUpdate 必须 return</span><br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>      <span class="hljs-attr">fName</span>: <span class="hljs-string">&quot;父组件的fName&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          App--data：&#123;this.state.data&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.unMount&#125;</span>&gt;</span>点击销毁子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isDelete ? null : <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fName</span>=<span class="hljs-string">&#123;this.state.fName&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFormPorps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getDerivedStateFormPorps&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---shouldComponentUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child---componentWillUnmount--子组件即将销毁&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child-render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          Child--props：&#123;this.props.fName&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/63233cfe7a86e.png" alt="父子组件新生命周期打印顺序"></p><div class="note warning simple"><ul><li>componentWillReceiveProps 不能和 static getDerivedStateFormPorps 一起使用</li><li>getSnapshotBeforeUpdate 不能和 shouldComponentUpdate 一起使用</li></ul></div><h1 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h1><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><div class="note info simple"><p>控制组件自身或者子组件是否需要更新，尤其在子组件非常多的情况下， 需要进行优化。</p></div><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><div class="note info simple"><p>PureComponent 会帮你 比较新 props 跟 旧的 props， 新的 state 和老的 state（值相等,或者对象含有相同的属性、且属性值相等 ），决定 shouldcomponentUpdate 返回 true 或者 false， 从而决定要不要呼叫 render function。</p></div><p>注意：<br><div class="note warning modern"><p>如果你的 state 或 props 『永远都会变』，那 PureComponent 并不会比较快，因为 shallowEqual 也需要花时间。</p></div></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;state的初始值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">/*   shouldComponentUpdate(nextprops, nextState) &#123;</span><br><span class="hljs-comment">    // JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br><span class="hljs-comment">    //   老状态!==新状态，更新</span><br><span class="hljs-comment">    if (this.state.myname !== nextState.myname) return true;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    if (this.state.myname === nextState.myname) return false;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    // 应该更新/阻止更新</span><br><span class="hljs-comment">  &#125; */</span><br><br>  changeData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;点击更改的数据&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  unMount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isDelete</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span>data：&#123;this.state.data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeData&#125;</span>&gt;</span>点击更改data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对之前生命周期进行一个简要的概括，并列举React的简单性能优化。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-React生命周期</title>
    <link href="https://jsq180.github.io/posts/1431380e.html"/>
    <id>https://jsq180.github.io/posts/1431380e.html</id>
    <published>2022-09-12T17:15:24.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期，顾名思义，和人从出生到死亡的过程是相似的。即作为一个页面，从页面加载到执行操作再到销毁的过程。</p><h1 id="老生命周期"><a href="#老生命周期" class="headerlink" title="老生命周期"></a>老生命周期</h1><h2 id="一、初始化阶段"><a href="#一、初始化阶段" class="headerlink" title="一、初始化阶段"></a>一、初始化阶段</h2><ul><li>componentWillMount：主要用于数据初始化，（已移除，不推荐使用）<ul><li>是 render 之前最后一次修改状态的机会</li></ul></li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出</li></ul></li><li>componentDidMount：成功 render 并渲染完成真实 DOM 后触发。<ul><li>多用于数据请求 axios。</li><li>函数的调用</li><li>基于创建完成的 DOM 进行初始化（比如设置 span 标签的 color）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;初始的佩奇&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">//   初始化数据的作用</span><br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillMount，DOM即将挂载，初始化数据，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;修改的野猪&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">//   数据请求、订阅发布函数的调用、setInterval、基于创建完DOM进行初始化</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// axios(&#123;.....&#125;)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidMount，DOM已经渲染完毕，获取 #myname DOM元素：&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>)<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render，正在挂载渲染...&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面初始化过程打印如下：<br><img src="https://s1.xptou.com/2022/09/12/631f04bd85560.png" alt="页面初始化阶段加载过程"><br><div class="note danger modern"><p>此时控制台有警告，大致意思就是 使用 componentWillMount 可能会产生一些问题，推荐使用 componentDidMount 或者在 constructor 中执行这些逻辑。<br>原因是 ：<br>componentWillMount 是 React16（准确是 16.2） 版本之前的，而目前已是 React17（本人用的 17，此时 18 已在 22 年 3 月 29 日正式发布）。<br>在 16.2 版本之后，推出了新的生命周期，React 在 Diff 算法上出现了一定程度的更改，更加优化性能，提出了 Fiber 技术。<br>技术原因：</p><ul><li>传统的 React 在创建状态、创建新的 VDOM 时，会进行对比旧的 VDOM，这个过程是同步的，数据量小没有影响，数据量过于庞大，就会一直在进行 VDOM 对比，可能会使浏览器进入假死状态，而 React 的 Fiber 技术就是来优化这种情况下的 Diff 算法。</li><li>Fiber 把组件创建 DOM、组件渲染拆分成无数个小的 分片 任务执行，这时，如果有优先级较高的任务，就先执行优先级较高的任务。如果正在执行优先级较低的任务时，优先级较高的任务插入，就打断优先级较低的任务，执行优先级较高的任务。</li><li>在高优先级任务执行时，打断低优先级任务。 如在 WillMount 中，正去找哪些节点将要去挂载到页面中，此时 高优先级任务 ，如 render、DidMount 等，就会打断 WillMount 的寻找过程。打断之后不会保存，只会在高优先级任务执行完毕之后再重新寻找。这样就可能造成<strong>诸如 WillMount 此类的生命周期多次触发</strong>。</li><li>在以上出现的问题基础上，16.2 之后采用异步渲染，推出了新的生命周期。<br>解决方法：根据警告提示，将已过时的生命周期加上 UNSAFE_ 。如 UNSAFE_componentWillMount。</li></ul></div></p><h2 id="二、运行中阶段（更新阶段）"><a href="#二、运行中阶段（更新阶段）" class="headerlink" title="二、运行中阶段（更新阶段）"></a>二、运行中阶段（更新阶段）</h2><ul><li>componentWillReceiveProps：父组件修改属性触发。（已移除，不推荐使用）<ul><li>父组件中的属性作为 props 传递给子组件，此时修改 props 中的某个属性，会触发 子组件中的该生命周期</li></ul></li><li>shouldComponentUpdate：返回 false 会阻止 render 调用，阻止更新。</li><li>compoentWillUpdate：数据将要更新还未更新时。（已移除，不推荐使用）</li><li>render：DOM 渲染。<ul><li>在此阶段不允许修改状态和 DOM 输出。</li></ul></li><li>componentDidUpdate：可以修改 DOM。</li></ul><h3 id="1、componentWillUpdate、render、componentDidMount"><a href="#1、componentWillUpdate、render、componentDidMount" class="headerlink" title="1、componentWillUpdate、render、componentDidMount"></a>1、componentWillUpdate、render、componentDidMount</h3><p><strong>componentWillUpdate：</strong></p><ul><li>在此生命周期内部访问到的属性和 DOM 元素都是旧的，因为此时处于将要更新，还未更新的状态，一切数据都是旧的。</li><li>componentWillUpdate(nextProps,nextState)，该生命周期可以接收两个参数。nextProps：即将更新的 props，nextState：即将更新的 state。<br><strong>componentDidUpdate：</strong></li><li>此时的数据和 DOM 都已更新完毕，推荐在此生命周期内获取/操作 DOM。</li><li>componentDidUpdate(prevProps,prevState)，该生命周期可以接收两个参数。prevProps：更新前的旧 props，prevState：更新钱的旧 state。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>    <span class="hljs-attr">filmList</span>: [],<br>  &#125;;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 加载获取数据</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">filmList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">watching</span>,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 在 DidMount 中，filmList 由 [] 变成有数据，所以在初始化阶段就会触发 WillUpdate、DidUpdate</span><br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentWillUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      nextProps,<br>      nextState<br>    );<br>  &#125;<br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;componentDidUpdate&quot;</span>,<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myname&quot;</span>).<span class="hljs-property">innerHTML</span>,<br>      prevProps,<br>      prevState<br>    );<br><br>    <span class="hljs-comment">// 在内部可以做一些判断，比如：</span><br>    <span class="hljs-keyword">if</span> (prevState.<span class="hljs-property">filmList</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 创建 DOM，否则的话旧不需要再次创建，因为该 DOM 已经存在</span><br>    &#125;<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myname&quot;</span>&gt;</span>&#123;this.state.myname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.filmList.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如图所示<br><img src="https://s1.xptou.com/2022/09/13/632089629d744.png" alt="WillUpdate和DidUpdate执行"><br><div class="tip error"><p>切忌在 WillUpdate 或 DidUpdate 等更新阶段的生命周期内部更改数据，会造成死循环，更新阶段触发更新就会再次执行该生命周期</p></div></p><h3 id="2、shouldComponentUpdate"><a href="#2、shouldComponentUpdate" class="headerlink" title="2、shouldComponentUpdate"></a>2、shouldComponentUpdate</h3><p>该生命周期是判断 是否触发更新阶段，返回 false 不更新，返回 true 更新。<br>shouldComponentUpdate(nextProps, nextState)，接收两个参数，和 WillUpdate 类似。nextProps：即将更新的 props，nextState：即将更新的 state。<br>在 shouldComponentUpdate 内部访问的数据依旧是原来的，因为该阶段是更新阶段首个触发的，用于判断是否进行后续的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;楚子航&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// scu</span><br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// JSON.stringify(this.state)!==JSON.stringify(nextState)    //转化为字符串对比</span><br>    <span class="hljs-comment">//   老状态!==新状态，更新</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> !== nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">myname</span> === nextState.<span class="hljs-property">myname</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 应该更新/阻止更新</span><br>  &#125;<br>  <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUpdate&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//   会执行多次，解决办法：加判断</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevprops, prevState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>);<br>  &#125;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正常情况下，每次点击都会触发更新，因为 React 会把 状态做成新的 VDOM，和旧 VDOM 对比，并走完整个更新阶段。</span><br><span class="hljs-comment">     * 但这种情况下，如果数据没有发生改变，就会浪费这一流程，才有了 shouldComponentUpdate</span><br><span class="hljs-comment">     * shouldComponentUpdate 最主要的作用就是 对性能上的部分优化，适当阻止一些无意义的更新</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.myname&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、componentWillReceiveProps"><a href="#3、componentWillReceiveProps" class="headerlink" title="3、componentWillReceiveProps"></a>3、componentWillReceiveProps</h3><p>componentWillReceiveProps(nextProps)，接收一个参数，nextProps：即将更新的 props 状态，可以通过 props 传递过来的参数用于：网络请求，数据操作等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>  &#125;;<br><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;上杉绘梨衣&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        父组件：&#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span> click <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextprops</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillReceiveProps&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, nextprops);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">title</span>: nextprops.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦啦&quot;</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、销毁阶段"><a href="#三、销毁阶段" class="headerlink" title="三、销毁阶段"></a>三、销毁阶段</h2><p>componentWillUnmount：在删除组件之前进行清理操作，比如清空定时器和事件监听器，大多用于性能优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">isCreated</span>: <span class="hljs-literal">true</span>,<br>  &#125;;<br><br>  handleComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isCreated</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isCreated</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleComponent&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.isCreated ? <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span> : null&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resize&quot;</span>);<br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;111&quot;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUnmount&quot;</span>, <span class="hljs-string">&quot;组件即将移除&quot;</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果组件销毁但不进行清空操作：<br><img src="https://s1.xptou.com/2022/09/13/632098876eac0.png" alt="组件移除不进行清除操作"><br>组件销毁，清空定时器和其它监听事件：<br><img src="https://s1.xptou.com/2022/09/13/632097cde2109.png" alt="组件移除进行清除"></p><p class='p red'>老生命周期的问题：</p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>(1) componentWillMount ,在 ssr 中 这个方法将会被多次调用， 所以会重复触发多遍，同时在这里如果绑定事件，将无法解绑，导致内存泄漏 ，变得不够安全高效逐步废弃。<br>(2) componentWillReceiveProps 外部组件多次频繁更新传入多次不同的 props，会导致不必要的异步请求<br>(3) componetWillUpdate, 更新前记录 DOM 状态, 可能会做一些处理，与 componentDidUpdate 相隔时间如果过长， 会导致 状态不太信</p></div><h1 id="新生命周期"><a href="#新生命周期" class="headerlink" title="新生命周期"></a>新生命周期</h1><h2 id="1、getDerivedStateFromProps"><a href="#1、getDerivedStateFromProps" class="headerlink" title="1、getDerivedStateFromProps"></a>1、getDerivedStateFromProps</h2><p>机翻：得到衍生的 state 来自 props。<br>特点：<br>第一次的初始化组件以及后续的更新过程中(包括自身状态更新以及父传子) ，返回一个对象作为新的 state，返回 null 则说明不需要在这里更新 state</p><p>getDerivedStateFromProps 注意事项：<br><img src="https://s1.xptou.com/2022/09/14/6321ef5966995.png" alt="1、getDerivedStateFromProps注意事项"><br>getDerivedStateFromProps(nextProps,nextState)，该生命周期接收两个参数，nextProps：即将更新的 props 属性，nextState：即将更新的 state 状态。<br><p class='p red'>getDerivedStateFromProps 替代了 componentWillMount 、componentWillreceiveProps</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;父组件更改前&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">text</span>: nextState.<span class="hljs-property">text</span> + <span class="hljs-string">&quot;啦啦啦&quot;</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; text: &quot;父组件更新后&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;&quot; &quot;&#125;</span><br><span class="language-xml">          click</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 最先获得父组件传来的属性，可以利用属性进行ajax或逻辑处理</span><br>  <span class="hljs-comment">// componentWillReceiveProps(nextprops) &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillReceiveProps&quot;, this.props, nextprops);</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     title: nextprops.text + &quot;啦啦啦啦&quot;,</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件&quot;</span>, <span class="hljs-string">&quot;nextProps&quot;</span>, nextProps, <span class="hljs-string">&quot;nextState&quot;</span>, nextState);<br>    <span class="hljs-comment">// 在这里可以接收到父组件传递过来的 props，但不能在这里做任何异步请求</span><br>    <span class="hljs-comment">// 因为 return 会立即执行，不会等待任何异步操作</span><br>    <span class="hljs-comment">// 所以该生命周期最大的作用是进行一个数据中转，把 props 的属性值 转换为自身的 state，再在 DidUpdate中记性一些 axios 请求等</span><br>    <span class="hljs-comment">// 解决 componentWillReceiveProps 频繁多次请求的问题</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">title</span>: nextProps.<span class="hljs-property">text</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>    <span class="hljs-comment">// *********************注意****************************</span><br>    <span class="hljs-comment">//不能直接在 DidUpdate 中发起 网络请求，因为发起之后，请求成功，更新数据，就会造成再次执行更新阶段，死循环，</span><br>    <span class="hljs-comment">// 不能直接请求，需进行一个判断，</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">title</span> === prevProps.<span class="hljs-property">text</span>) &#123;<br>      <span class="hljs-comment">// 判断 更新后的 值和 之前老的 props 值是否一样，一样的话 return，不再进行后续操作</span><br>      <span class="hljs-comment">// 同时，例如点击向子组件传值，子组件根据值发请求这种例子，可以使重复点击不生效</span><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">myname</span>: <span class="hljs-string">&quot;子组件在DidUpdate中更新的myname&quot;</span>,<br>    &#125;);<br><br>    <span class="hljs-comment">/* axios(&#123;</span><br><span class="hljs-comment">      url:&#x27;https://.....&#x27;,</span><br><span class="hljs-comment">      method:&#x27;GET&#x27;,</span><br><span class="hljs-comment">      data:&#123;</span><br><span class="hljs-comment">        query:this.state.title</span><br><span class="hljs-comment">        ........</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;).then((res)=&gt;&#123;</span><br><span class="hljs-comment">      this.setState(&#123;</span><br><span class="hljs-comment">        title:res</span><br><span class="hljs-comment">      &#125;)</span><br><span class="hljs-comment">    &#125;) */</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Child---&#123;this.state.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件更新在 DidUpdate 中直接进行网络请求或数据更改，死循环：<br><img src="https://s1.xptou.com/2022/09/15/63232c62dc0a9.png" alt="子组件更新不加if判断"><br>加 if 判断，进行请求或数据更改：<br><img src="https://s1.xptou.com/2022/09/15/63232dc460106.png" alt="加if判断"></p><h2 id="2、getSnapshotBeforeUpdate"><a href="#2、getSnapshotBeforeUpdate" class="headerlink" title="2、getSnapshotBeforeUpdate"></a>2、getSnapshotBeforeUpdate</h2><p>getSnapshotBeforeUpdate 取代了 componetWillUpdate ,触发时间为 update 发生的时候，在 render 之后，dom 渲染之前返回一个值，作为 componentDidUpdate 的第三个参数。<br>应用场景：如聊天滚动时记录滚动位置等处理（此用法并不常见）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">mytext</span>: <span class="hljs-string">&quot;1111&quot;</span>,<br>  &#125;;<br>  <span class="hljs-comment">// componentWillUpdate() &#123;</span><br>  <span class="hljs-comment">//   console.log(&quot;componentWillUpdate&quot;);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">nextProps, nextState, value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>, nextProps, nextState, value);<br>  &#125;<br>  <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getSnapshotBeforeUpdate&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123; mytext: &quot;2222&quot; &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          onClick</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.mytext&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/15/632332d776a4f.png" alt="更新的打印过程"></p>]]></content>
    
    
    <summary type="html">主要了解React的生命周期，包括旧生命周期和新生命周期以及用法。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React进阶篇-组件通信的方式</title>
    <link href="https://jsq180.github.io/posts/1515f762.html"/>
    <id>https://jsq180.github.io/posts/1515f762.html</id>
    <published>2022-09-10T22:56:16.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般常用的组件通信方式基本就是 子传父 和 父传子，但除此之外还有其他的数据传递方式，在此说明。<br>并且该篇章中有不熟悉的知识点，发布订阅和上下文，诸如此类，所以单拎出来写了一个篇章。</p><h1 id="一、父子组件通信"><a href="#一、父子组件通信" class="headerlink" title="一、父子组件通信"></a>一、父子组件通信</h1><h2 id="1、父传子"><a href="#1、父传子" class="headerlink" title="1、父传子"></a>1、父传子</h2><p>所谓父向子传值，个人理解就是把父亲的东西（state/方法等）给儿子，可以供儿子使用，儿子可以使用父亲给他的数据，但儿子决不能损坏这些数据（React 遵循单项数据流原则），因为会挨骂（!!!∑(ﾟ Д ﾟノ)ノ）。</p><h3 id="1-父组件向子组件传递基础数据"><a href="#1-父组件向子组件传递基础数据" class="headerlink" title="1.父组件向子组件传递基础数据"></a>1.父组件向子组件传递基础数据</h3><p>父组件通过在子组件内部写 key=value 的形式向子组件传递数据，子组件通过 props 调用<br>本质上就是调用子组件的 props，因为父组件传递的所有数据，都存储在 props 对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件的name为：&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.text&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>渲染的视图以及打印数据如图所示：<br><img src="https://s1.xptou.com/2022/09/10/631cac6e14c40.png" alt="视图及子组件props"></p><h3 id="2-父组件向子组件传递方法"><a href="#2-父组件向子组件传递方法" class="headerlink" title="2.父组件向子组件传递方法"></a>2.父组件向子组件传递方法</h3><p>通常情况下，都是需要子组件做出行为，来影响父组件中的数据，但子组件不能直接更改父组件的数据，此时就需要父组件给子组件更改数据的权限，即：父组件先定义好一个更改数据的方法，传递给子组件，子组件接受收到这个方法，在触发某种行为时调用即可。<br>（烂白话就是：父亲一般不会让儿子拿抽屉里的盒子（数据），但特殊情况时，父亲会给儿子一把开锁的钥匙（更改数据的方法），儿子就可以取走抽屉里的盒子（更改父组件数据），就是这么回事。当然儿子也可以把锁撬开，即强行拿盒子（强行更改父组件数据），结果可想而知(〃’▽’〃)）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">fn</span>();<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.props&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">this.props.bg</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span>点击更改父组件的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">childColor</span>: <span class="hljs-string">&quot;lightblue&quot;</span>,<br>  &#125;;<br><br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;张三&quot;</span> ? <span class="hljs-string">&quot;李四&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      name,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件得到文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的名字：&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;父组件向子组件传递的文本&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">bg</span>=<span class="hljs-string">&#123;this.state.childColor&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fn</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/10/631cb0e7be01c.png" alt="子组件调用父组件方法"><br>props 中有父组件传给子组件的 fn 函数，子组件调用，就相当于直接调用了父组件中修改 state 的方法，对于子组件来说是间接修改了父组件的 state。<br>（人话总结：儿子拿到了钥匙（props 中的 fn），并取出盒子（更改了父组件的 state），但这个盒子不属于他且不知道盒子是干啥的（子组件无权访问 父组件的 state），因为儿子只是遵守父亲的指令，在适当时候把盒子拿出来）</p><h2 id="2、子传父"><a href="#2、子传父" class="headerlink" title="2、子传父"></a>2、子传父</h2><p>子传父的方式和 父向子传方法 比较类似，区别就是子组件不是单纯的调用父组件的方法，而是需要向父组件传递自己内部的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;childName&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击改变自己的name</span><br>  changeName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;changeName&quot;</span>,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 点击向父组件传递数据</span><br>  changeFatherName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getChildName</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> &quot;<span class="hljs-attr">10px</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          子组件自己的name:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>点击改变自己的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeFatherName&#125;</span>&gt;</span></span><br><span class="language-xml">          点击向父组件传递自己的name</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">childName</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br><br>  getChildName = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件传递过来的值&quot;</span>, value);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">childName</span>: value,<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是父组件的文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件的名字：&#123;this.state.childName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">getChildName</span>=<span class="hljs-string">&#123;this.getChildName&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>初始加载页面：<br><img src="https://s1.xptou.com/2022/09/11/631cb8d038fad.png" alt="加载页面"><br>点击更改子组件 name：此时并未向父组件传值，所以父组件的渲染处依旧为空<br><img src="https://s1.xptou.com/2022/09/11/631cb968ad1f2.png" alt="子组件更改name"><br>此时点击向父组件传值：<br><img src="https://s1.xptou.com/2022/09/11/631cb9f3ec123.png" alt="向父组件传值"></p><p>子向传父传值，子组件将数据作为回调交给父组件的方法，父组件可以接收到这个值，并将子组件的这个值，赋值给自己的 state ，作为自己内部的数据进行渲染，如果后续子组件的数据发生变化，只要调用向父组件传值的方法，就可以更改视图。如果子组件一直不调用，那么，父组件就无法得到子组件的数据。<br>人话总结：这是一位和蔼可亲的父亲，给儿子一张成绩统计表（向子组件传递方法并接收参数），儿子可以凭自己的意愿，决定要不要填写这个成绩表，并把它交给父亲（子组件自主调用该方法，并将部分数据传给父组件）</p><h1 id="二、非父子组件通信"><a href="#二、非父子组件通信" class="headerlink" title="二、非父子组件通信"></a>二、非父子组件通信</h1><h2 id="1、状态提升（中间人模式）"><a href="#1、状态提升（中间人模式）" class="headerlink" title="1、状态提升（中间人模式）"></a>1、状态提升（中间人模式）</h2><p>React 中的状态提升概括来说,就是将多个组件需要共享的状态提升到它们最近的父组件上.在父组件上改变这个状态然后通过 props 分发给子组件.（即兄弟组件通信）<br>流程如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631d9b1053d26.png" alt="中间人模式数据传输流程"><br>兄弟组件传值：子传父—&gt;父再传另一个子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [],<br>  &#125;;<br>  getList = <span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件接收到Child1的值&quot;</span>, list);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      list,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">getList</span>=<span class="hljs-string">&#123;this.getList&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&#123;this.state.list&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-comment">// 向父组件传值</span><br>  sendList = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child1向父组件传值&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">getList</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.sendList&#125;</span>&gt;</span>点击向Child2发送数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2 render：list数据&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">list</span>);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员列表：</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;/*接收父组件传过来的值并渲染*/&#125;</span><br><span class="language-xml">          &#123;this.props.list.map((item) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">              &#123;item.name&#125;-&#123;item.age&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初次渲染，Child2 没有值，所以 ul 列表的 li 不渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da081db55f.png" alt="初次加载阶段"><br>点击按钮，Child1 把 list 传递给父组件，父组件 list 改变，Child2 的 props 也相应改变，render 再次渲染：<br><img src="https://s1.xptou.com/2022/09/11/631da0e062623.png" alt="子传父，父传给另一个子"></p><h2 id="2、发布订阅模式（简易版）"><a href="#2、发布订阅模式（简易版）" class="headerlink" title="2、发布订阅模式（简易版）"></a>2、发布订阅模式（简易版）</h2><p>发布订阅模式不是 React 独有的，通过 JavaScript 即可实现发布订阅模式，是原生的设计模式。<br>发布订阅模式流程图如下(以微信公众号为例子)：<br><img src="https://s1.xptou.com/2022/09/11/631da5a8efbe4.png" alt="发布订阅流程图"></p><div class="note info modern"><p>第一步：定义 bus 对象，在内部定义方法：subscibe()(订阅)、publish()（发布），并在 bus 外部创建订阅者</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 微信公众平台</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者</span><br><span class="hljs-comment">// 点击按钮订阅公众号</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>console 结果如图所示：<br><img src="https://s1.xptou.com/2022/09/11/631da7eec9e8e.png" alt="callback结果"><br>此时的 log 打印即为 subscribe 执行的结果，因为有人订阅了（调用了 subscribe），所以有了打印，subscribe 接收的是一个回调函数，而后续需要在 publish 方法中使用这个 callback，但 publish 访问不到 subscribe 中的 callback ，此时进行第二步</p><div class="note info modern"><p>第二步：定义 list 数组，用来存储所有订阅者传递的回调函数 callback</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callback);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631dab011fea8.png" alt="多个订阅者执行subscribe"><br>此时多个订阅者已经订阅了这一个公众号，那么接下来，就轮到 发布者 发布了，调用 publish</p><div class="note info modern"><p>第三步：发布者发布文章，调用 publish 方法，publish 将所有订阅者的 callback 函数进行遍历执行</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 调度中心</span><br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-comment">// 订阅者回调 的存储数组</span><br>  <span class="hljs-attr">list</span>: [],<br><br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">//subscribe 接收的是一个回调函数</span><br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br><br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">pubulish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">// 遍历所有的 list ，将回调函数执行</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback, index</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 订阅者A</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：张三`</span>);<br>&#125;);<br><br><span class="hljs-comment">//订阅者B</span><br>bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`公众号发布了<span class="hljs-subst">$&#123;content&#125;</span>文章，订阅人：李四`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 发布者</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 发布一般是异步，因为点击按钮之后才会执行发布</span><br>  bus.<span class="hljs-title function_">pubulish</span>(<span class="hljs-string">&quot;HTML&quot;</span>);<br>&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/11/631db7a18cef7.png" alt="发布者调用publish"><br>结果就是订阅者的回调函数，在发布者发布的情况下依次执行，派发给每一个订阅者。</p><div class="tip info"><p>Redux 的原理实际上就是基于的发布订阅去实现的</p></div><h2 id="3、发布订阅结合-React（简单案例）"><a href="#3、发布订阅结合-React（简单案例）" class="headerlink" title="3、发布订阅结合 React（简单案例）"></a>3、发布订阅结合 React（简单案例）</h2><div class="note info modern"><p>第一步：创建一个发布订阅模式<br>第二步：Child2 组件先进行订阅 bus.subscribe((value) =&gt; {})<br>第三步：Child1 组件进行发布，pubLishDetail = (item) =&gt;{bus.publish(item.content)}，在点击按钮的时候获取到当前项，并把当前项的 content 发布<br>第四部：Child2 组件能够得到 Child1 发布的 content，此时仅需渲染即可，在内部 this.setState({content:value})，即可进行视图的渲染</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">var</span> bus = &#123;<br>  <span class="hljs-attr">list</span>: [],<br>  <span class="hljs-comment">// 订阅</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-comment">// console.log(callback);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(callback);<br>  &#125;,<br>  <span class="hljs-comment">// 发布</span><br>  <span class="hljs-title function_">publish</span>(<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-comment">//   遍历所有的列表list，将回调函数执行</span><br>    <span class="hljs-comment">// console.log(this.list);</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>      callback &amp;&amp; <span class="hljs-title function_">callback</span>(content);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br><br>  <span class="hljs-comment">// 组件1 进行发布</span><br>  pubLishDetail = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    bus.<span class="hljs-title function_">publish</span>(item.<span class="hljs-property">content</span>);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.list.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                this.pubLishDetail(item);</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              点击发布该名字的人物介绍</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 组件2DOM元素加载完毕，进行订阅</span><br>    bus.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child2订阅得到发布者的发布内容：&quot;</span>, value);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">content</span>: value,<br>      &#125;);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        人员介绍：&#123;this.state.content&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始加载状态：<br><img src="https://s1.xptou.com/2022/09/11/631dbe66be3ef.png" alt="加载完毕的状态"><br>点击每一项按钮依次派发内容：<br><img src="https://s1.xptou.com/2022/09/11/631dbeb136265.png" alt="点击按钮Child2组件接收不同内容"></p><h2 id="4、context-状态树传参"><a href="#4、context-状态树传参" class="headerlink" title="4、context 状态树传参"></a>4、context 状态树传参</h2><p>React 官方提供了 Context 来进行组件通信，其原理就是 生产者-消费者 模式。<br>生产者-消费者模式流程介绍图：<br><img src="https://s1.xptou.com/2022/09/11/631dfc38ebe66.png" alt="生产者消费者模式"><br>虽然这些组件也是必须在一个父组件当中，但和兄弟组件传值相比，Context 最大的优势，是可以进行组件嵌套时的数据通信，只要在一个父组件下，所有的子组件都可以是消费者，不管该组件外部嵌套了多少父组件，只要成为消费者，生产商就可以把数据传递给这些组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 第一步，先创建 Context 对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">GLobalContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// App根组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: <span class="hljs-literal">null</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第二步：使用 GLobalContext 将根节点进行包裹，实际是使用 GLobalContext 对象身上的 Provider 属性，使根组件成为 供应商</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 第四步：尝试传递一些参数</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">call:</span> &quot;<span class="hljs-attr">打电话</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">sms:</span> &quot;<span class="hljs-attr">发短信</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">content:</span> <span class="hljs-attr">this.state.content</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">changeContent:</span> (<span class="hljs-attr">content</span>) =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(content);</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              content,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Provider</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">list</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;他是一个衰小孩，却又有着狮子般的凶狠&quot;</span>,<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;在不合适的场合相遇，终会是一场悲剧&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;执拗的坚定主义者&quot;</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 第三步：使组件1 成为消费者</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 步骤1：先使用 GLobalContext.Consumer 将根节点进行包裹</span><br><span class="hljs-comment">     * 步骤2：在内部写一个 JavaScript 写法的回调函数 ()=&gt;&#123;&#125;  因为 React render 中不支持这样写，还需要加一个&#123;&#125;让 React 识别，</span><br><span class="hljs-comment">     * 最终写法：&#123;</span><br><span class="hljs-comment">                  ()=&gt;&#123;</span><br><span class="hljs-comment">                      return &lt;div&gt;根节点&lt;/div&gt;</span><br><span class="hljs-comment">                  &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-comment">// 问：为什么携程回调函数的形式？</span><br>    <span class="hljs-comment">// 答：为了接收参数，即 供应商 提供给消费者的各种服务（数据）</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child1组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightpink</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              &#123;this.state.list.map((item) =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">                    &#123;item.name&#125;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                        // value.content = item.content // 这种改法 React 监听不到，视图不会重新渲染，所以需要供应商提供一个改状态的方法</span><br><span class="language-xml">                        // 在点击的时候 把当前点击项的 content 传递给父组件，父组件进行修改并广播</span><br><span class="language-xml">                        value.changeContent(item.content);</span><br><span class="language-xml">                      &#125;&#125;</span><br><span class="language-xml">                    &gt;</span><br><span class="language-xml">                      点击显示该名字的人物介绍</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; &#123;</span><br><span class="language-xml">          // console.log(&quot;Child2组件接收&quot;, value);</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Child2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">              人员介绍：&#123;value.content&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          );</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">GLobalContext.Consumer</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Context 写法下的结果，和发布订阅模式下的结果一致：<br><img src="https://s1.xptou.com/2022/09/11/631dfc5a05427.png" alt="Context写法"><br>以上代码需求大致为：此时需要将 Child1 点击对应项，让 Child2 显示 content，即将 Child1 的数据传递给 Child2<br>实现流程：<br><div class="note info simple"><p>1、使 App 组件成为 生产者，使 Child1、Child2 组件成为消费者，<br>2、App 生产者，需提供 一个在 state 定义好，用来接收 Child1 传递过来的数据，派发给每一个消费者，这样才能使消费者中使用这个数据的视图更新<br>3、App 生产者，需提供一个 更改 state 的方法，在点击 Child1 的某项数据时，把数据传递给 App 生产者，并更改 state 中的数据<br>4、点击测试即可</p></div><br>PS：小声 bb，这种写法真是无力吐槽，对于简单的通信，父子通信即可解决，而且开发中很少使用这种方式，大都使用 Redux 进行跨组件通信。</p><div class="tip warning"><p>注意：GlobalContext.Consumer 内必须是回调函数，通过 context 方法改变根组件状态</p></div><div class="note info modern"><p>context 优缺点：<br>优点：跨组件访问数据<br>缺点：react 组件树中某个上级组件 shouldComponetUpdate 返回 false,当 context 更新时，不会引起下级组件更新</p></div><h2 id="三、插槽"><a href="#三、插槽" class="headerlink" title="三、插槽"></a>三、插槽</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">999</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        App父组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1111111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3333333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、爲了复用</span><br><span class="hljs-comment">2、一定程度减少父子通信</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>); <span class="hljs-comment">// 插槽的内容以数组的形式呈现</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">lightblue</span>&quot;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        Child组件</span><br><span class="language-xml">        &#123;/* 类似vue的插槽 */&#125;</span><br><span class="language-xml">        &#123;this.props.children[0]&#125;</span><br><span class="language-xml">        &#123;this.props.children[1]&#125;</span><br><span class="language-xml">        &#123;this.props.children[2]&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图渲染即打印结果：插槽的内容以数组的形式呈现<br><img src="https://s1.xptou.com/2022/09/11/631e025cc8899.png" alt="插槽的使用结果"></p>]]></content>
    
    
    <summary type="html">主要讲述React的组件通信的多种方式。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-state和props以及受控组件</title>
    <link href="https://jsq180.github.io/posts/38c9fb2f.html"/>
    <id>https://jsq180.github.io/posts/38c9fb2f.html</id>
    <published>2022-09-01T21:00:02.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、组件的数据挂载方式"><a href="#一、组件的数据挂载方式" class="headerlink" title="一、组件的数据挂载方式"></a>一、组件的数据挂载方式</h1><h2 id="1-状态（state）"><a href="#1-状态（state）" class="headerlink" title="1.状态（state）"></a>1.状态（state）</h2><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同(自己管理)。</p><ul><li>写法一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.name = &quot;Vue&quot;</span><br>  &#125;;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  isLiked 存放在实例的 state 对象当中，组件的 render 函数内，会根据组件的 state 的中的</span><br><span class="hljs-comment">  isLiked 不同显示“取消”或“收藏”内容。下面给 button 加上了点击的事件监听</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span> 点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：在 React 中修改状态，不能直接 this.state.isLiked 修改，原因如下</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>this.state 是纯 js 对象,在 vue 中，data 属性是利用 Object.defineProperty 处理过的，更改 data 的数据的时候会触发数据的 getter 和 setter ，但是 React 中没有做这样的处理。<br>如果直接更改的话，react 是无法得知的，所以，需要使用特殊的更改状态的方法 <strong>setState</strong> 。</p></div></p><ul><li>写法二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>      <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;<br><br>  changName = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 将 name 属性从 React 设置为 Vue</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changName&#125;</span>&gt;</span>点击 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用 constructor 构造器继承 Component 组件的属性，则必须在内部添加 super()</p><ul><li>constructor 简单介绍：</li></ul><ul><li>constructor 方法是类的默认方法，通过 new 命令生成对象实例，自动调用该方法。</li><li>一个类必须有 constructor 方法，如果没有显示定义，一个空的 constructor 方法会被默认添加。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义了一个空的类Point，</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-comment">// JavaScript引擎会自动为它添加一个空的constructor方法</span><br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 constructor 详细内容，后续补充。</p><h2 id="2-渲染数据"><a href="#2-渲染数据" class="headerlink" title="2.渲染数据"></a>2.渲染数据</h2><h3 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h3><p>一般会通过三目运算的方式，对不同状态的数据进行不同内容的渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;React&quot;</span>,<br>    <span class="hljs-attr">isLiked</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  changeLike = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>    &#125;);<br>    <span class="hljs-comment">// this.state.isLiked = !this.state.isLiked</span><br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;this.state.name&#125; 的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>/</span><br><span class="language-xml">        &#123;/* 当 isLiked 的状态为 true ，渲染 &quot;❤收藏&quot; ，否则渲染  &quot;🖤取消&quot; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeLike&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.state.isLiked ? &quot;🖤取消&quot; : &quot;❤收藏&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-列表渲染"><a href="#2-列表渲染" class="headerlink" title="2.列表渲染"></a>2.列表渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">people</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;路明非&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;绘梨衣&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;楚子航&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.state.people.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 内部渲染还可以这样写：原因是 return 的只能是一个根节点，即一个结果，所以 return 和 &#123;&#125; 可以省略不写</span><br><span class="hljs-comment">/* this.state.people.map((item) =&gt; &#123;</span><br><span class="hljs-comment">  return (</span><br><span class="hljs-comment">    &lt;ul key=&#123;item.id&#125;&gt;</span><br><span class="hljs-comment">      &#123;item.name&#125; - &#123;item.age&#125;</span><br><span class="hljs-comment">    &lt;/ul&gt;</span><br><span class="hljs-comment">  );</span><br><span class="hljs-comment">&#125;); */</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.xptou.com/2022/09/01/6310852e0ef87.png" alt="列表渲染结果"></p><h3 id="3-循环渲染的唯一值-key"><a href="#3-循环渲染的唯一值-key" class="headerlink" title="3.循环渲染的唯一值 key"></a>3.循环渲染的唯一值 key</h3><p>在进行循环渲染时，react 告诉我们，每一条数据都需要有一个 key 值，且 key 的值是唯一，不能重复的。<br>这涉及到 React（Vue）的渲染方式：虚拟 DOM，其核心也就是 Diff 算法。</p><p>React 的高效依赖于所谓的 Virtual-DOM，尽量不碰 DOM。对于列表元素来说会有一个问题：元素可能会在一个列表中改变位置。要实现这个操作，只需要交换一下 DOM 位置就行了，但是 React 并不知道其实我们只是改变了元素的位置，所以它会重新渲染后面两个元素（再执行 Virtual-DOM ），这样会大大增加 DOM 操作。但如果给每个元素加上唯一的标识，React 就可以知道这两个元素只是交换了位置，这个标识就是 key ，这个 key 必须是每个元素唯一的标识</p><p><img src="https://s1.xptou.com/2022/09/01/6310c0c0d4e24.png" alt="DOM更新原理"></p><ul><li>为了列表的复用和重排，设置 key 值，提高性能。</li><li>在进行列表渲染时，尽量使用数据的 ID 作为 key，因为后端返回的 ID 时唯一的。</li><li>在列表仅仅是数据展示时，可以使用 index 索引作为 key，因为不会对 DOM 进行数据更改。</li><li>如果涉及到列表数据的动态<strong>添加、删除</strong>等，就尽量保证 key 值得唯一性，不然很可能会出现问题。</li><li>在对 state 中的数据更改时，非必要，尽量不要影响原数据，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = a;<br>b.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 此时 b 指向的 和 a 是同一个 内存地址，相当于操作的依旧是 a 数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b); <span class="hljs-comment">// true 若指向的不同地址，就算数组相同，也为 false</span><br></code></pre></td></tr></table></figure><ul><li>解决方法：</li></ul><ul><li>解构赋值 、slice、concat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 解构赋值</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> b = [...a]; <span class="hljs-comment">// 多层数据无法实现</span><br><br><span class="hljs-comment">// slice()  concat()</span><br><span class="hljs-keyword">let</span> c = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> d = [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> c_copy = c.<span class="hljs-title function_">slice</span>();<br><span class="hljs-keyword">let</span> d_copy = d.<span class="hljs-title function_">slice</span>(); <span class="hljs-comment">// 如果数组含有对象，则对象的指针指向同一个内存地址，也相当于拷贝一层</span><br></code></pre></td></tr></table></figure><h3 id="4-setState-同步异步"><a href="#4-setState-同步异步" class="headerlink" title="4.setState 同步异步"></a>4.setState 同步异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">count1</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">count2</span>: <span class="hljs-number">1</span>,<br>  &#125;;<br>  <span class="hljs-comment">// 同步函数</span><br>  changeCount = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>      &#123;<br>        <span class="hljs-attr">count1</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span> + <span class="hljs-number">1</span>,<br>      &#125;,<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>      &#125;<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;同步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count1</span>);<br>  &#125;;<br>  <span class="hljs-comment">//异步函数</span><br>  changeAsync = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// axios 属于异步任务</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.apiopen.top/api/getHaoKanVideo?page=1&quot;</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>        &#123;<br>          <span class="hljs-attr">count2</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span> + <span class="hljs-number">1</span>,<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState回调函数内部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>        &#125;<br>      );<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;异步函数中setState外部访问&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count2</span>);<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeCount&#125;</span>&gt;</span>同步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeAsync&#125;</span>&gt;</span>异步click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>点击操作结果如图所示：<br><img src="https://s1.xptou.com/2022/09/04/631473e7819d1.png" alt="setState 同步异步"><br><strong>结论：</strong><br><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><ul><li>setState 处在同步任务中，异步更新状态和真实 DOM<br>setState 处在异步任务中，同步更新状态和真实 DOM</li><li>setState 接受第二个参数，第二个参数式回调函数中，状态和 DOM 更新完成就会被触发</li></ul></div></p><h3 id="5-setState-的两种写法"><a href="#5-setState-的两种写法" class="headerlink" title="5.setState 的两种写法"></a>5.setState 的两种写法</h3><p>setState 有两个参数。<br>第一个参数可以是对象，也可以是方法 return 一个对象，我们把这个参数叫做 updater</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1、参数是对象  这种写法是最常用的</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>  <span class="hljs-attr">isLiked</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isLiked</span>,<br>&#125;);<br><br><span class="hljs-comment">//2、参数是方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这两个参数的数据都是最新的，在此回调函数中访问到的数据也都是最近的</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isLiked</span>: !state.<span class="hljs-property">isLiked</span>,<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-React-识别富文本：dangerouslySetInnerHTML"><a href="#2-React-识别富文本：dangerouslySetInnerHTML" class="headerlink" title="2.React 识别富文本：dangerouslySetInnerHTML"></a>2.React 识别富文本：dangerouslySetInnerHTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">content</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;这是第一行&lt;br/&gt;这是第二行&quot;</span> &#125;],<br>    <span class="hljs-attr">myHtml</span>: <span class="hljs-string">`&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="hljs-string">              &lt;img src=&quot;https://xxxxxxxx&quot;/&gt;</span><br><span class="hljs-string">            &lt;/div&gt;`</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/*注意：__html 是两个下划线*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.content</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">this.state.myHtml</span> &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处于安全的原因，React 当中所有表达式的内容会被转义，如果直接输入，标签会被当成文本。这时候<br>就需要使用 dangerouslySetHTML 属性，它允许我们动态设置 innerHTML。<br>一般情况下，dangerouslySetInnerHTML 搭配富文本编辑器使用，一般用来转义 html 标签。</p><h1 id="二、属性（props）"><a href="#二、属性（props）" class="headerlink" title="二、属性（props）"></a>二、属性（props）</h1><h2 id="1-类组件"><a href="#1-类组件" class="headerlink" title="1.类组件"></a>1.类组件</h2><ul><li>props 是正常是外部传入的，组件内部也可以通过一些方式来初始化的设置，属性不能被组件自己更改，但是你可以通过父组件主动重新渲染的方式来传入新的 props</li><li>属性是描述性质、特点的，组件自己不能随意更改。</li><li>总的来说，在使用一个组件的时候，可以把参数放在标签的属性当中，所有的属性都会作为组件 props 对象的键值。通过箭头函数创建的组件，需要通过函数的参数来接收 props :<br>(1) 在组件上通过 key=value 写属性,通过 this.props 获取属性,这样组件的可复用性提高了。<br>(2) 注意在传参数时候，如果写成 isShow=”true” 那么这是一个字符串 如果写成 isShow={true} 这个 是布尔值<br>(3) {…对象} 展开赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Navbar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, propTypes);<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.leftshow &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#125;</span><br><span class="language-xml">        Navbar-&#123;this.props.title&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;测试&quot;</span>,<br>      <span class="hljs-attr">leftshow</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;列表&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;购物车&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;obj.title&#125;</span> <span class="hljs-attr">leftshow</span>=<span class="hljs-string">&#123;obj.leftshow&#125;</span> /&gt;</span> */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> &#123;<span class="hljs-attr">...obj</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4) 默认属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">*.<span class="hljs-property">defaultProps</span> = &#123;<br><br> &#125;<br><span class="hljs-keyword">static</span> defaultProps = &#123;<br>  <span class="hljs-attr">myname</span>:<span class="hljs-string">&quot;默认的myname&quot;</span>,<br>  <span class="hljs-attr">myshow</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>(5) prop-types 属性验证<br>验证 props 传入的数据是否合法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br>*.<span class="hljs-property">propTypes</span>=&#123;<br>    <span class="hljs-attr">name</span>:propTypes.<span class="hljs-property">string</span>,<br>    <span class="hljs-attr">age</span>:propTypes.<span class="hljs-property">number</span><br>&#125;<br><span class="hljs-comment">// 类属性</span><br><span class="hljs-keyword">static</span> propTypes=&#123;<br>  <span class="hljs-attr">myname</span>:propTypes.<span class="hljs-property">string</span>,<br>  <span class="hljs-attr">myshow</span>:propTypes.<span class="hljs-property">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><p>propTypes 的打印结果：<br><img src="https://s1.xptou.com/2022/09/04/6314741c24aaa.png" alt="propTypes 打印结果"></p><h2 id="2-函数组件"><a href="#2-函数组件" class="headerlink" title="2.函数组件"></a>2.函数组件</h2><p>函数组件的规则和类组件几乎没有区别，只有在 props 的调用上有些许不同<br>类组件使用 this.props.属性 来访问，而函数组件直接 props.属性 访问，毕竟 函数组件没有 this，当然也无法通过 this 访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navbar</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">props.bg</span> &#125;&#125;&gt;</span>Navbar组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;&#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">space-between</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-状态-vs-属性"><a href="#3-状态-vs-属性" class="headerlink" title="3.状态 vs 属性"></a>3.状态 vs 属性</h2><p>相似点：都是纯 js 对象，都会触发 render 更新，都具有确定性（状态/属性相同，结果相同）<br>不同点：</p><ol><li>属性能从父组件获取，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以，设置方式不一样</li><li>属性不在组件内部修改，状态要在组件内部修改</li><li>属性能设置子组件初始值，状态不可以</li><li>属性可以修改子组件的值，状态不可以</li></ol><ul><li><p>state 的主要作用是用于组件保存、控制、修改自己的可变状态。 state 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为 state 是一个局部的、只能被组件自身控制的数据源。 state 中状态可以通过 this.setState 方法进行更新，setState 会导致组件的重新渲染。</p></li><li><p>props 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的 props ，否则组件的 props 永远保持不变。</p></li><li><p>没有 state 的组件叫无状态组件（stateless component），设置了 state 的叫做有状态组件（stateful component）。因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。</p></li></ul><h1 id="三、非受控组件和受控组件"><a href="#三、非受控组件和受控组件" class="headerlink" title="三、非受控组件和受控组件"></a>三、非受控组件和受控组件</h1><h2 id="1-非受控组件"><a href="#1-非受控组件" class="headerlink" title="1.非受控组件"></a>1.非受控组件</h2><p>React 要编写一个非受控组件，可以 使用 ref 来从 DOM 节点中获取表单数据，就是非受控组件。（不是通过 react 的 state 来获取表单数据，而是通过 ref 的形式来获取，不受到 state 的控制，就叫做非受控组件）</p><p>默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  myusername = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myusername&#125;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(this.myusername.current.value);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          登录</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.myusername.current.value = &quot;&quot;;</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样， type=”checkbox” 和 type=”radio” 支持 defaultChecked ， select 和 textarea 支持 defaultValue 。<br><strong>注意：</strong><br><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>除非使用很简单的代码，组件的数据不涉及视图更新，不然不建议使用非受控组件，因为非受控组件不与 state 关联，所以改变数据，react 监听不到数据更改，不会改变视图。</p></div></p><h2 id="2-受控组件"><a href="#2-受控组件" class="headerlink" title="2.受控组件"></a>2.受控组件</h2><p>由于在表单元素上设置了 value 属性，因此显示的值将始终为 this.state.value ，这使得 React 的 state 成为唯一数据源。由于 onChange 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。<br>对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">//   myusername = React.createRef();</span><br>  state = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;默认值&quot;</span>,<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.username&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(event)</span> =&gt;</span> &#123;</span><br><span class="language-xml">            // input 值 赋值给 state 中的受控数据</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: event.target.value,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.setState(&#123;</span><br><span class="language-xml">              username: &quot;&quot;,</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          重置</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note info modern"><p>注意: 另一种说法（广义范围的说法），React 组件的数据渲染是否被调用者传递的 props 完全控制，控制则<br>为受控组件，否则非受控组件。</p></div><h2 id="3-受控组件和非受控组件区别"><a href="#3-受控组件和非受控组件区别" class="headerlink" title="3.受控组件和非受控组件区别"></a>3.受控组件和非受控组件区别</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><div class="tip sync"><p>1、在 React 中默认可以完成从 state 到表单 value 的动态绑定。<br>2、给 input 提供 onchange 事件，一旦检测到文本框内容有变化，马上执行 onchange 事件获取表单的内容。</p></div><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><div class="tip sync"><p>1、操作 DOM 获取到你要的数据，即通过 ref=”dom” 绑定 DOM 元素获取数据。<br>2、可以在构造函数里面定义一个变量 dom = React.createRef()，通过变量来创建组件引用，就可以获取到这个节点。<br>以上两条都是通过 DOM 节点获取数据，本质上是一样的</p></div>]]></content>
    
    
    <summary type="html">React数据加载和渲染：state数据渲染和注意事项，props的使用，state和props之间的区别，受控组件和非受控组件。</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-了解React的基础语法</title>
    <link href="https://jsq180.github.io/posts/46f4fab.html"/>
    <id>https://jsq180.github.io/posts/46f4fab.html</id>
    <published>2022-08-28T20:48:49.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、认识-React-组件"><a href="#一、认识-React-组件" class="headerlink" title="一、认识 React 组件"></a>一、认识 React 组件</h1><h2 id="1-Class-组件"><a href="#1-Class-组件" class="headerlink" title="1.Class 组件"></a>1.Class 组件</h2><p>ES6 的加入让 JavaScript 直接支持使用 class 来定义一个类，react 创建组件的方式就是使用的类的继承，ES6 class 是目前官方推荐的使用方式，它使用了 ES6 标准语法来构建，看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>ES6 class 组件其实就是一个构造器,每次使用组件都相当于在实例化组件，像这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入&#123;this.props.name&#125;的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>&#125;).<span class="hljs-title function_">render</span>();<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(app, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2.函数式组件"></a>2.函数式组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>( <span class="hljs-comment">// React组件的调用方式</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) )<br></code></pre></td></tr></table></figure><p><strong>注意：不论是 class 组件还是函数式组件，组件名必须大写，否则报错。且每个组件有且只有一个根节点</strong></p><h2 id="3-组件的样式"><a href="#3-组件的样式" class="headerlink" title="3.组件的样式"></a>3.组件的样式</h2><ul><li>行内样式<br>想给虚拟 dom 添加行内样式，需要使用表达式传入样式对象的方式来实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> styles=&#123;<br>  <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&quot;20px&quot;</span>,<br>  <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;#000&quot;</span><br>&#125;<br><span class="hljs-comment">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，JS会把它当做一个逻辑进行处理，第二个是样式对象的括号</span><br>&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>行内样式需要写入一个样式对象，而这个样式对象的位置可以放在很多地方，例如 render 函数里、组件原型上、外链 js 文件中。</p><ul><li>使用 class<br>React 推荐我们使用行内样式，因为 React 觉得每一个组件都是一个独立的整体。<br>其实我们大多数情况下还是大量的在为元素添加类名，但是需要注意的是， <strong>class</strong> 需要写成 <strong>className</strong> （因为毕竟是在写类 js 代码，会受到 js 规则的限制，而 class 是关键字）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> ==&gt; className , <span class="hljs-keyword">for</span> ==&gt; <span class="hljs-title function_">htmlFor</span>(label)<br><span class="hljs-comment">/* htmlFor 即为 label 的 for 属性 */</span><br></code></pre></td></tr></table></figure><h2 id="4-组件嵌套"><a href="#4-组件嵌套" class="headerlink" title="4.组件嵌套"></a>4.组件嵌套</h2><h3 id="1-基础组件嵌套"><a href="#1-基础组件嵌套" class="headerlink" title="1.基础组件嵌套"></a>1.基础组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f1f600faea.png" alt="基础组件嵌套"></p><h3 id="2-多层组件嵌套"><a href="#2-多层组件嵌套" class="headerlink" title="2.多层组件嵌套"></a>2.多层组件嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">red</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        NavBar 组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 下的 Child 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f200ab8171.png" alt="多层组件嵌套"></p><h1 id="二、React-事件"><a href="#二、React-事件" class="headerlink" title="二、React 事件"></a>二、React 事件</h1><h2 id="1-事件绑定写法"><a href="#1-事件绑定写法" class="headerlink" title="1.事件绑定写法"></a>1.事件绑定写法</h2><p>采用 on+事件名的方式来绑定一个事件，注意，这里和原生的事件是有区别的，原生的事件全是小写 onclick , React 里的事件是驼峰 onClick ，<strong>React 的事件并不是原生事件，而是合成事件。</strong></p><h2 id="2-事件-handler-的写法"><a href="#2-事件-handler-的写法" class="headerlink" title="2.事件 handler 的写法"></a>2.事件 handler 的写法</h2><ul><li>直接在 render 里写行内的箭头函数(不推荐)</li><li>在组件内使用箭头函数定义一个方法(推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 render 里直接使用 onClick={this.handleClick.bind(this)} (不推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 constructor 里 bind(this)(推荐)<br><strong>个人最推荐的写法为 handleClick2 的方式，行内写方法，组件内将方法写成箭头函数的写法。若要传参，则采用 handleClick5 的写法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">/*  handleClick() &#123;</span><br><span class="hljs-comment">           console.log(this, &quot;click1&quot;);</span><br><span class="hljs-comment">       &#125; */</span><br>  handleClick2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click2&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">handleClick3</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click3&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick4</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click4&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click5&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不加小括号箭头函数，相当于自执行 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(&quot;click，仅限逻辑极少的情况&quot;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add1（行内箭头函数）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* handleClick 不加小括号，被动执行，点击之后触发。若加，则直接执行 */&#125;</span><br><span class="language-xml">        &#123;/* 若要传参，且不让他执行 则 onClick=&#123;()=&gt;&#123;this.handleClick(&quot;value&quot;)&#125;&#125; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>add2（函数箭头函数）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick3.bind(this)&#125;</span>&gt;</span></span><br><span class="language-xml">          add3（行内非箭头函数绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不绑定this ,this 为 undefined */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick4&#125;</span>&gt;</span></span><br><span class="language-xml">          add4（内非箭头函数不绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.handleClick5();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add5（行内箭头函数方法）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f24cdcc47f.png" alt="事件绑定方式"></p><h2 id="3-React-事件绑定原理"><a href="#3-React-事件绑定原理" class="headerlink" title="3.React 事件绑定原理"></a>3.React 事件绑定原理</h2><p>react 的事件绑定并非像原生事件一样，绑定在具体的 DOM 节点上，这样是非常消耗内存的。而是采用了<strong>事件代理</strong>的方案：<br>测试结果如下：</p><ul><li>在未移除 button 的 click 事件时，按钮点击正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f28b32ece4.png" alt="未移除时结果"></li><li>在移除 button 的 click 事件后，按钮依旧正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f29bc899d1.png" alt="移除后执行结果"></li><li>在移除 root 的 click 事件后，按钮无法操作<br><img src="https://s1.xptou.com/2022/08/31/630f2aaad0bb9.png" alt="移除 root 后执行结果"><br>由此推断：<br>react 的事件并非是由点击的 DOM 节点执行的，而是由 root 根节点 target 通过事件源找到真正触发的元素，然后从真实触发的元素依次向顶点查找有没有叫 onClick 的属性，如果有，就把该属性身上的事件执行。<br>因为事件代理的方式，在性能方面是更优的，因为不需要绑定到准确的 DOM 节点上，所以也不需要考虑解绑事件。</li></ul><h2 id="4-Event-对象"><a href="#4-Event-对象" class="headerlink" title="4.Event 对象"></a>4.Event 对象</h2><p>虽然 react 的事件机制与原生事件有所不同，但 event 事件对象却和原生的基本一致。<br>和普通浏览器一样，事件handler会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。<br>不同的是 React中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  handleClick2 = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, <span class="hljs-string">&quot;click&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：<br><img src="https://s1.xptou.com/2022/08/31/630f2d6eb5990.png" alt="打印结果"><br>和普通浏览器一样，事件 handler 会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。不同的是 React 中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><h1 id="三、Ref-的应用"><a href="#三、Ref-的应用" class="headerlink" title="三、Ref 的应用"></a>三、Ref 的应用</h1><ul><li>ref 字符串绑定（将要废弃）</li></ul><ul><li>给标签设置 ref=”ipt1”，通过这个获取 this.refs.ipt1 , ref 可以获取到应用的真实 dom</li></ul><ul><li>新的写法（推荐）</li></ul><ul><li>标签内设置 ipt2 = React.createRef(); 并通过 ref={this.ipt2} 进行 DOM 绑定，通过 this.ipt2.current 获取到真实 DOM</li><li>组件内设置 component = React.createRef(); 并通过 ref={this.component} 进行组件绑定，通过 this.component.current 可以获取到 组件内部的所有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// Input 组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  a = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Input组件---a=&#123;this.a&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  ipt2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  component = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut1&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut2&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Input组件&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>.<span class="hljs-property">a</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ipt1&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.ipt2&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.component&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f5645535ac.png" alt="ref写法"></p>]]></content>
    
    
    <summary type="html">React基础语法介绍：class组件、函数组件的写法及使用，React事件绑定及原理，ref的使用</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React入门篇-认识React</title>
    <link href="https://jsq180.github.io/posts/74b32545.html"/>
    <id>https://jsq180.github.io/posts/74b32545.html</id>
    <published>2022-08-26T16:47:36.000Z</published>
    <updated>2022-09-24T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为《从零开始的 react 异世界生活》（误），主要介绍何为 React，以及创建 React 项目需要的环境等，认识 React 的基础框架。<br>PS：这是第一次尝试搭建个人博客，也是为了记录学习和工作上的各种问题，希望以后能够继续更新博客，既是对自己知识的巩固，也是一种记录。<br>首先，因工作上使用 React，所以这次也是从零开始，对 React 技术一种重温，同时对没有了解到的知识的学习。</p><h1 id="一、React-介绍"><a href="#一、React-介绍" class="headerlink" title="一、React 介绍"></a>一、React 介绍</h1><h2 id="1-React-起源与发展"><a href="#1-React-起源与发展" class="headerlink" title="1.React 起源与发展"></a>1.React 起源与发展</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在 2013 年 5 月开源了。</p><h2 id="2-React-与传统-MVC-的关系"><a href="#2-React-与传统-MVC-的关系" class="headerlink" title="2.React 与传统 MVC 的关系"></a>2.React 与传统 MVC 的关系</h2><p>轻量级的视图层库！A JavaScript library for building user interfaces</p><p>React 不是一个完整的 MVC 框架，最多可以认为是 MVC 中的 V（View），甚至 React 并不非常认可 MVC 开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><h2 id="3-React-的特性"><a href="#3-React-的特性" class="headerlink" title="3.React 的特性"></a>3.React 的特性</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05e2a28aa.png" alt="React特性"></p><h2 id="4-虚拟-DOM"><a href="#4-虚拟-DOM" class="headerlink" title="4.虚拟 DOM"></a>4.虚拟 DOM</h2><p><img src="https://s1.xptou.com/2022/08/27/630a05c1543a8.png" alt="传统DOM更新"><br><img src="https://s1.xptou.com/2022/08/27/630a05926ad17.png" alt="虚拟DOM"></p><h1 id="二、创建脚手架"><a href="#二、创建脚手架" class="headerlink" title="二、创建脚手架"></a>二、创建脚手架</h1><h2 id="1-全局安装-create-react-app"><a href="#1-全局安装-create-react-app" class="headerlink" title="1.全局安装 create-react-app"></a>1.全局安装 create-react-app</h2><p>全局安装脚手架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install -g create-react-app<br></code></pre></td></tr></table></figure><p>安装完成，可以检查是否安装成功（检查版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app -V<br></code></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app your-app (your-app为自定义项目名称)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Creating a new React app in /dir/your-app. Installing packages. This might take a couple of minutes. 安装过程较慢，<br>Installing react, react-dom, and react-scripts...    (执行过程)<br></code></pre></td></tr></table></figure><h2 id="2-如果不想全局安装，可以直接使用-npx"><a href="#2-如果不想全局安装，可以直接使用-npx" class="headerlink" title="2.如果不想全局安装，可以直接使用 npx"></a>2.如果不想全局安装，可以直接使用 npx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npx create-react-app myapp 也可以实现相同的效果<br></code></pre></td></tr></table></figure><p>这需要等待一段时间，这个过程实际上会安装三个东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">•react: react的顶级库 •react-dom:<br>因为react有很多的运行环境，比如app端的•react-native,<br>我们要在web上运行就使用react-dom •react-scripts:<br>包含运行和打包react应用程序的所有脚本及配置<br></code></pre></td></tr></table></figure><h2 id="3-创建并启动项目"><a href="#3-创建并启动项目" class="headerlink" title="3.创建并启动项目"></a>3.创建并启动项目</h2><p>出现下面的界面，表示创建项目成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Success! Created your-app at /dir/your-app<br>Inside that directory, you can run several commands:<br><br>    npm start<br>        Starts the development server.<br><br>    npm run build<br>        Bundles the app into static files for production.<br><br>    npm test<br>        Starts the test runner.<br><br>    npm run eject<br>        Removes this tool and copies build dependencies, configuration files<br>        and scripts into the app directory. If you do this, you can’t go back!<br><br>We suggest that you begin by typing:<br><br>    cd your-app<br>    npm start<br><br>    Happy hacking!<br></code></pre></td></tr></table></figure><p>根据上面的提示，通过 cd your-app 命令进入目录并运行 npm start 即可运行项目。<br>生成项目的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">├── README.md 使用方法的文档<br>├── node_modules 所有的依赖安装的目录<br>├── package-lock.json 锁定安装时的包的版本号,保证团队的依赖能保证一致。<br>├── package.json<br>├── public 静态公共目录<br>├── src 开发用的源代码目录<br></code></pre></td></tr></table></figure><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h2><ul><li>npm 安装失败<ul><li>切换为 npm 镜像为淘宝镜像</li><li>使用 yarn，如果本来使用 yarn 还要失败，还得把 yarn 的源切换到国内</li><li>如果还没有办法解决，请删除 node_modules 及 package-lock.json 然后重新执行 npm install 命令</li><li>再不能解决就删除 node_modules 及 package-lock.json 的同时清除 npm 缓存 npm cache clean —force 之后再执行 npm install 命令</li></ul></li><li>拓展：<br>仓库包管理工具：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i -g nrm    安装<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">nrm ls          查看<br></code></pre></td></tr></table></figure>查看执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/6309fe5a0dae7.png" alt="nrm ls查看"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">nrm use yarn    切换镜像源<br></code></pre></td></tr></table></figure>切换镜像源执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/630a01fddb1da.png" alt="nrm use yarn切换查看"></li></ul><h1 id="三、编写第一个-react-应用程序"><a href="#三、编写第一个-react-应用程序" class="headerlink" title="三、编写第一个 react 应用程序"></a>三、编写第一个 react 应用程序</h1><p>react 开发需要引入多个依赖文件：react.js、react-dom.js，分别又有开发版本和生产版本。<br>create react-app 里已经帮我们把这些东西都安装好了。把通过 CRA 创建的工程目录下的 src 目录清空，然后在里面重新创建一个 index.js。index.js 即为入口文件，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有 一种语法叫JSX，要写JSX，就必须引入React</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中 引入的，而不是从 react 引入。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-comment">// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的 元素上</span><br><span class="hljs-comment">// 此版本是 react 17 版本，18版本不支持这种写法</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="hljs-comment">// html语法</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div_h1&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-comment">// 渲染到 节点Id 为 root 的DOM元素下面</span><br>);<br><br>**注意：**<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span> 目前有助于：</span><br><span class="language-xml">识别不安全的生命周期</span><br><span class="language-xml">关于使用过时字符串 ref API 的警告</span><br><span class="language-xml">检测意外的副作用</span><br><span class="language-xml">检测过时的 context API</span><br><span class="language-xml">写法：</span><br><span class="language-xml"></span><br><span class="language-xml">```js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="四、JSX-语法与组件"><a href="#四、JSX-语法与组件" class="headerlink" title="四、JSX 语法与组件"></a>四、JSX 语法与组件</h1><h2 id="1-JSX-语法"><a href="#1-JSX-语法" class="headerlink" title="1.JSX 语法"></a>1.JSX 语法</h2><p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。<br>在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。 编译过程由 Babel 的 JSX 编译器实现。<br><a href="https://reactjs.org/docs/hello-world.html">官方示例链接</a>✔</p><p>原理是什么呢？</p><p>要明白 JSX 的原理，需要先明白如何用 JavaScript 对象来表现一个 DOM 元素的结构?<br>看下面的 DOM 结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;app&quot;</span> id=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个帮助你构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;appRoot&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;title&#x27;</span>&#125;,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;欢迎进入React的世界&#x27;</span> ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;React.js 是一个构建页面 UI 的库&#x27;</span>]<br>    &#125;<br>    ]<br> &#125;<br></code></pre></td></tr></table></figure><p>但是用 JavaScript 写起来太长了，结构看起来又不清晰，用 HTML 的方式写起来就方便很多了。</p><p>于是 React.js 就把 JavaScript 的语法扩展了一下，让 JavaScript 语言能够支持这种直接在 JavaScript 代码里面编写类似 HTML 标签结构的语法，这样写起来就方便很多了。编译的过程会把类似 HTML 的 JSX 结构转换成 JavaScript 的对象结构。</p><p>下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p>编译之后将得到这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>      <span class="hljs-string">&quot;div&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;appRoot&quot;</span>,<br>      &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;h1&quot;</span>,<br>        &#123;<br>          <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;欢迎进入React的世界&quot;</span><br>      ),<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;React.js 是一个构建页面 UI 的库&quot;</span>)<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>React.createElement</strong> 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等, 语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这种写法在获取DOM节点的时候可以看到</span><br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(type, [props], [...children]);<br></code></pre></td></tr></table></figure><p>所谓的 JSX 其实就是 JavaScript 对象，所以使用 React 和 JSX 的时候一定要经过编译的过程:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">JSX —使用react构造组件， bable进行编译—&gt; JavaScript对象 — ReactDOM.render() —&gt;<br>DOM元素 —&gt; 插入页面<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">React入门介绍：环境安装及创建项目</summary>
    
    
    
    <category term="React" scheme="https://jsq180.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://jsq180.github.io/tags/React/"/>
    
  </entry>
  
</feed>
