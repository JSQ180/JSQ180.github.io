<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JSQのBlog</title>
  
  <subtitle>尝试记录琐碎的日常</subtitle>
  <link href="https://jsq180.github.io/atom.xml" rel="self"/>
  
  <link href="https://jsq180.github.io/"/>
  <updated>2022-08-31T13:34:39.192Z</updated>
  <id>https://jsq180.github.io/</id>
  
  <author>
    <name>JSQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React入门篇-认识React</title>
    <link href="https://jsq180.github.io/posts/74b32545.html"/>
    <id>https://jsq180.github.io/posts/74b32545.html</id>
    <published>2022-08-31T13:34:39.192Z</published>
    <updated>2022-08-31T13:34:39.192Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为《从零开始的react异世界生活》（误），主要介绍何为 React，以及创建React项目需要的环境等，认识React的基础框架。<br>PS：这是第一次尝试搭建个人博客，也是为了记录学习和工作上的各种问题，希望以后能够继续更新博客，既是对自己知识的巩固，也是一种记录。<br>首先，因工作上使用 React，所以这次也是从零开始，对 React 技术一种重温，同时对没有了解到的知识的学习。</p><h1 id="React-基础篇"><a href="#React-基础篇" class="headerlink" title="React 基础篇"></a>React 基础篇</h1><h2 id="一、React-介绍"><a href="#一、React-介绍" class="headerlink" title="一、React 介绍"></a>一、React 介绍</h2><h3 id="1-React-起源与发展"><a href="#1-React-起源与发展" class="headerlink" title="1.React 起源与发展"></a>1.React 起源与发展</h3><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在 2013 年 5 月开源了。</p><h3 id="2-React-与传统-MVC-的关系"><a href="#2-React-与传统-MVC-的关系" class="headerlink" title="2.React 与传统 MVC 的关系"></a>2.React 与传统 MVC 的关系</h3><p>轻量级的视图层库！A JavaScript library for building user interfaces</p><p>React 不是一个完整的 MVC 框架，最多可以认为是 MVC 中的 V（View），甚至 React 并不非常认可 MVC 开发模式；React 构建页面 UI 的库。可以简单地理解为，React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><h3 id="3-React-的特性"><a href="#3-React-的特性" class="headerlink" title="3.React 的特性"></a>3.React 的特性</h3><p><img src="https://s1.xptou.com/2022/08/27/630a05e2a28aa.png" alt="React特性"></p><h3 id="4-虚拟-DOM"><a href="#4-虚拟-DOM" class="headerlink" title="4.虚拟 DOM"></a>4.虚拟 DOM</h3><p><img src="https://s1.xptou.com/2022/08/27/630a05c1543a8.png" alt="传统DOM更新"><br><img src="https://s1.xptou.com/2022/08/27/630a05926ad17.png" alt="虚拟DOM"></p><h2 id="二、创建脚手架"><a href="#二、创建脚手架" class="headerlink" title="二、创建脚手架"></a>二、创建脚手架</h2><h3 id="1-全局安装-create-react-app"><a href="#1-全局安装-create-react-app" class="headerlink" title="1.全局安装 create-react-app"></a>1.全局安装 create-react-app</h3><p>全局安装脚手架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm install -g create-react-app<br></code></pre></td></tr></table></figure><p>安装完成，可以检查是否安装成功（检查版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app -V<br></code></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">create-react-app your-app (your-app为自定义项目名称)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Creating a new React app in /dir/your-app. Installing packages. This might take a couple of minutes. 安装过程较慢，<br>Installing react, react-dom, and react-scripts...    (执行过程)<br></code></pre></td></tr></table></figure><h3 id="2-如果不想全局安装，可以直接使用-npx"><a href="#2-如果不想全局安装，可以直接使用-npx" class="headerlink" title="2.如果不想全局安装，可以直接使用 npx"></a>2.如果不想全局安装，可以直接使用 npx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npx create-react-app myapp 也可以实现相同的效果<br></code></pre></td></tr></table></figure><p>这需要等待一段时间，这个过程实际上会安装三个东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">•react: react的顶级库 •react-dom:<br>因为react有很多的运行环境，比如app端的•react-native,<br>我们要在web上运行就使用react-dom •react-scripts:<br>包含运行和打包react应用程序的所有脚本及配置<br></code></pre></td></tr></table></figure><h3 id="3-创建并启动项目"><a href="#3-创建并启动项目" class="headerlink" title="3.创建并启动项目"></a>3.创建并启动项目</h3><p>出现下面的界面，表示创建项目成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">Success! Created your-app at /dir/your-app<br>Inside that directory, you can run several commands:<br><br>    npm start<br>        Starts the development server.<br><br>    npm run build<br>        Bundles the app into static files for production.<br><br>    npm test<br>        Starts the test runner.<br><br>    npm run eject<br>        Removes this tool and copies build dependencies, configuration files<br>        and scripts into the app directory. If you do this, you can’t go back!<br><br>We suggest that you begin by typing:<br><br>    cd your-app<br>    npm start<br><br>    Happy hacking!<br></code></pre></td></tr></table></figure><p>根据上面的提示，通过 cd your-app 命令进入目录并运行 npm start 即可运行项目。<br>生成项目的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs EXAMPLE">├── README.md 使用方法的文档<br>├── node_modules 所有的依赖安装的目录<br>├── package-lock.json 锁定安装时的包的版本号,保证团队的依赖能保证一致。<br>├── package.json<br>├── public 静态公共目录<br>├── src 开发用的源代码目录<br></code></pre></td></tr></table></figure><h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h3><ul><li>npm 安装失败<ul><li>切换为 npm 镜像为淘宝镜像</li><li>使用 yarn，如果本来使用 yarn 还要失败，还得把 yarn 的源切换到国内</li><li>如果还没有办法解决，请删除 node_modules 及 package-lock.json 然后重新执行 npm install 命令</li><li>再不能解决就删除 node_modules 及 package-lock.json 的同时清除 npm 缓存 npm cache clean —force 之后再执行 npm install 命令</li></ul></li><li>拓展：<br>仓库包管理工具：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">npm i -g nrm    安装<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">nrm ls          查看<br></code></pre></td></tr></table></figure>查看执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/6309fe5a0dae7.png" alt="nrm ls查看"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">nrm use yarn    切换镜像源<br></code></pre></td></tr></table></figure>切换镜像源执行结果如图：<br><img src="https://s1.xptou.com/2022/08/27/630a01fddb1da.png" alt="nrm use yarn切换查看"></li></ul><h1 id="三、编写第一个-react-应用程序"><a href="#三、编写第一个-react-应用程序" class="headerlink" title="三、编写第一个 react 应用程序"></a>三、编写第一个 react 应用程序</h1><p>react 开发需要引入多个依赖文件：react.js、react-dom.js，分别又有开发版本和生产版本。<br>create react-app 里已经帮我们把这些东西都安装好了。把通过 CRA 创建的工程目录下的 src 目录清空，然后在里面重新创建一个 index.js。index.js 即为入口文件，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有 一种语法叫JSX，要写JSX，就必须引入React</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中 引入的，而不是从 react 引入。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-comment">// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的 元素上</span><br><span class="hljs-comment">// 此版本是 react 17 版本，18版本不支持这种写法</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="hljs-comment">// html语法</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div_h1&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-comment">// 渲染到 节点Id 为 root 的DOM元素下面</span><br>);<br><br>**注意：**<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span> 目前有助于：</span><br><span class="language-xml">识别不安全的生命周期</span><br><span class="language-xml">关于使用过时字符串 ref API 的警告</span><br><span class="language-xml">检测意外的副作用</span><br><span class="language-xml">检测过时的 context API</span><br><span class="language-xml">写法：</span><br><span class="language-xml"></span><br><span class="language-xml">```js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="四、JSX-语法与组件"><a href="#四、JSX-语法与组件" class="headerlink" title="四、JSX 语法与组件"></a>四、JSX 语法与组件</h2><h3 id="1-JSX-语法"><a href="#1-JSX-语法" class="headerlink" title="1.JSX 语法"></a>1.JSX 语法</h3><p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。<br>在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。 编译过程由 Babel 的 JSX 编译器实现。<br><a href="https://reactjs.org/docs/hello-world.html">官方示例链接</a>✔</p><p>原理是什么呢？</p><p>要明白 JSX 的原理，需要先明白如何用 JavaScript 对象来表现一个 DOM 元素的结构?<br>看下面的 DOM 结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;app&quot;</span> id=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个帮助你构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;appRoot&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;title&#x27;</span>&#125;,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;欢迎进入React的世界&#x27;</span> ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>        <span class="hljs-attr">attrs</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;React.js 是一个构建页面 UI 的库&#x27;</span>]<br>    &#125;<br>    ]<br> &#125;<br></code></pre></td></tr></table></figure><p>但是用 JavaScript 写起来太长了，结构看起来又不清晰，用 HTML 的方式写起来就方便很多了。</p><p>于是 React.js 就把 JavaScript 的语法扩展了一下，让 JavaScript 语言能够支持这种直接在 JavaScript 代码里面编写类似 HTML 标签结构的语法，这样写起来就方便很多了。编译的过程会把类似 HTML 的 JSX 结构转换成 JavaScript 的对象结构。</p><p>下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appRoot&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React.js 是一个构建页面 UI 的库 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p>编译之后将得到这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>      <span class="hljs-string">&quot;div&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;appRoot&quot;</span>,<br>      &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;h1&quot;</span>,<br>        &#123;<br>          <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>        &#125;,<br>        <span class="hljs-string">&quot;欢迎进入React的世界&quot;</span><br>      ),<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;React.js 是一个构建页面 UI 的库&quot;</span>)<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>React.createElement</strong> 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等, 语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这种写法在获取DOM节点的时候可以看到</span><br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(type, [props], [...children]);<br></code></pre></td></tr></table></figure><p>所谓的 JSX 其实就是 JavaScript 对象，所以使用 React 和 JSX 的时候一定要经过编译的过程:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">JSX —使用react构造组件， bable进行编译—&gt; JavaScript对象 — ReactDOM.render() —&gt;<br>DOM元素 —&gt; 插入页面<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">React入门介绍</summary>
    
    
    
    
    <category term="React基础" scheme="https://jsq180.github.io/tags/React%E5%9F%BA%E7%A1%80/"/>
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础篇-了解React的基础语法</title>
    <link href="https://jsq180.github.io/posts/46f4fab.html"/>
    <id>https://jsq180.github.io/posts/46f4fab.html</id>
    <published>2022-08-31T13:34:39.192Z</published>
    <updated>2022-08-31T13:34:39.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-基础篇"><a href="#React-基础篇" class="headerlink" title="React 基础篇"></a>React 基础篇</h1><h2 id="一、认识-React-组件"><a href="#一、认识-React-组件" class="headerlink" title="一、认识 React 组件"></a>一、认识 React 组件</h2><h3 id="1-Class-组件"><a href="#1-Class-组件" class="headerlink" title="1.Class 组件"></a>1.Class 组件</h3><p>ES6 的加入让 JavaScript 直接支持使用 class 来定义一个类，react 创建组件的方式就是使用的类的继承，ES6 class 是目前官方推荐的使用方式，它使用了 ES6 标准语法来构建，看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>ES6 class 组件其实就是一个构造器,每次使用组件都相当于在实例化组件，像这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入&#123;this.props.name&#125;的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>&#125;).<span class="hljs-title function_">render</span>();<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(app, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2.函数式组件"></a>2.函数式组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎进入React的世界<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>( <span class="hljs-comment">// React组件的调用方式</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) )<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 不论是 class 组件还是函数式组件，组件名必须大写，否则报错。</p><h3 id="3-组件的样式"><a href="#3-组件的样式" class="headerlink" title="3.组件的样式"></a>3.组件的样式</h3><ul><li>行内样式<br>想给虚拟 dom 添加行内样式，需要使用表达式传入样式对象的方式来实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，JS会把它当做一个逻辑进行处理，第二个是样式对象的括号</span><br>&lt;p style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;14px&quot;</span> &#125;&#125;&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>行内样式需要写入一个样式对象，而这个样式对象的位置可以放在很多地方，例如 render 函数里、组件原型上、外链 js 文件中。</p><ul><li>使用 class<br>React 推荐我们使用行内样式，因为 React 觉得每一个组件都是一个独立的整体。<br>其实我们大多数情况下还是大量的在为元素添加类名，但是需要注意的是， <strong>class</strong> 需要写成 <strong>className</strong> （因为毕竟是在写类 js 代码，会受到 js 规则的限制，而 class 是关键字）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p className=<span class="hljs-string">&quot;hello&quot;</span>&gt;<span class="hljs-title class_">Hello</span> world&lt;/p&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> ==&gt; className , <span class="hljs-keyword">for</span> ==&gt; <span class="hljs-title function_">htmlFor</span>(label)<br><span class="hljs-comment">/* htmlFor 即为 label 的 for 属性 */</span><br></code></pre></td></tr></table></figure><h3 id="4-组件嵌套"><a href="#4-组件嵌套" class="headerlink" title="4.组件嵌套"></a>4.组件嵌套</h3><h4 id="1-基础组件嵌套"><a href="#1-基础组件嵌套" class="headerlink" title="1.基础组件嵌套"></a>1.基础组件嵌套</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f1f600faea.png" alt="基础组件嵌套"></p><h4 id="2-多层组件嵌套"><a href="#2-多层组件嵌套" class="headerlink" title="2.多层组件嵌套"></a>2.多层组件嵌套</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;<span class="hljs-attr">red</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        NavBar 组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>NavBar 下的 Child 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Swiper</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Swiper 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TabBar</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TabBar 组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &quot;#<span class="hljs-attr">e6e6e6</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Swiper</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f200ab8171.png" alt="多层组件嵌套"></p><h3 id="5-事件处理"><a href="#5-事件处理" class="headerlink" title="5.事件处理"></a>5.事件处理</h3><h4 id="1-事件绑定写法"><a href="#1-事件绑定写法" class="headerlink" title="1.事件绑定写法"></a>1.事件绑定写法</h4><p>采用 on+事件名的方式来绑定一个事件，注意，这里和原生的事件是有区别的，原生的事件全是小写 onclick , React 里的事件是驼峰 onClick ，<strong>React 的事件并不是原生事件，而是合成事件。</strong></p><h4 id="2-事件-handler-的写法"><a href="#2-事件-handler-的写法" class="headerlink" title="2.事件 handler 的写法"></a>2.事件 handler 的写法</h4><ul><li>直接在 render 里写行内的箭头函数(不推荐)</li><li>在组件内使用箭头函数定义一个方法(推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 render 里直接使用 onClick={this.handleClick.bind(this)} (不推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在 constructor 里 bind(this)(推荐)<br><strong>个人最推荐的写法为 handleClick2 的方式，行内写方法，组件内将方法写成箭头函数的写法。若要传参，则采用 handleClick5 的写法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">/*  handleClick() &#123;</span><br><span class="hljs-comment">           console.log(this, &quot;click1&quot;);</span><br><span class="hljs-comment">       &#125; */</span><br>  handleClick2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click2&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">handleClick3</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click3&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick4</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click4&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">handleClick5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;click5&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不加小括号箭头函数，相当于自执行 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            console.log(&quot;click，仅限逻辑极少的情况&quot;);</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add1（行内箭头函数）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* handleClick 不加小括号，被动执行，点击之后触发。若加，则直接执行 */&#125;</span><br><span class="language-xml">        &#123;/* 若要传参，且不让他执行 则 onClick=&#123;()=&gt;&#123;this.handleClick(&quot;value&quot;)&#125;&#125; */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>add2（函数箭头函数）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick3.bind(this)&#125;</span>&gt;</span></span><br><span class="language-xml">          add3（行内非箭头函数绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 如果不绑定this ,this 为 undefined */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick4&#125;</span>&gt;</span></span><br><span class="language-xml">          add4（内非箭头函数不绑定this）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            this.handleClick5();</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          add5（行内箭头函数方法）</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f24cdcc47f.png" alt="事件绑定方式"></p><h4 id="3-React-事件绑定原理"><a href="#3-React-事件绑定原理" class="headerlink" title="3.React 事件绑定原理"></a>3.React 事件绑定原理</h4><p>react 的事件绑定并非像原生事件一样，绑定在具体的 DOM 节点上，这样是非常消耗内存的。而是采用了<strong>事件代理</strong>的方案：<br>测试结果如下：</p><ul><li>在未移除 button 的 click 事件时，按钮点击正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f28b32ece4.png" alt="未移除时结果"></li><li>在移除 button 的 click 事件后，按钮依旧正常执行<br><img src="https://s1.xptou.com/2022/08/31/630f29bc899d1.png" alt="移除后执行结果"></li><li>在移除 root 的 click 事件后，按钮无法操作<br><img src="https://s1.xptou.com/2022/08/31/630f2aaad0bb9.png" alt="移除 root 后执行结果"><br>由此推断：<br>react 的事件并非是由点击的 DOM 节点执行的，而是由 root 根节点 target 通过事件源找到真正触发的元素，然后从真实触发的元素依次向顶点查找有没有叫 onClick 的属性，如果有，就把该属性身上的事件执行。<br>因为事件代理的方式，在性能方面是更优的，因为不需要绑定到准确的 DOM 节点上，所以也不需要考虑解绑事件。</li></ul><h4 id="4-Event-对象"><a href="#4-Event-对象" class="headerlink" title="4.Event 对象"></a>4.Event 对象</h4><p>虽然 react 的事件机制与原生事件有所不同，但 event 事件对象却和原生的基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  handleClick2 = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, <span class="hljs-string">&quot;click&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick2&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：<br><img src="https://s1.xptou.com/2022/08/31/630f2d6eb5990.png" alt="打印结果"><br>和普通浏览器一样，事件 handler 会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。不同的是 React 中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有 event.stopPropagation 、 event.preventDefault 这种常用的方法</p><h4 id="5-Ref-的应用"><a href="#5-Ref-的应用" class="headerlink" title="5.Ref 的应用"></a>5.Ref 的应用</h4><ul><li>ref 字符串绑定（将要废弃）</li></ul><ul><li>给标签设置 ref=”ipt1”，通过这个获取 this.refs.ipt1 , ref 可以获取到应用的真实 dom</li></ul><ul><li>新的写法（推荐）</li></ul><ul><li>标签内设置 ipt2 = React.createRef(); 并通过 ref={this.ipt2} 进行 DOM 绑定，通过 this.ipt2.current 获取到真实 DOM</li><li>组件内设置 component = React.createRef(); 并通过 ref={this.component} 进行组件绑定，通过 this.component.current 可以获取到 组件内部的所有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// Input 组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  a = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Input组件---a=&#123;this.a&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  ipt2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  component = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut1&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">ipt1</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ipnut2&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Input组件&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">component</span>.<span class="hljs-property">current</span>.<span class="hljs-property">a</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ipt1&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.ipt2&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.component&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="https://s1.xptou.com/2022/08/31/630f5645535ac.png" alt="ref写法"></p>]]></content>
    
    
    <summary type="html">React基础语法介绍</summary>
    
    
    
    
    <category term="React基础" scheme="https://jsq180.github.io/tags/React%E5%9F%BA%E7%A1%80/"/>
    
    <category term="前端" scheme="https://jsq180.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
